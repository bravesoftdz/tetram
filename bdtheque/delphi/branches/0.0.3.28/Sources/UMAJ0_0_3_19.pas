unit UMAJ0_0_3_19;

interface

implementation

uses JvUIB, Updates;

procedure MAJ0_0_3_19(Query: TJvUIBScript);
begin
  with Query do begin
    Script.Clear;

    Script.Add('ALTER TABLE EDITIONS ALTER ISBN TYPE CHAR(13);');

    Script.Add('ALTER PROCEDURE PREVISIONS_SORTIES (');
    Script.Add('    INTEGRAL SMALLINT,');
    Script.Add('    IN_REFSERIE INTEGER)');
    Script.Add('RETURNS (');
    Script.Add('    REFSERIE INTEGER,');
    Script.Add('    TITRESERIE VARCHAR(150),');
    Script.Add('    UPPERTITRESERIE VARCHAR(150),');
    Script.Add('    TOME INTEGER,');
    Script.Add('    ANNEEPARUTION INTEGER,');
    Script.Add('    REFEDITEUR INTEGER,');
    Script.Add('    NOMEDITEUR VARCHAR(50),');
    Script.Add('    REFCOLLECTION INTEGER,');
    Script.Add('    NOMCOLLECTION VARCHAR(50))');
    Script.Add('AS');
    Script.Add('DECLARE VARIABLE CURRENTREFSERIE INTEGER;');
    Script.Add('DECLARE VARIABLE OLDREFSERIE INTEGER;');
    Script.Add('DECLARE VARIABLE CURRENTTOME INTEGER;');
    Script.Add('DECLARE VARIABLE MAXTOME INTEGER;');
    Script.Add('DECLARE VARIABLE MAXTOME2 INTEGER;');
    Script.Add('DECLARE VARIABLE SOMMEPONDEREE INTEGER;');
    Script.Add('DECLARE VARIABLE COMPTEALBUM INTEGER;');
    Script.Add('DECLARE VARIABLE CURRENTANNEE INTEGER;');
    Script.Add('DECLARE VARIABLE MAXANNEE INTEGER;');
    Script.Add('DECLARE VARIABLE TOMEPRECEDENT INTEGER;');
    Script.Add('DECLARE VARIABLE ANNEEPRECEDENTE INTEGER;');
    Script.Add('begin');
    Script.Add('  oldrefserie = -1;');
    Script.Add('  tomeprecedent = -1;');
    Script.Add('  anneeprecedente = -1;');
    Script.Add('  for select TOME, ANNEEPARUTION, s.RefSerie from');
    Script.Add('        albums a inner join series s on s.refserie = a.refserie');
    Script.Add('        where (s.terminee is null or s.terminee <> 1)');
    Script.Add('        and a.horsserie = 0 and a.integrale = 0 and a.anneeparution is not null');
    Script.Add('        and (:in_refserie is null or s.refserie = :in_refserie)');
    Script.Add('        order by s.refserie, TOME');
    Script.Add('        into');
    Script.Add('          :CURRENTTOME,');
    Script.Add('          :CURRENTANNEE,');
    Script.Add('          :CURRENTREFSERIE');
    Script.Add('  do begin');
    Script.Add('    if (currentrefserie <> oldrefserie) then begin');
    Script.Add('');
    Script.Add('      if (oldrefserie <> -1 and comptealbum > 0) then begin');
    Script.Add('        select MAX(TOME) + 1, MAX(ANNEEPARUTION) from albums');
    Script.Add('        where horsserie = 0 and integrale = 0 and refserie = :oldrefserie');
    Script.Add('        into');
    Script.Add('          :TOME,');
    Script.Add('          :MAXANNEE;');
    Script.Add('');
    Script.Add('        if (INTEGRAL = 1) then begin');
    Script.Add('          select max(tomefin) + 1 from albums');
    Script.Add('          where integrale = 1 and refserie = :oldrefserie');
    Script.Add('          into');
    Script.Add('            :MAXTOME2;');
    Script.Add('');
    Script.Add('          if (maxtome2 > tome) then tome = maxtome2;');
    Script.Add('        end');
    Script.Add('');
    Script.Add('        select s.RefSerie, s.TitreSerie, s.UpperTitreSerie, e.RefEditeur, e.NomEditeur, c.RefCollection, c.NomCollection from');
    Script.Add('          series s left join editeurs e on e.refediteur = s.refediteur');
    Script.Add('                   left join collections c on c.refcollection = s.refcollection');
    Script.Add('        where s.RefSerie = :oldrefserie');
    Script.Add('        into');
    Script.Add('          :REFSERIE,');
    Script.Add('          :TITRESERIE,');
    Script.Add('          :UPPERTITRESERIE,');
    Script.Add('          :REFEDITEUR,');
    Script.Add('          :NOMEDITEUR,');
    Script.Add('          :REFCOLLECTION,');
    Script.Add('          :NOMCOLLECTION;');
    Script.Add('');
    Script.Add('        ANNEEPARUTION = maxannee + ((tome - maxtome) * (sommeponderee / comptealbum));');
    Script.Add('        suspend;');
    Script.Add('      end');
    Script.Add('');
    Script.Add('      oldrefserie = currentrefserie;');
    Script.Add('      sommeponderee = 0;');
    Script.Add('      comptealbum = 0;');
    Script.Add('      tomeprecedent = -1;');
    Script.Add('      anneeprecedente = -1;');
    Script.Add('    end');
    Script.Add('    if (tomeprecedent <> -1) then begin');
    Script.Add('      /* non pondéré: sommeponderee = sommeponderee + ((CURRENTANNEE - ANNEEPRECEDENTE) / (CURRENTTOME - TOMEPRECEDENT)); */');
    Script.Add('      sommeponderee = sommeponderee + ((CURRENTANNEE - ANNEEPRECEDENTE) / (CURRENTTOME - TOMEPRECEDENT)) * CURRENTTOME;');
    Script.Add('      /* non pondéré: comptealbum = comptealbum + 1;*/');
    Script.Add('      comptealbum = comptealbum + CURRENTTOME;');
    Script.Add('    end');
    Script.Add('    tomeprecedent = CURRENTTOME;');
    Script.Add('    anneeprecedente = CURRENTANNEE;');
    Script.Add('    maxtome = CURRENTTOME;');
    Script.Add('  end');
    Script.Add('');
    Script.Add('  if (oldrefserie <> -1 and comptealbum > 0) then begin');
    Script.Add('    select MAX(TOME) + 1, MAX(ANNEEPARUTION) from albums');
    Script.Add('    where horsserie = 0 and integrale = 0 and refserie = :oldrefserie');
    Script.Add('    into');
    Script.Add('      :TOME,');
    Script.Add('      :MAXANNEE;');
    Script.Add('');
    Script.Add('    if (INTEGRAL = 1) then begin');
    Script.Add('      select max(tomefin) + 1 from albums');
    Script.Add('      where integrale = 1 and refserie = :oldrefserie');
    Script.Add('      into');
    Script.Add('        :MAXTOME2;');
    Script.Add('');
    Script.Add('      if (maxtome2 > tome) then tome = maxtome2;');
    Script.Add('    end');
    Script.Add('');
    Script.Add('    select s.RefSerie, s.TitreSerie, s.UpperTitreSerie, e.RefEditeur, e.NomEditeur, c.RefCollection, c.NomCollection from');
    Script.Add('      series s left join editeurs e on e.refediteur = s.refediteur');
    Script.Add('               left join collections c on c.refcollection = s.refcollection');
    Script.Add('    where s.RefSerie = :oldrefserie');
    Script.Add('    into');
    Script.Add('      :REFSERIE,');
    Script.Add('      :TITRESERIE,');
    Script.Add('      :UPPERTITRESERIE,');
    Script.Add('      :REFEDITEUR,');
    Script.Add('      :NOMEDITEUR,');
    Script.Add('      :REFCOLLECTION,');
    Script.Add('      :NOMCOLLECTION;');
    Script.Add('');
    Script.Add('    ANNEEPARUTION = maxannee + ((tome - maxtome) * (sommeponderee / comptealbum));');
    Script.Add('    suspend;');
    Script.Add('  end');
    Script.Add('end;');

    Script.Add('ALTER PROCEDURE ALBUMS_MANQUANTS (');
    Script.Add('    INTEGRALE INTEGER,');
    Script.Add('    IN_REFSERIE Integer)');
    Script.Add('RETURNS (');
    Script.Add('    REFSERIE Integer,');
    Script.Add('    COUNTSERIE Integer,');
    Script.Add('    TITRESERIE VARCHAR(150),');
    Script.Add('    UPPERTITRESERIE VARCHAR(150),');
    Script.Add('    TOME Integer,');
    Script.Add('    REFEDITEUR Integer,');
    Script.Add('    NOMEDITEUR VARCHAR(50),');
    Script.Add('    REFCOLLECTION Integer,');
    Script.Add('    NOMCOLLECTION VARCHAR(50))');
    Script.Add('AS');
    Script.Add('DECLARE VARIABLE MAXSERIE INTEGER;');
    Script.Add('DECLARE VARIABLE CURRENTTOME Integer;');
    Script.Add('DECLARE VARIABLE OWNEDTOME Integer;');
    Script.Add('begin');
    Script.Add('  if (integrale is Null) then integrale = 1;');
    Script.Add('  for select');
    Script.Add('        A.REFSERIE,');
    Script.Add('        max(TOME),');
    Script.Add('        count(distinct TOME),');
    Script.Add('        S.REFEDITEUR,');
    Script.Add('        NOMEDITEUR,');
    Script.Add('        S.REFCOLLECTION,');
    Script.Add('        NOMCOLLECTION');
    Script.Add('      from liste_tomes(:integrale) A inner join SERIES S on A.REFSERIE = S.REFSERIE');
    Script.Add('                                     left join EDITEURS E on S.REFEDITEUR = E.REFEDITEUR');
    Script.Add('                                     left join COLLECTIONS C on S.REFCOLLECTION = C.REFCOLLECTION');
    Script.Add('      where S.COMPLETE = 0');
    Script.Add('        and (:in_refserie is null or s.refserie = :in_refserie)');
    Script.Add('      group by A.REFSERIE, UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION,');
    Script.Add('               S.REFEDITEUR, NOMEDITEUR, S.REFCOLLECTION, NOMCOLLECTION');
    Script.Add('      order by UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION');
    Script.Add('      into');
    Script.Add('        :REFSERIE,');
    Script.Add('        :MAXSERIE,');
    Script.Add('        :COUNTSERIE,');
    Script.Add('        :REFEDITEUR,');
    Script.Add('        :NOMEDITEUR,');
    Script.Add('        :REFCOLLECTION,');
    Script.Add('        :NOMCOLLECTION');
    Script.Add('  do begin');
    Script.Add('    if (COUNTSERIE <> MAXSERIE) then begin');
    Script.Add('      CURRENTTOME = 0;');
    Script.Add('      for select distinct');
    Script.Add('            UPPERTITRESERIE,');
    Script.Add('            TITRESERIE,');
    Script.Add('            TOME');
    Script.Add('          from liste_tomes(:integrale) A inner join SERIES S on A.REFSERIE = S.REFSERIE and S.REFSERIE = :REFSERIE');
    Script.Add('          order by TOME');
    Script.Add('          into');
    Script.Add('            :UPPERTITRESERIE,');
    Script.Add('            :TITRESERIE,');
    Script.Add('            :OWNEDTOME');
    Script.Add('      do begin');
    Script.Add('        CURRENTTOME = CURRENTTOME + 1;');
    Script.Add('        while ((CURRENTTOME <> OWNEDTOME) and (CURRENTTOME < MAXSERIE)) do begin');
    Script.Add('          TOME = CURRENTTOME;');
    Script.Add('          suspend;');
    Script.Add('          CURRENTTOME = CURRENTTOME + 1;');
    Script.Add('        end');
    Script.Add('      end');
    Script.Add('    end');
    Script.Add('  end');
    Script.Add('end;');

    ExecuteScript;
  end;
end;

initialization
  RegisterUpdate('0.0.3.19', @MAJ0_0_3_19);

end.
