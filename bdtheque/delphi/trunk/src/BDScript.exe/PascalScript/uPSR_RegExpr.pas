unit uPSR_RegExpr;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses uPSRuntime;

procedure RIRegister_RegExpr_Routines(S: TPSExec);
procedure RIRegister_ERegExpr(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRegExpr(CL: TPSRuntimeClassImporter);
procedure RIRegister_RegExpr(CL: TPSRuntimeClassImporter);

implementation

uses Classes, SysUtils, RegExpr;

procedure ERegExprCompilerErrorPos_W(Self: ERegExpr; const T: integer);
begin
  Self.CompilerErrorPos := T;
end;

procedure ERegExprCompilerErrorPos_R(Self: ERegExpr; var T: integer);
begin
  T := Self.CompilerErrorPos;
end;

procedure ERegExprErrorCode_W(Self: ERegExpr; const T: integer);
begin
  Self.ErrorCode := T;
end;

procedure ERegExprErrorCode_R(Self: ERegExpr; var T: integer);
begin
  T := Self.ErrorCode;
end;

procedure TRegExprInvertCase_W(Self: TRegExpr; const T: TRegExprInvertCaseFunction);
begin
  Self.InvertCase := T;
end;

procedure TRegExprInvertCase_R(Self: TRegExpr; var T: TRegExprInvertCaseFunction);
begin
  T := Self.InvertCase;
end;

procedure TRegExprLinePairedSeparator_W(Self: TRegExpr; const T: RegExprString);
begin
  Self.LinePairedSeparator := T;
end;

procedure TRegExprLinePairedSeparator_R(Self: TRegExpr; var T: RegExprString);
begin
  T := Self.LinePairedSeparator;
end;

procedure TRegExprLineSeparators_W(Self: TRegExpr; const T: RegExprString);
begin
  Self.LineSeparators := T;
end;

procedure TRegExprLineSeparators_R(Self: TRegExpr; var T: RegExprString);
begin
  T := Self.LineSeparators;
end;

procedure TRegExprWordChars_W(Self: TRegExpr; const T: RegExprString);
begin
  Self.WordChars := T;
end;

procedure TRegExprWordChars_R(Self: TRegExpr; var T: RegExprString);
begin
  T := Self.WordChars;
end;

procedure TRegExprSpaceChars_W(Self: TRegExpr; const T: RegExprString);
begin
  Self.SpaceChars := T;
end;

procedure TRegExprSpaceChars_R(Self: TRegExpr; var T: RegExprString);
begin
  T := Self.SpaceChars;
end;

procedure TRegExprCompilerErrorPos_R(Self: TRegExpr; var T: integer);
begin
  T := Self.CompilerErrorPos;
end;

procedure TRegExprMatch_R(Self: TRegExpr; var T: RegExprString; const t1: integer);
begin
  T := Self.Match[t1];
end;

procedure TRegExprMatchLen_R(Self: TRegExpr; var T: integer; const t1: integer);
begin
  T := Self.MatchLen[t1];
end;

procedure TRegExprMatchPos_R(Self: TRegExpr; var T: integer; const t1: integer);
begin
  T := Self.MatchPos[t1];
end;

procedure TRegExprSubExprMatchCount_R(Self: TRegExpr; var T: integer);
begin
  T := Self.SubExprMatchCount;
end;

function TRegExprReplace2_P(Self: TRegExpr; AInputStr: RegExprString; AReplaceFunc: TRegExprReplaceFunction): RegExprString;
begin
  Result := Self.Replace(AInputStr, AReplaceFunc);
end;

function TRegExprReplace1_P(Self: TRegExpr; AInputStr: RegExprString; const AReplaceStr: RegExprString; AUseSubstitution: boolean): RegExprString;
begin
  Result := Self.Replace(AInputStr, AReplaceStr, AUseSubstitution);
end;

procedure TRegExprInputString_W(Self: TRegExpr; const T: RegExprString);
begin
  Self.InputString := T;
end;

procedure TRegExprInputString_R(Self: TRegExpr; var T: RegExprString);
begin
  T := Self.InputString;
end;

function TRegExprExec3_P(Self: TRegExpr; AOffset: integer): boolean;
begin
  Result := Self.Exec(AOffset);
end;

function TRegExprExec2_P(Self: TRegExpr): boolean;
begin
  Result := Self.Exec;
end;

function TRegExprExec1_P(Self: TRegExpr; const AInputString: RegExprString): boolean;
begin
  Result := Self.Exec(AInputString);
end;

procedure TRegExprModifierX_W(Self: TRegExpr; const T: boolean);
begin
  Self.ModifierX := T;
end;

procedure TRegExprModifierX_R(Self: TRegExpr; var T: boolean);
begin
  T := Self.ModifierX;
end;

procedure TRegExprModifierM_W(Self: TRegExpr; const T: boolean);
begin
  Self.ModifierM := T;
end;

procedure TRegExprModifierM_R(Self: TRegExpr; var T: boolean);
begin
  T := Self.ModifierM;
end;

procedure TRegExprModifierG_W(Self: TRegExpr; const T: boolean);
begin
  Self.ModifierG := T;
end;

procedure TRegExprModifierG_R(Self: TRegExpr; var T: boolean);
begin
  T := Self.ModifierG;
end;

procedure TRegExprModifierS_W(Self: TRegExpr; const T: boolean);
begin
  Self.ModifierS := T;
end;

procedure TRegExprModifierS_R(Self: TRegExpr; var T: boolean);
begin
  T := Self.ModifierS;
end;

procedure TRegExprModifierR_W(Self: TRegExpr; const T: boolean);
begin
  Self.ModifierR := T;
end;

procedure TRegExprModifierR_R(Self: TRegExpr; var T: boolean);
begin
  T := Self.ModifierR;
end;

procedure TRegExprModifierI_W(Self: TRegExpr; const T: boolean);
begin
  Self.ModifierI := T;
end;

procedure TRegExprModifierI_R(Self: TRegExpr; var T: boolean);
begin
  T := Self.ModifierI;
end;

procedure TRegExprModifierStr_W(Self: TRegExpr; const T: RegExprString);
begin
  Self.ModifierStr := T;
end;

procedure TRegExprModifierStr_R(Self: TRegExpr; var T: RegExprString);
begin
  T := Self.ModifierStr;
end;

procedure TRegExprExpression_W(Self: TRegExpr; const T: RegExprString);
begin
  Self.Expression := T;
end;

procedure TRegExprExpression_R(Self: TRegExpr; var T: RegExprString);
begin
  T := Self.Expression;
end;

procedure RIRegister_RegExpr_Routines(S: TPSExec);
begin
  S.RegisterDelphiFunction(@ExecRegExpr, 'ExecRegExpr', cdRegister);
  S.RegisterDelphiFunction(@SplitRegExpr, 'SplitRegExpr', cdRegister);
  S.RegisterDelphiFunction(@ReplaceRegExpr, 'ReplaceRegExpr', cdRegister);
  S.RegisterDelphiFunction(@QuoteRegExprMetaChars, 'QuoteRegExprMetaChars', cdRegister);
  S.RegisterDelphiFunction(@RegExprSubExpressions, 'RegExprSubExpressions', cdRegister);
end;

procedure RIRegister_ERegExpr(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(ERegExpr) do
  begin
    RegisterPropertyHelper(@ERegExprErrorCode_R, @ERegExprErrorCode_W, 'ErrorCode');
    RegisterPropertyHelper(@ERegExprCompilerErrorPos_R, @ERegExprCompilerErrorPos_W, 'CompilerErrorPos');
  end;
end;

procedure RIRegister_TRegExpr(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRegExpr) do
  begin
    RegisterConstructor(@TRegExpr.Create, 'Create');
    RegisterMethod(@TRegExpr.VersionMajor, 'VersionMajor');
    RegisterMethod(@TRegExpr.VersionMinor, 'VersionMinor');
    RegisterPropertyHelper(@TRegExprExpression_R, @TRegExprExpression_W, 'Expression');
    RegisterPropertyHelper(@TRegExprModifierStr_R, @TRegExprModifierStr_W, 'ModifierStr');
    RegisterPropertyHelper(@TRegExprModifierI_R, @TRegExprModifierI_W, 'ModifierI');
    RegisterPropertyHelper(@TRegExprModifierR_R, @TRegExprModifierR_W, 'ModifierR');
    RegisterPropertyHelper(@TRegExprModifierS_R, @TRegExprModifierS_W, 'ModifierS');
    RegisterPropertyHelper(@TRegExprModifierG_R, @TRegExprModifierG_W, 'ModifierG');
    RegisterPropertyHelper(@TRegExprModifierM_R, @TRegExprModifierM_W, 'ModifierM');
    RegisterPropertyHelper(@TRegExprModifierX_R, @TRegExprModifierX_W, 'ModifierX');
    RegisterMethod(@TRegExprExec1_P, 'Exec1');
    RegisterMethod(@TRegExprExec2_P, 'Exec2');
    RegisterMethod(@TRegExprExec3_P, 'Exec3');
    RegisterMethod(@TRegExpr.ExecNext, 'ExecNext');
    RegisterMethod(@TRegExpr.ExecPos, 'ExecPos');
    RegisterPropertyHelper(@TRegExprInputString_R, @TRegExprInputString_W, 'InputString');
    RegisterMethod(@TRegExpr.Substitute, 'Substitute');
    RegisterMethod(@TRegExpr.Split, 'Split');
    RegisterMethod(@TRegExprReplace1_P, 'Replace1');
    RegisterMethod(@TRegExprReplace2_P, 'Replace2');
    RegisterMethod(@TRegExpr.ReplaceEx, 'ReplaceEx');
    RegisterPropertyHelper(@TRegExprSubExprMatchCount_R, nil, 'SubExprMatchCount');
    RegisterPropertyHelper(@TRegExprMatchPos_R, nil, 'MatchPos');
    RegisterPropertyHelper(@TRegExprMatchLen_R, nil, 'MatchLen');
    RegisterPropertyHelper(@TRegExprMatch_R, nil, 'Match');
    RegisterMethod(@TRegExpr.LastError, 'LastError');
    RegisterVirtualMethod(@TRegExpr.ErrorMsg, 'ErrorMsg');
    RegisterPropertyHelper(@TRegExprCompilerErrorPos_R, nil, 'CompilerErrorPos');
    RegisterPropertyHelper(@TRegExprSpaceChars_R, @TRegExprSpaceChars_W, 'SpaceChars');
    RegisterPropertyHelper(@TRegExprWordChars_R, @TRegExprWordChars_W, 'WordChars');
    RegisterPropertyHelper(@TRegExprLineSeparators_R, @TRegExprLineSeparators_W, 'LineSeparators');
    RegisterPropertyHelper(@TRegExprLinePairedSeparator_R, @TRegExprLinePairedSeparator_W, 'LinePairedSeparator');
    RegisterMethod(@TRegExpr.InvertCaseFunction, 'InvertCaseFunction');
    RegisterPropertyHelper(@TRegExprInvertCase_R, @TRegExprInvertCase_W, 'InvertCase');
    RegisterMethod(@TRegExpr.Compile, 'Compile');
    RegisterMethod(@TRegExpr.Dump, 'Dump');
  end;
end;

procedure RIRegister_RegExpr(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRegExpr) do
    RIRegister_TRegExpr(CL);
  RIRegister_ERegExpr(CL);
end;

end.

