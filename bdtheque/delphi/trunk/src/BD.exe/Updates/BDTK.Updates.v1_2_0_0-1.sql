ALTER TRIGGER ALBUMS_AI INACTIVE;
ALTER TRIGGER ALBUMS_DV INACTIVE;
ALTER TRIGGER ALBUMS_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER AUTEURS_PARABD_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER AUTEURS_SERIES_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER AUTEURS_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER COLLECTIONS_AI INACTIVE;
ALTER TRIGGER COLLECTIONS_DV INACTIVE;
ALTER TRIGGER COLLECTIONS_EDITIONS_REF INACTIVE;
ALTER TRIGGER COLLECTIONS_SERIE_REF INACTIVE;
ALTER TRIGGER COLLECTIONS_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER CONVERSIONS_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER COTES_PARABD_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER COTES_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER COUVERTURES_AI INACTIVE;
ALTER TRIGGER COUVERTURES_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER CRITEREBOOLEAN_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER CRITEREIMAGE_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER CRITERELANGUETITRE_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER CRITERELISTE_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER CRITERENUMERAL_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER CRITERESTRING_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER CRITERETITRE_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER EDITEURS_AI INACTIVE;
ALTER TRIGGER EDITEURS_DV INACTIVE;
ALTER TRIGGER EDITEURS_SERIE_REF INACTIVE;
ALTER TRIGGER EDITEURS_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER EDITIONS_AD0 INACTIVE;
ALTER TRIGGER EDITIONS_AI INACTIVE;
ALTER TRIGGER EDITIONS_AI0 INACTIVE;
ALTER TRIGGER EDITIONS_AU0 INACTIVE;
ALTER TRIGGER EDITIONS_BU0 INACTIVE;
ALTER TRIGGER EDITIONS_COTE_BIU1 INACTIVE;
ALTER TRIGGER EDITIONS_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER EMPRUNTEURS_AI INACTIVE;
ALTER TRIGGER EMPRUNTEURS_DV INACTIVE;
ALTER TRIGGER EMPRUNTEURS_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER ENTRETIENT_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER GENRESERIES_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER GENRES_AI INACTIVE;
ALTER TRIGGER GENRES_DV INACTIVE;
ALTER TRIGGER GENRES_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER LISTES_AUD0 INACTIVE;
ALTER TRIGGER LISTES_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER OPTIONS_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER PARABD_AI INACTIVE;
ALTER TRIGGER PARABD_COTE_BIU1 INACTIVE;
ALTER TRIGGER PARABD_DV INACTIVE;
ALTER TRIGGER PARABD_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER PERSONNES_AI INACTIVE;
ALTER TRIGGER PERSONNES_DV INACTIVE;
ALTER TRIGGER PERSONNES_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER SERIES_AI INACTIVE;
ALTER TRIGGER SERIES_DV INACTIVE;
ALTER TRIGGER SERIES_UNIQID_BIU0 INACTIVE;
ALTER TRIGGER STATUT_AI INACTIVE;
ALTER TRIGGER STATUT_UNIQID_BIU0 INACTIVE;

ALTER TABLE ALBUMS
    ADD ID_SERIE T_GUID_NOTNULL;
alter table ALBUMS alter ID_ALBUMS position 1;
alter table ALBUMS alter REFALBUM position 2;
alter table ALBUMS alter TITREALBUM position 3;
alter table ALBUMS alter MOISPARUTION position 4;
alter table ALBUMS alter ANNEEPARUTION position 5;
alter table ALBUMS alter REFSERIE position 6;
alter table ALBUMS alter ID_SERIE position 7;
alter table ALBUMS alter TOME position 8;
alter table ALBUMS alter TOMEDEBUT position 9;
alter table ALBUMS alter TOMEFIN position 10;
alter table ALBUMS alter HORSSERIE position 11;
alter table ALBUMS alter INTEGRALE position 12;
alter table ALBUMS alter SUJETALBUM position 13;
alter table ALBUMS alter REMARQUESALBUM position 14;
alter table ALBUMS alter TITREINITIALESALBUM position 15;
alter table ALBUMS alter UPPERTITREALBUM position 16;
alter table ALBUMS alter UPPERSUJETALBUM position 17;
alter table ALBUMS alter UPPERREMARQUESALBUM position 18;
alter table ALBUMS alter SOUNDEXTITREALBUM position 19;
alter table ALBUMS alter INITIALETITREALBUM position 20;
alter table ALBUMS alter ACHAT position 21;
alter table ALBUMS alter NBEDITIONS position 22;
alter table ALBUMS alter COMPLET position 23;
alter table ALBUMS alter DC_ALBUMS position 24;
alter table ALBUMS alter DM_ALBUMS position 25;

update albums a set
  id_serie = (select id_series from series s where a.refserie = s.refserie);

ALTER TABLE AUTEURS
    ADD ID_ALBUM T_GUID_NOTNULL,
    ADD ID_PERSONNE T_GUID_NOTNULL;
alter table AUTEURS alter ID_AUTEURS position 1;
alter table AUTEURS alter REFALBUM position 2;
alter table AUTEURS alter ID_ALBUM position 3;
alter table AUTEURS alter REFPERSONNE position 4;
alter table AUTEURS alter ID_PERSONNE position 5;
alter table AUTEURS alter METIER position 6;
alter table AUTEURS alter DC_AUTEURS position 7;
alter table AUTEURS alter DM_AUTEURS position 8;

update auteurs au set
  id_album = (select id_albums from albums al where au.refalbum = al.refalbum),
  id_personne = (select id_personnes from personnes p where au.refpersonne = p.refpersonne);

ALTER TABLE AUTEURS_PARABD
    ADD ID_PARABD T_GUID_NOTNULL,
    ADD ID_PERSONNE T_GUID_NOTNULL;
alter table AUTEURS_PARABD alter ID_AUTEURS_PARABD position 1;
alter table AUTEURS_PARABD alter REFPARABD position 2;
alter table AUTEURS_PARABD alter ID_PARABD position 3;
alter table AUTEURS_PARABD alter REFPERSONNE position 4;
alter table AUTEURS_PARABD alter ID_PERSONNE position 5;
alter table AUTEURS_PARABD alter DC_AUTEURS_PARABD position 6;
alter table AUTEURS_PARABD alter DM_AUTEURS_PARABD position 7;

update auteurs_parabd a set
  id_parabd = (select id_parabd from parabd p where a.refparabd = p.refparabd),
  id_personne = (select id_personnes from personnes p where a.refpersonne = p.refpersonne);

ALTER TABLE AUTEURS_SERIES
    ADD ID_SERIE T_GUID_NOTNULL,
    ADD ID_PERSONNE T_GUID_NOTNULL;
alter table AUTEURS_SERIES alter ID_AUTEURS_SERIES position 1;
alter table AUTEURS_SERIES alter REFSERIE position 2;
alter table AUTEURS_SERIES alter ID_SERIE position 3;
alter table AUTEURS_SERIES alter REFPERSONNE position 4;
alter table AUTEURS_SERIES alter ID_PERSONNE position 5;
alter table AUTEURS_SERIES alter METIER position 6;
alter table AUTEURS_SERIES alter DC_AUTEURS_SERIES position 7;
alter table AUTEURS_SERIES alter DM_AUTEURS_SERIES position 8;

update auteurs_series a set
  id_serie = (select id_series from series s where a.refserie = s.refserie),
  id_personne = (select id_personnes from personnes p where a.refpersonne = p.refpersonne);

ALTER TABLE COLLECTIONS
    ADD ID_EDITEUR T_GUID_NOTNULL;
alter table COLLECTIONS alter ID_COLLECTIONS position 1;
alter table COLLECTIONS alter REFCOLLECTION position 2;
alter table COLLECTIONS alter NOMCOLLECTION position 3;
alter table COLLECTIONS alter REFEDITEUR position 4;
alter table COLLECTIONS alter ID_EDITEUR position 5;
alter table COLLECTIONS alter UPPERNOMCOLLECTION position 6;
alter table COLLECTIONS alter INITIALENOMCOLLECTION position 7;
alter table COLLECTIONS alter DC_COLLECTIONS position 8;
alter table COLLECTIONS alter DM_COLLECTIONS position 9;

update collections c set
  id_editeur = (select id_editeurs from editeurs e where c.refediteur = e.refediteur);

ALTER TABLE COTES
    ADD ID_EDITION T_GUID_NOTNULL;
alter table COTES alter ID_COTES position 1;
alter table COTES alter REFEDITION position 2;
alter table COTES alter ID_EDITION position 3;
alter table COTES alter ANNEECOTE position 4;
alter table COTES alter PRIXCOTE position 5;
alter table COTES alter DC_COTES position 6;
alter table COTES alter DM_COTES position 7;

update cotes c set
  id_edition = (select id_editions from editions e where c.refedition = e.refedition);

ALTER TABLE COTES_PARABD
    ADD ID_PARABD T_GUID_NOTNULL;
alter table COTES_PARABD alter ID_COTES_PARABD position 1;
alter table COTES_PARABD alter REFPARABD position 2;
alter table COTES_PARABD alter ID_PARABD position 3;
alter table COTES_PARABD alter ANNEECOTE position 4;
alter table COTES_PARABD alter PRIXCOTE position 5;
alter table COTES_PARABD alter DC_COTES_PARABD position 6;
alter table COTES_PARABD alter DM_COTES_PARABD position 7;

update cotes_parabd c set
  id_parabd = (select id_parabd from parabd p where c.refparabd = p.refparabd);

ALTER TABLE COUVERTURES
    ADD ID_ALBUM T_GUID,
    ADD ID_EDITION T_GUID;
alter table COUVERTURES alter ID_COUVERTURES position 1;
alter table COUVERTURES alter REFCOUVERTURE position 2;
alter table COUVERTURES alter REFALBUM position 3;
alter table COUVERTURES alter ID_ALBUM position 4;
alter table COUVERTURES alter REFEDITION position 5;
alter table COUVERTURES alter ID_EDITION position 6;
alter table COUVERTURES alter ORDRE position 7;
alter table COUVERTURES alter CATEGORIEIMAGE position 8;
alter table COUVERTURES alter STOCKAGECOUVERTURE position 9;
alter table COUVERTURES alter IMAGECOUVERTURE position 10;
alter table COUVERTURES alter FICHIERCOUVERTURE position 11;
alter table COUVERTURES alter DC_COUVERTURES position 12;
alter table COUVERTURES alter DM_COUVERTURES position 13;

update couvertures c set
  id_album = (select id_albums from albums a where c.refalbum = a.refalbum),
  id_edition = (select id_editions from editions e where c.refedition = e.refedition);

ALTER TABLE EDITIONS
    ADD ID_ALBUM T_GUID_NOTNULL,
    ADD ID_EDITEUR T_GUID_NOTNULL,
    ADD ID_COLLECTION T_GUID;
alter table EDITIONS alter ID_EDITIONS position 1;
alter table EDITIONS alter REFEDITION position 2;
alter table EDITIONS alter REFALBUM position 3;
alter table EDITIONS alter ID_ALBUM position 4;
alter table EDITIONS alter REFEDITEUR position 5;
alter table EDITIONS alter ID_EDITEUR position 6;
alter table EDITIONS alter REFCOLLECTION position 7;
alter table EDITIONS alter ID_COLLECTION position 8;
alter table EDITIONS alter ANNEEEDITION position 9;
alter table EDITIONS alter PRIX position 10;
alter table EDITIONS alter VO position 11;
alter table EDITIONS alter COULEUR position 12;
alter table EDITIONS alter ISBN position 13;
alter table EDITIONS alter PRETE position 14;
alter table EDITIONS alter STOCK position 15;
alter table EDITIONS alter DEDICACE position 16;
alter table EDITIONS alter ETAT position 17;
alter table EDITIONS alter RELIURE position 18;
alter table EDITIONS alter TYPEEDITION position 19;
alter table EDITIONS alter NOTES position 20;
alter table EDITIONS alter DATEACHAT position 21;
alter table EDITIONS alter GRATUIT position 22;
alter table EDITIONS alter OFFERT position 23;
alter table EDITIONS alter NOMBREDEPAGES position 24;
alter table EDITIONS alter ORIENTATION position 25;
alter table EDITIONS alter FORMATEDITION position 26;
alter table EDITIONS alter ANNEECOTE position 27;
alter table EDITIONS alter PRIXCOTE position 28;
alter table EDITIONS alter DC_EDITIONS position 29;
alter table EDITIONS alter DM_EDITIONS position 30;

update editions e set
  id_album = (select id_albums from albums a where e.refalbum = a.refalbum),
  id_editeur = (select id_editeurs from editeurs ed where e.refediteur = ed.refediteur),
  id_collection = (select id_collections from collections c where e.refcollection = c.refcollection);

ALTER TABLE GENRESERIES
    ADD ID_SERIE T_GUID_NOTNULL,
    ADD ID_GENRE T_GUID_NOTNULL;
alter table GENRESERIES alter ID_GENRESERIES position 1;
alter table GENRESERIES alter REFSERIE position 2;
alter table GENRESERIES alter ID_SERIE position 3;
alter table GENRESERIES alter REFGENRE position 4;
alter table GENRESERIES alter ID_GENRE position 5;
alter table GENRESERIES alter DC_GENRESERIES position 6;
alter table GENRESERIES alter DM_GENRESERIES position 7;

update genreseries gs set
  id_serie = (select id_series from series s where s.refserie = gs.refserie),
  id_genre = (select id_genres from genres g where g.refgenre = gs.refgenre);

ALTER TABLE PARABD
    ADD ID_SERIE T_GUID_NOTNULL;
alter table PARABD alter ID_PARABD position 1;
alter table PARABD alter REFPARABD position 2;
alter table PARABD alter TITREPARABD position 3;
alter table PARABD alter REFSERIE position 4;
alter table PARABD alter ID_SERIE position 5;
alter table PARABD alter CATEGORIEPARABD position 6;
alter table PARABD alter ACHAT position 7;
alter table PARABD alter COMPLET position 8;
alter table PARABD alter DEDICACE position 9;
alter table PARABD alter NUMEROTE position 10;
alter table PARABD alter ANNEE position 11;
alter table PARABD alter ANNEECOTE position 12;
alter table PARABD alter PRIXCOTE position 13;
alter table PARABD alter PRETE position 14;
alter table PARABD alter STOCK position 15;
alter table PARABD alter DATEACHAT position 16;
alter table PARABD alter PRIX position 17;
alter table PARABD alter GRATUIT position 18;
alter table PARABD alter OFFERT position 19;
alter table PARABD alter STOCKAGEPARABD position 20;
alter table PARABD alter IMAGEPARABD position 21;
alter table PARABD alter FICHIERPARABD position 22;
alter table PARABD alter TITREINITIALESPARABD position 23;
alter table PARABD alter UPPERTITREPARABD position 24;
alter table PARABD alter SOUNDEXTITREPARABD position 25;
alter table PARABD alter INITIALETITREPARABD position 26;
alter table PARABD alter DESCRIPTION position 27;
alter table PARABD alter UPPERDESCRIPTION position 28;
alter table PARABD alter DC_PARABD position 29;
alter table PARABD alter DM_PARABD position 30;

update parabd p set
  id_serie = (select id_series from series s where s.refserie = p.refserie);

ALTER TABLE SERIES
    ADD ID_EDITEUR T_GUID,
    ADD ID_COLLECTION T_GUID;
alter table SERIES alter ID_SERIES position 1;
alter table SERIES alter REFSERIE position 2;
alter table SERIES alter TITRESERIE position 3;
alter table SERIES alter UPPERTITRESERIE position 4;
alter table SERIES alter INITIALETITRESERIE position 5;
alter table SERIES alter REFEDITEUR position 6;
alter table SERIES alter ID_EDITEUR position 7;
alter table SERIES alter REFCOLLECTION position 8;
alter table SERIES alter ID_COLLECTION position 9;
alter table SERIES alter SUJETSERIE position 10;
alter table SERIES alter REMARQUESSERIE position 11;
alter table SERIES alter UPPERSUJETSERIE position 12;
alter table SERIES alter UPPERREMARQUESSERIE position 13;
alter table SERIES alter TERMINEE position 14;
alter table SERIES alter COMPLETE position 15;
alter table SERIES alter SOUNDEXTITRESERIE position 16;
alter table SERIES alter SITEWEB position 17;
alter table SERIES alter DC_SERIES position 18;
alter table SERIES alter DM_SERIES position 19;

update series s set
  id_editeur = (select id_editeurs from editeurs e where s.refediteur = e.refediteur),
  id_collection = (select id_collections from collections c where s.refcollection = c.refcollection);

ALTER TABLE STATUT
    ADD ID_EDITION T_GUID_NOTNULL,
    ADD ID_EMPRUNTEUR T_GUID_NOTNULL;
alter table STATUT alter ID_STATUT position 1;
alter table STATUT alter REFEMPRUNT position 2;
alter table STATUT alter DATEEMPRUNT position 3;
alter table STATUT alter REFEDITION position 4;
alter table STATUT alter ID_EDITION position 5;
alter table STATUT alter PRETEMPRUNT position 6;
alter table STATUT alter REFEMPRUNTEUR position 7;
alter table STATUT alter ID_EMPRUNTEUR position 8;
alter table STATUT alter DC_STATUT position 9;
alter table STATUT alter DM_STATUT position 10;

update statut s set
  id_edition = (select id_editions from editions e where s.refedition = e.refedition),
  id_emprunteur = (select id_emprunteurs from emprunteurs em where s.refemprunteur = em.refemprunteur);

ALTER TABLE ALBUMS DROP CONSTRAINT ALBUMS_FK1;
ALTER TABLE AUTEURS DROP CONSTRAINT AUTEURS_FK1;
ALTER TABLE AUTEURS DROP CONSTRAINT AUTEURS_FK2;
ALTER TABLE AUTEURS_PARABD DROP CONSTRAINT AUTEURS_PARABD_FK1;
ALTER TABLE AUTEURS_PARABD DROP CONSTRAINT AUTEURS_PARABD_FK2;
ALTER TABLE AUTEURS_SERIES DROP CONSTRAINT AUTEURS_SERIES_FK1;
ALTER TABLE AUTEURS_SERIES DROP CONSTRAINT AUTEURS_SERIES_FK2;
ALTER TABLE COLLECTIONS DROP CONSTRAINT COLLECTIONS_FK1;
ALTER TABLE COTES DROP CONSTRAINT COTES_FK1;
ALTER TABLE COTES_PARABD DROP CONSTRAINT COTES_PARABD_FK1;
ALTER TABLE COUVERTURES DROP CONSTRAINT COUVERTURES_FK1;
ALTER TABLE EDITIONS DROP CONSTRAINT EDITIONS_FK1;
ALTER TABLE EDITIONS DROP CONSTRAINT EDITIONS_FK2;
ALTER TABLE GENRESERIES DROP CONSTRAINT GENRESERIES_FK1;
ALTER TABLE GENRESERIES DROP CONSTRAINT GENRESERIES_FK2;
ALTER TABLE PARABD DROP CONSTRAINT PARABD_FK1;
ALTER TABLE STATUT DROP CONSTRAINT STATUT_FK1;
ALTER TABLE STATUT DROP CONSTRAINT STATUT_FK2;

ALTER TABLE ALBUMS DROP CONSTRAINT ALBUMS_PK;
ALTER TABLE AUTEURS DROP CONSTRAINT AUTEURS_PK;
ALTER TABLE AUTEURS_PARABD DROP CONSTRAINT AUTEURS_PARABD_PK;
ALTER TABLE AUTEURS_SERIES DROP CONSTRAINT AUTEURS_SERIES_PK;
ALTER TABLE COLLECTIONS DROP CONSTRAINT COLLECTIONS_PK;
ALTER TABLE COTES DROP CONSTRAINT COTES_PK;
ALTER TABLE COTES_PARABD DROP CONSTRAINT COTES_PARABD_PK;
ALTER TABLE COUVERTURES DROP CONSTRAINT COUVERTURES_PK;
ALTER TABLE EDITEURS DROP CONSTRAINT EDITEURS_PK;
ALTER TABLE EDITIONS DROP CONSTRAINT EDITIONS_PK;
ALTER TABLE EMPRUNTEURS DROP CONSTRAINT EMPRUNTEURS_PK;
ALTER TABLE ENTRETIENT DROP CONSTRAINT ENTRETIENT_PK;
ALTER TABLE GENRES DROP CONSTRAINT GENRES_PK;
ALTER TABLE PARABD DROP CONSTRAINT PARABD_PK;
ALTER TABLE PERSONNES DROP CONSTRAINT PERSONNES_PK;
ALTER TABLE SERIES DROP CONSTRAINT SERIES_PK;
ALTER TABLE STATUT DROP CONSTRAINT STATUT_PK;

ALTER TABLE ALBUMS DROP CONSTRAINT ALBUMS_UNQID;
ALTER TABLE COLLECTIONS DROP CONSTRAINT COLLECTIONS_UNQID;
ALTER TABLE COUVERTURES DROP CONSTRAINT COUVERTURES_UNQID;
ALTER TABLE EDITEURS DROP CONSTRAINT EDITEURS_UNQID;
ALTER TABLE EDITIONS DROP CONSTRAINT EDITIONS_UNQID;
ALTER TABLE EMPRUNTEURS DROP CONSTRAINT EMPRUNTEURS_UNQID;
ALTER TABLE ENTRETIENT DROP CONSTRAINT ENTRETIENT_UNQID;
ALTER TABLE GENRES DROP CONSTRAINT GENRES_UNQID;
ALTER TABLE PARABD DROP CONSTRAINT PARABD_UNQID;
ALTER TABLE PERSONNES DROP CONSTRAINT PERSONNES_UNQID;
ALTER TABLE SERIES DROP CONSTRAINT SERIES_UNQID;
ALTER TABLE STATUT DROP CONSTRAINT STATUT_UNQID;

ALTER TABLE AUTEURS DROP CONSTRAINT AUTEURS_UNQID;
ALTER TABLE AUTEURS_PARABD DROP CONSTRAINT AUTEURS_PARABD_UNQID;
ALTER TABLE AUTEURS_SERIES DROP CONSTRAINT AUTEURS_SERIES_UNQID;
ALTER TABLE CONVERSIONS DROP CONSTRAINT CONVERSIONS_UNQID;
ALTER TABLE COTES DROP CONSTRAINT COTES_UNQ1;
ALTER TABLE COTES_PARABD DROP CONSTRAINT COTES_PARABD_UNQ1;
ALTER TABLE LISTES DROP CONSTRAINT LISTES_UNQID;
ALTER TABLE OPTIONS DROP CONSTRAINT OPTIONS_UNQID;

ALTER TRIGGER ALBUMS_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE ALBUMS ALTER ID_ALBUMS TO ID_ALBUM;
ALTER TRIGGER ALBUMS_UNIQID_BIU0
AS
begin
  if (new.ID_ALBUM is null) then new.ID_ALBUM = old.ID_ALBUM;
  if (new.ID_ALBUM is null) then new.ID_ALBUM = UDF_CREATEGUID();

  if (new.DC_ALBUMS is null) then new.DC_ALBUMS = old.DC_ALBUMS;

  new.DM_ALBUMS = cast(''now'' as timestamp);
  if (inserting or new.DC_ALBUMS is null) then new.DC_ALBUMS = new.DM_ALBUMS;
end;

ALTER TRIGGER AUTEURS_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE AUTEURS ALTER ID_AUTEURS TO ID_AUTEUR;
ALTER TRIGGER AUTEURS_UNIQID_BIU0
AS
begin
  if (new.ID_AUTEUR is null) then new.ID_AUTEUR = old.ID_AUTEUR;
  if (new.ID_AUTEUR is null) then new.ID_AUTEUR = UDF_CREATEGUID();

  if (new.DC_AUTEURS is null) then new.DC_AUTEURS = old.DC_AUTEURS;

  new.DM_AUTEURS = cast(''now'' as timestamp);
  if (inserting or new.DC_AUTEURS is null) then new.DC_AUTEURS = new.DM_AUTEURS;
end;

ALTER TRIGGER AUTEURS_PARABD_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE AUTEURS_PARABD ALTER ID_AUTEURS_PARABD TO ID_AUTEUR_PARABD;
ALTER TRIGGER AUTEURS_PARABD_UNIQID_BIU0
AS
begin
  if (new.ID_AUTEUR_PARABD is null) then new.ID_AUTEUR_PARABD = old.ID_AUTEUR_PARABD;
  if (new.ID_AUTEUR_PARABD is null) then new.ID_AUTEUR_PARABD = UDF_CREATEGUID();

  if (new.DC_AUTEURS_PARABD is null) then new.DC_AUTEURS_PARABD = old.DC_AUTEURS_PARABD;

  new.DM_AUTEURS_PARABD = cast(''now'' as timestamp);
  if (inserting or new.DC_AUTEURS_PARABD is null) then new.DC_AUTEURS_PARABD = new.DM_AUTEURS_PARABD;
end;

ALTER TRIGGER AUTEURS_SERIES_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE AUTEURS_SERIES ALTER ID_AUTEURS_SERIES TO ID_AUTEUR_SERIES;
ALTER TRIGGER AUTEURS_SERIES_UNIQID_BIU0
AS
begin
  if (new.ID_AUTEUR_SERIES is null) then new.ID_AUTEUR_SERIES = old.ID_AUTEUR_SERIES;
  if (new.ID_AUTEUR_SERIES is null) then new.ID_AUTEUR_SERIES = UDF_CREATEGUID();

  if (new.DC_AUTEURS_SERIES is null) then new.DC_AUTEURS_SERIES = old.DC_AUTEURS_SERIES;

  new.DM_AUTEURS_SERIES = cast(''now'' as timestamp);
  if (inserting or new.DC_AUTEURS_SERIES is null) then new.DC_AUTEURS_SERIES = new.DM_AUTEURS_SERIES;
end;

ALTER TRIGGER COLLECTIONS_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE COLLECTIONS ALTER ID_COLLECTIONS TO ID_COLLECTION;
ALTER TRIGGER COLLECTIONS_UNIQID_BIU0
AS
begin
  if (new.ID_COLLECTION is null) then new.ID_COLLECTION = old.ID_COLLECTION;
  if (new.ID_COLLECTION is null) then new.ID_COLLECTION = UDF_CREATEGUID();

  if (new.DC_COLLECTIONS is null) then new.DC_COLLECTIONS = old.DC_COLLECTIONS;

  new.DM_COLLECTIONS = cast(''now'' as timestamp);
  if (inserting or new.DC_COLLECTIONS is null) then new.DC_COLLECTIONS = new.DM_COLLECTIONS;
end;

ALTER TRIGGER CONVERSIONS_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE CONVERSIONS ALTER ID_CONVERSIONS TO ID_CONVERSION;
ALTER TRIGGER CONVERSIONS_UNIQID_BIU0
AS
begin
  if (new.ID_CONVERSION is null) then new.ID_CONVERSION = old.ID_CONVERSION;
  if (new.ID_CONVERSION is null) then new.ID_CONVERSION = UDF_CREATEGUID();

  if (new.DC_CONVERSIONS is null) then new.DC_CONVERSIONS = old.DC_CONVERSIONS;

  new.DM_CONVERSIONS = cast(''now'' as timestamp);
  if (inserting or new.DC_CONVERSIONS is null) then new.DC_CONVERSIONS = new.DM_CONVERSIONS;
end;

ALTER TRIGGER COTES_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE COTES ALTER ID_COTES TO ID_COTE;
ALTER TRIGGER COTES_UNIQID_BIU0
AS
begin
  if (new.ID_COTE is null) then new.ID_COTE = old.ID_COTE;
  if (new.ID_COTE is null) then new.ID_COTE = UDF_CREATEGUID();

  if (new.DC_COTES is null) then new.DC_COTES = old.DC_COTES;

  new.DM_COTES = cast(''now'' as timestamp);
  if (inserting or new.DC_COTES is null) then new.DC_COTES = new.DM_COTES;
end;

ALTER TRIGGER COTES_PARABD_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE COTES_PARABD ALTER ID_COTES_PARABD TO ID_COTE_PARABD;
ALTER TRIGGER COTES_PARABD_UNIQID_BIU0
AS
begin
  if (new.ID_COTE_PARABD is null) then new.ID_COTE_PARABD = old.ID_COTE_PARABD;
  if (new.ID_COTE_PARABD is null) then new.ID_COTE_PARABD = UDF_CREATEGUID();

  if (new.DC_COTES_PARABD is null) then new.DC_COTES_PARABD = old.DC_COTES_PARABD;

  new.DM_COTES_PARABD = cast(''now'' as timestamp);
  if (inserting or new.DC_COTES_PARABD is null) then new.DC_COTES_PARABD = new.DM_COTES_PARABD;
end;

ALTER TRIGGER COUVERTURES_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE COUVERTURES ALTER ID_COUVERTURES TO ID_COUVERTURE;
ALTER TRIGGER COUVERTURES_UNIQID_BIU0
AS
begin
  if (new.ID_COUVERTURE is null) then new.ID_COUVERTURE = old.ID_COUVERTURE;
  if (new.ID_COUVERTURE is null) then new.ID_COUVERTURE = UDF_CREATEGUID();

  if (new.DC_COUVERTURES is null) then new.DC_COUVERTURES = old.DC_COUVERTURES;

  new.DM_COUVERTURES = cast(''now'' as timestamp);
  if (inserting or new.DC_COUVERTURES is null) then new.DC_COUVERTURES = new.DM_COUVERTURES;
end;

ALTER TRIGGER EDITEURS_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE EDITEURS ALTER ID_EDITEURS TO ID_EDITEUR;
ALTER TRIGGER EDITEURS_UNIQID_BIU0
AS
begin
  if (new.ID_EDITEUR is null) then new.ID_EDITEUR = old.ID_EDITEUR;
  if (new.ID_EDITEUR is null) then new.ID_EDITEUR = UDF_CREATEGUID();

  if (new.DC_EDITEURS is null) then new.DC_EDITEURS = old.DC_EDITEURS;

  new.DM_EDITEURS = cast(''now'' as timestamp);
  if (inserting or new.DC_EDITEURS is null) then new.DC_EDITEURS = new.DM_EDITEURS;
end;

ALTER TRIGGER EDITIONS_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE EDITIONS ALTER ID_EDITIONS TO ID_EDITION;
ALTER TRIGGER EDITIONS_UNIQID_BIU0
AS
begin
  if (new.ID_EDITION is null) then new.ID_EDITION = old.ID_EDITION;
  if (new.ID_EDITION is null) then new.ID_EDITION = UDF_CREATEGUID();

  if (new.DC_EDITIONS is null) then new.DC_EDITIONS = old.DC_EDITIONS;

  new.DM_EDITIONS = cast(''now'' as timestamp);
  if (inserting or new.DC_EDITIONS is null) then new.DC_EDITIONS = new.DM_EDITIONS;
end;

ALTER TRIGGER EMPRUNTEURS_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE EMPRUNTEURS ALTER ID_EMPRUNTEURS TO ID_EMPRUNTEUR;
ALTER TRIGGER EMPRUNTEURS_UNIQID_BIU0
AS
begin
  if (new.ID_EMPRUNTEUR is null) then new.ID_EMPRUNTEUR = old.ID_EMPRUNTEUR;
  if (new.ID_EMPRUNTEUR is null) then new.ID_EMPRUNTEUR = UDF_CREATEGUID();

  if (new.DC_EMPRUNTEURS is null) then new.DC_EMPRUNTEURS = old.DC_EMPRUNTEURS;

  new.DM_EMPRUNTEURS = cast(''now'' as timestamp);
  if (inserting or new.DC_EMPRUNTEURS is null) then new.DC_EMPRUNTEURS = new.DM_EMPRUNTEURS;
end;

ALTER TRIGGER GENRES_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE GENRES ALTER ID_GENRES TO ID_GENRE;
ALTER TRIGGER GENRES_UNIQID_BIU0
AS
begin
  if (new.ID_GENRE is null) then new.ID_GENRE = old.ID_GENRE;
  if (new.ID_GENRE is null) then new.ID_GENRE = UDF_CREATEGUID();

  if (new.DC_GENRES is null) then new.DC_GENRES = old.DC_GENRES;

  new.DM_GENRES = cast(''now'' as timestamp);
  if (inserting or new.DC_GENRES is null) then new.DC_GENRES = new.DM_GENRES;
end;

ALTER TRIGGER LISTES_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE LISTES ALTER ID_LISTES TO ID_LISTE;
ALTER TRIGGER LISTES_UNIQID_BIU0
AS
begin
  if (new.ID_LISTE is null) then new.ID_LISTE = old.ID_LISTE;
  if (new.ID_LISTE is null) then new.ID_LISTE = UDF_CREATEGUID();

  if (new.DC_LISTES is null) then new.DC_LISTES = old.DC_LISTES;

  new.DM_LISTES = cast(''now'' as timestamp);
  if (inserting or new.DC_LISTES is null) then new.DC_LISTES = new.DM_LISTES;
end;

ALTER TRIGGER OPTIONS_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE OPTIONS ALTER ID_OPTIONS TO ID_OPTION;
ALTER TRIGGER OPTIONS_UNIQID_BIU0
AS
begin
  if (new.ID_OPTION is null) then new.ID_OPTION = old.ID_OPTION;
  if (new.ID_OPTION is null) then new.ID_OPTION = UDF_CREATEGUID();

  if (new.DC_OPTIONS is null) then new.DC_OPTIONS = old.DC_OPTIONS;

  new.DM_OPTIONS = cast(''now'' as timestamp);
  if (inserting or new.DC_OPTIONS is null) then new.DC_OPTIONS = new.DM_OPTIONS;
end;

ALTER TRIGGER PERSONNES_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE PERSONNES ALTER ID_PERSONNES TO ID_PERSONNE;
ALTER TRIGGER PERSONNES_UNIQID_BIU0
AS
begin
  if (new.ID_PERSONNE is null) then new.ID_PERSONNE = old.ID_PERSONNE;
  if (new.ID_PERSONNE is null) then new.ID_PERSONNE = UDF_CREATEGUID();

  if (new.DC_PERSONNES is null) then new.DC_PERSONNES = old.DC_PERSONNES;

  new.DM_PERSONNES = cast(''now'' as timestamp);
  if (inserting or new.DC_PERSONNES is null) then new.DC_PERSONNES = new.DM_PERSONNES;
end;

ALTER TRIGGER SERIES_UNIQID_BIU0
AS
begin
  --
end;
ALTER TABLE SERIES ALTER ID_SERIES TO ID_SERIE;
ALTER TRIGGER SERIES_UNIQID_BIU0
AS
begin
  if (new.ID_SERIE is null) then new.ID_SERIE = old.ID_SERIE;
  if (new.ID_SERIE is null) then new.ID_SERIE = UDF_CREATEGUID();

  if (new.DC_SERIES is null) then new.DC_SERIES = old.DC_SERIES;

  new.DM_SERIES = cast(''now'' as timestamp);
  if (inserting or new.DC_SERIES is null) then new.DC_SERIES = new.DM_SERIES;
end;

ALTER TABLE AUTEURS ADD CONSTRAINT AUTEURS_UNQID UNIQUE (ID_AUTEUR);
ALTER TABLE AUTEURS_PARABD ADD CONSTRAINT AUTEURS_PARABD_UNQID UNIQUE (ID_AUTEUR_PARABD);
ALTER TABLE AUTEURS_SERIES ADD CONSTRAINT AUTEURS_SERIES_UNQID UNIQUE (ID_AUTEUR_SERIES);
ALTER TABLE CONVERSIONS ADD CONSTRAINT CONVERSIONS_UNQID UNIQUE (ID_CONVERSION);
ALTER TABLE COTES ADD CONSTRAINT COTES_UNQID UNIQUE (ID_COTE);
ALTER TABLE COTES_PARABD ADD CONSTRAINT COTES_PARABD_UNQID UNIQUE (ID_COTE_PARABD);
ALTER TABLE LISTES ADD CONSTRAINT LISTES_UNQID UNIQUE (ID_LISTE);
ALTER TABLE OPTIONS ADD CONSTRAINT OPTIONS_UNQID UNIQUE (ID_OPTION);

ALTER TABLE ALBUMS ADD CONSTRAINT ALBUMS_PK PRIMARY KEY (ID_ALBUM) USING INDEX ALBUMS_PK;
ALTER TABLE AUTEURS ADD CONSTRAINT AUTEURS_PK PRIMARY KEY (ID_ALBUM, ID_PERSONNE, METIER) USING INDEX AUTEURS_PK;
ALTER TABLE AUTEURS_PARABD ADD CONSTRAINT AUTEURS_PARABD_PK PRIMARY KEY (ID_PARABD, ID_PERSONNE) USING INDEX AUTEURS_PARABD_PK;
ALTER TABLE AUTEURS_SERIES ADD CONSTRAINT AUTEURS_SERIES_PK PRIMARY KEY (ID_SERIE, ID_PERSONNE, METIER) USING INDEX AUTEURS_SERIES_PK;
ALTER TABLE COLLECTIONS ADD CONSTRAINT COLLECTIONS_PK PRIMARY KEY (ID_COLLECTION) USING INDEX COLLECTIONS_PK;
ALTER TABLE COTES ADD CONSTRAINT COTES_PK PRIMARY KEY (ANNEECOTE, ID_EDITION) USING INDEX COTES_PK;
ALTER TABLE COTES_PARABD ADD CONSTRAINT COTES_PARABD_PK PRIMARY KEY (ANNEECOTE, ID_PARABD) USING INDEX COTES_PARABD_PK;
ALTER TABLE COUVERTURES ADD CONSTRAINT COUVERTURES_PK PRIMARY KEY (ID_COUVERTURE) USING INDEX COUVERTURES_PK;
ALTER TABLE EDITEURS ADD CONSTRAINT EDITEURS_PK PRIMARY KEY (ID_EDITEUR) USING INDEX EDITEURS_PK;
ALTER TABLE EDITIONS ADD CONSTRAINT EDITIONS_PK PRIMARY KEY (ID_EDITION) USING INDEX EDITIONS_PK;
ALTER TABLE EMPRUNTEURS ADD CONSTRAINT EMPRUNTEURS_PK PRIMARY KEY (ID_EMPRUNTEUR) USING INDEX EMPRUNTEURS_PK;
ALTER TABLE ENTRETIENT ADD CONSTRAINT ENTRETIENT_PK PRIMARY KEY (ID_ENTRETIENT) USING INDEX ENTRETIENT_PK;
ALTER TABLE GENRES ADD CONSTRAINT GENRES_PK PRIMARY KEY (ID_GENRE) USING INDEX GENRES_PK;
ALTER TABLE GENRESERIES ADD CONSTRAINT GENRESERIES_PK PRIMARY KEY (ID_SERIE, ID_GENRE) USING INDEX GENRESERIES_PK;
ALTER TABLE PARABD ADD CONSTRAINT PARABD_PK PRIMARY KEY (ID_PARABD) USING INDEX PARABD_PK;
ALTER TABLE PERSONNES ADD CONSTRAINT PERSONNES_PK PRIMARY KEY (ID_PERSONNE) USING INDEX PERSONNES_PK;
ALTER TABLE SERIES ADD CONSTRAINT SERIES_PK PRIMARY KEY (ID_SERIE) USING INDEX SERIES_PK;
ALTER TABLE STATUT ADD CONSTRAINT STATUT_PK PRIMARY KEY (ID_STATUT) USING INDEX STATUT_PK;

ALTER TABLE ALBUMS ADD CONSTRAINT ALBUMS_FK1 FOREIGN KEY (ID_SERIE) REFERENCES SERIES (ID_SERIE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE AUTEURS ADD CONSTRAINT AUTEURS_FK1 FOREIGN KEY (ID_ALBUM) REFERENCES ALBUMS (ID_ALBUM) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE AUTEURS ADD CONSTRAINT AUTEURS_FK2 FOREIGN KEY (ID_PERSONNE) REFERENCES PERSONNES (ID_PERSONNE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE AUTEURS_PARABD ADD CONSTRAINT AUTEURS_PARABD_FK1 FOREIGN KEY (ID_PARABD) REFERENCES PARABD (ID_PARABD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE AUTEURS_PARABD ADD CONSTRAINT AUTEURS_PARABD_FK2 FOREIGN KEY (ID_PERSONNE) REFERENCES PERSONNES (ID_PERSONNE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE AUTEURS_SERIES ADD CONSTRAINT AUTEURS_SERIES_FK1 FOREIGN KEY (ID_SERIE) REFERENCES SERIES (ID_SERIE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE AUTEURS_SERIES ADD CONSTRAINT AUTEURS_SERIES_FK2 FOREIGN KEY (ID_PERSONNE) REFERENCES PERSONNES (ID_PERSONNE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COLLECTIONS ADD CONSTRAINT COLLECTIONS_FK1 FOREIGN KEY (ID_EDITEUR) REFERENCES EDITEURS (ID_EDITEUR) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COTES ADD CONSTRAINT COTES_FK1 FOREIGN KEY (ID_EDITION) REFERENCES EDITIONS (ID_EDITION) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COTES_PARABD ADD CONSTRAINT COTES_PARABD_FK1 FOREIGN KEY (ID_PARABD) REFERENCES PARABD (ID_PARABD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COUVERTURES ADD CONSTRAINT COUVERTURES_FK1 FOREIGN KEY (ID_ALBUM) REFERENCES ALBUMS (ID_ALBUM) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE EDITIONS ADD CONSTRAINT EDITIONS_FK1 FOREIGN KEY (ID_EDITEUR) REFERENCES EDITEURS (ID_EDITEUR) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE EDITIONS ADD CONSTRAINT EDITIONS_FK2 FOREIGN KEY (ID_ALBUM) REFERENCES ALBUMS (ID_ALBUM) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE GENRESERIES ADD CONSTRAINT GENRESERIES_FK1 FOREIGN KEY (ID_GENRE) REFERENCES GENRES (ID_GENRE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE GENRESERIES ADD CONSTRAINT GENRESERIES_FK2 FOREIGN KEY (ID_SERIE) REFERENCES SERIES (ID_SERIE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARABD ADD CONSTRAINT PARABD_FK1 FOREIGN KEY (ID_SERIE) REFERENCES SERIES (ID_SERIE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE STATUT ADD CONSTRAINT STATUT_FK1 FOREIGN KEY (ID_EDITION) REFERENCES EDITIONS (ID_EDITION) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE STATUT ADD CONSTRAINT STATUT_FK2 FOREIGN KEY (ID_EMPRUNTEUR) REFERENCES EMPRUNTEURS (ID_EMPRUNTEUR) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TRIGGER ALBUMS_AI ACTIVE;
ALTER TRIGGER ALBUMS_DV ACTIVE;
ALTER TRIGGER ALBUMS_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER AUTEURS_PARABD_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER AUTEURS_SERIES_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER AUTEURS_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER COLLECTIONS_AI ACTIVE;
ALTER TRIGGER COLLECTIONS_DV ACTIVE;
ALTER TRIGGER COLLECTIONS_EDITIONS_REF ACTIVE;
ALTER TRIGGER COLLECTIONS_SERIE_REF ACTIVE;
ALTER TRIGGER COLLECTIONS_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER CONVERSIONS_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER COTES_PARABD_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER COTES_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER COUVERTURES_AI ACTIVE;
ALTER TRIGGER COUVERTURES_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER CRITEREBOOLEAN_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER CRITEREIMAGE_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER CRITERELANGUETITRE_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER CRITERELISTE_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER CRITERENUMERAL_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER CRITERESTRING_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER CRITERETITRE_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER EDITEURS_AI ACTIVE;
ALTER TRIGGER EDITEURS_DV ACTIVE;
ALTER TRIGGER EDITEURS_SERIE_REF ACTIVE;
ALTER TRIGGER EDITEURS_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER EDITIONS_AD0 ACTIVE;
ALTER TRIGGER EDITIONS_AI ACTIVE;
ALTER TRIGGER EDITIONS_AI0 ACTIVE;
ALTER TRIGGER EDITIONS_AU0 ACTIVE;
ALTER TRIGGER EDITIONS_BU0 ACTIVE;
ALTER TRIGGER EDITIONS_COTE_BIU1 ACTIVE;
ALTER TRIGGER EDITIONS_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER EMPRUNTEURS_AI ACTIVE;
ALTER TRIGGER EMPRUNTEURS_DV ACTIVE;
ALTER TRIGGER EMPRUNTEURS_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER ENTRETIENT_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER GENRESERIES_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER GENRES_AI ACTIVE;
ALTER TRIGGER GENRES_DV ACTIVE;
ALTER TRIGGER GENRES_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER LISTES_AUD0 ACTIVE;
ALTER TRIGGER LISTES_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER OPTIONS_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER PARABD_AI ACTIVE;
ALTER TRIGGER PARABD_COTE_BIU1 ACTIVE;
ALTER TRIGGER PARABD_DV ACTIVE;
ALTER TRIGGER PARABD_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER PERSONNES_AI ACTIVE;
ALTER TRIGGER PERSONNES_DV ACTIVE;
ALTER TRIGGER PERSONNES_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER SERIES_AI ACTIVE;
ALTER TRIGGER SERIES_DV ACTIVE;
ALTER TRIGGER SERIES_UNIQID_BIU0 ACTIVE;
ALTER TRIGGER STATUT_AI ACTIVE;
ALTER TRIGGER STATUT_UNIQID_BIU0 ACTIVE;

