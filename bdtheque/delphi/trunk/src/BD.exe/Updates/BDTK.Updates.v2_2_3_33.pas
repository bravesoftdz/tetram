unit BDTK.Updates.v2_2_3_33;

interface

implementation

uses
  System.SysUtils, UIB, UIBLib, BDTK.Updates;

procedure MAJ2_2_3_33(Query: TUIBScript);
begin
  Query.Script.Add('create or alter procedure albums_by_collection (');
  Query.Script.Add('  id_collection type of column collections.id_collection,');
  Query.Script.Add('  filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('  id_album type of column albums.id_album,');
  Query.Script.Add('  titrealbum type of column albums.titrealbum,');
  Query.Script.Add('  tome type of column albums.tome,');
  Query.Script.Add('  tomedebut type of column albums.tomedebut,');
  Query.Script.Add('  tomefin type of column albums.tomefin,');
  Query.Script.Add('  horsserie type of column albums.horsserie,');
  Query.Script.Add('  integrale type of column albums.integrale,');
  Query.Script.Add('  moisparution type of column albums.moisparution,');
  Query.Script.Add('  anneeparution type of column albums.anneeparution,');
  Query.Script.Add('  notation type of column albums.notation,');
  Query.Script.Add('  id_serie type of column series.id_serie,');
  Query.Script.Add('  titreserie type of column series.titreserie,');
  Query.Script.Add('  achat type of column albums.achat,');
  Query.Script.Add('  complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(200);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:id_collection = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''id_collection is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''id_collection = '''''' || :id_collection || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_album, titrealbum, tome, tomedebut, tomefin, horsserie,');
  Query.Script.Add('      integrale, moisparution, anneeparution, notation, id_serie,');
  Query.Script.Add('      titreserie, achat, complet');
  Query.Script.Add('    from');
  Query.Script.Add('      VW_LISTE_COLLECTIONS_ALBUMS');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      coalesce(titrealbum, titreserie), titreserie,');
  Query.Script.Add('      horsserie nulls first, integrale nulls first, tome nulls first,');
  Query.Script.Add('      tomedebut nulls first, tomefin nulls first,');
  Query.Script.Add('      anneeparution nulls first, moisparution nulls first''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter procedure albums_by_editeur (');
  Query.Script.Add('  id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('  filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('  id_album type of column albums.id_album,');
  Query.Script.Add('  titrealbum type of column albums.titrealbum,');
  Query.Script.Add('  tome type of column albums.tome,');
  Query.Script.Add('  tomedebut type of column albums.tomedebut,');
  Query.Script.Add('  tomefin type of column albums.tomefin,');
  Query.Script.Add('  horsserie type of column albums.horsserie,');
  Query.Script.Add('  integrale type of column albums.integrale,');
  Query.Script.Add('  moisparution type of column albums.moisparution,');
  Query.Script.Add('  anneeparution type of column albums.anneeparution,');
  Query.Script.Add('  notation type of column albums.notation,');
  Query.Script.Add('  id_serie type of column series.id_serie,');
  Query.Script.Add('  titreserie type of column series.titreserie,');
  Query.Script.Add('  achat type of column albums.achat,');
  Query.Script.Add('  complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:id_editeur = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''id_editeur is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''id_editeur = '''''' || :id_editeur || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_album, titrealbum, tome, tomedebut, tomefin, horsserie,');
  Query.Script.Add('      integrale, moisparution, anneeparution, notation, id_serie,');
  Query.Script.Add('      titreserie, achat, complet');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_editeurs_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      coalesce(titrealbum, titreserie), titreserie,');
  Query.Script.Add('      horsserie nulls first, integrale nulls first, tome nulls first,');
  Query.Script.Add('      tomedebut nulls first, tomefin nulls first,');
  Query.Script.Add('      anneeparution nulls first, moisparution nulls first''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter procedure previsions_sorties (');
  Query.Script.Add('  withachat t_yesno,');
  Query.Script.Add('  in_id_serie type of column series.id_serie)');
  Query.Script.Add('returns (');
  Query.Script.Add('  id_serie type of column series.id_serie,');
  Query.Script.Add('  titreserie type of column series.titreserie,');
  Query.Script.Add('  terminee type of column series.terminee,');
  Query.Script.Add('  tome type of column albums.tome,');
  Query.Script.Add('  anneeparution type of column albums.anneeparution,');
  Query.Script.Add('  moisparution type of column albums.moisparution,');
  Query.Script.Add('  id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('  nomediteur type of column editeurs.nomediteur,');
  Query.Script.Add('  id_collection type of column collections.id_collection,');
  Query.Script.Add('  nomcollection type of column collections.nomcollection)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable currentidserie type of column series.id_serie;');
  Query.Script.Add('declare variable oldidserie type of column series.id_serie;');
  Query.Script.Add('declare variable currenttome type of column albums.tome;');
  Query.Script.Add('declare variable sommeponderee integer;');
  Query.Script.Add('declare variable comptealbum integer;');
  Query.Script.Add('declare variable currentannee type of column albums.anneeparution;');
  Query.Script.Add('declare variable currentmois type of column albums.moisparution;');
  Query.Script.Add('declare variable tomeprecedent type of column albums.tome;');
  Query.Script.Add('declare variable anneeprecedente type of column albums.anneeparution;');
  Query.Script.Add('declare variable moisprecedent type of column albums.moisparution;');
  Query.Script.Add('declare variable diffmois integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (withachat is null) then withachat = 1;');
  Query.Script.Add('  oldidserie = null;');
  Query.Script.Add('  tomeprecedent = -1;');
  Query.Script.Add('  anneeprecedente = -1;');
  Query.Script.Add('  moisprecedent = null;');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      tome, anneeparution, moisparution, s.id_serie');
  Query.Script.Add('    from');
  Query.Script.Add('      albums a');
  Query.Script.Add('      /* pas de left join: on calcul les prévisions de sorties des nouveautés des séries */');
  Query.Script.Add('      inner join series s on');
  Query.Script.Add('        s.id_serie = a.id_serie');
  Query.Script.Add('    where');
  Query.Script.Add('      s.suivresorties = 1');
  Query.Script.Add('      and a.horsserie = 0 and a.integrale = 0 and a.anneeparution is not null');
  Query.Script.Add('      and (:in_id_serie is null or s.id_serie = :in_id_serie)');
  Query.Script.Add('      and (:withachat = 1 or achat = 0)');
  Query.Script.Add('    order by');
  Query.Script.Add('      s.id_serie, tome');
  Query.Script.Add('    into');
  Query.Script.Add('      :currenttome, :currentannee, :currentmois, :currentidserie');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (oldidserie is null or currentidserie <> oldidserie) then');
  Query.Script.Add('    begin');
  Query.Script.Add('');
  Query.Script.Add('      if (oldidserie is not null and comptealbum > 0) then');
  Query.Script.Add('      begin');
  Query.Script.Add('        select');
  Query.Script.Add('          sorties.id_serie, sorties.titreserie, sorties.tome, sorties.anneeparution, sorties.moisparution,');
  Query.Script.Add('          sorties.id_editeur, sorties.nomediteur, sorties.id_collection, sorties.nomcollection,');
  Query.Script.Add('          s.terminee');
  Query.Script.Add('        from');
  Query.Script.Add('          calcul_annee_sortie(');
  Query.Script.Add('            :withachat, :oldidserie, :sommeponderee, :comptealbum,');
  Query.Script.Add('            :tomeprecedent, :anneeprecedente, :moisprecedent');
  Query.Script.Add('          ) sorties');
  Query.Script.Add('          inner join series s on');
  Query.Script.Add('            s.id_serie = sorties.id_serie');
  Query.Script.Add('        into');
  Query.Script.Add('          :id_serie, :titreserie, :tome, :anneeparution, :moisparution,');
  Query.Script.Add('          :id_editeur, :nomediteur, :id_collection, :nomcollection,');
  Query.Script.Add('          :terminee;');
  Query.Script.Add('');
  Query.Script.Add('        suspend;');
  Query.Script.Add('      end');
  Query.Script.Add('');
  Query.Script.Add('      oldidserie = currentidserie;');
  Query.Script.Add('      sommeponderee = 0;');
  Query.Script.Add('      comptealbum = 0;');
  Query.Script.Add('      tomeprecedent = -1;');
  Query.Script.Add('      anneeprecedente = -1;');
  Query.Script.Add('      moisprecedent = -1;');
  Query.Script.Add('    end');
  Query.Script.Add('    if (tomeprecedent <> -1 and currenttome - tomeprecedent <> 0) then');
  Query.Script.Add('    begin');
  Query.Script.Add('      if (currentmois is null or moisprecedent is null) then');
  Query.Script.Add('        diffmois = 0;');
  Query.Script.Add('      else');
  Query.Script.Add('        diffmois = currentmois - moisprecedent;');
  Query.Script.Add('      /* non pondéré: sommeponderee = sommeponderee + (((currentannee - anneeprecedente) * 12 + (coalesce(currentmois, 1) - coalesce(moisprecedent, 1))) / (currenttome - tomeprecedent)); */');
  Query.Script.Add('      sommeponderee = sommeponderee + (((currentannee - anneeprecedente) * 12 + diffmois) / (currenttome - tomeprecedent)) * currenttome;');
  Query.Script.Add('      /* non pondéré: comptealbum = comptealbum + 1;*/');
  Query.Script.Add('      comptealbum = comptealbum + currenttome;');
  Query.Script.Add('    end');
  Query.Script.Add('    tomeprecedent = currenttome;');
  Query.Script.Add('    anneeprecedente = currentannee;');
  Query.Script.Add('    moisprecedent = currentmois;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (oldidserie is not null and comptealbum > 0) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    select');
  Query.Script.Add('      sorties.id_serie, sorties.titreserie, sorties.tome, sorties.anneeparution, sorties.moisparution,');
  Query.Script.Add('      sorties.id_editeur, sorties.nomediteur, sorties.id_collection, sorties.nomcollection,');
  Query.Script.Add('      s.terminee');
  Query.Script.Add('    from');
  Query.Script.Add('      calcul_annee_sortie(');
  Query.Script.Add('        :withachat, :oldidserie, :sommeponderee, :comptealbum, :tomeprecedent,');
  Query.Script.Add('        :anneeprecedente, :moisprecedent');
  Query.Script.Add('      ) sorties');
  Query.Script.Add('      inner join series s on');
  Query.Script.Add('        s.id_serie = sorties.id_serie');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_serie, :titreserie, :tome, :anneeparution, :moisparution,');
  Query.Script.Add('      :id_editeur, :nomediteur, :id_collection, :nomcollection,');
  Query.Script.Add('      :terminee;');
  Query.Script.Add('');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.ExecuteScript;
end;

initialization

RegisterFBUpdate('2.2.3.33', @MAJ2_2_3_33);

end.
