unit BDTK.Updates.v1_2_0_8;

interface

implementation

uses
  UIB, BDTK.Updates;

procedure PrepareDatabase(Query: TUIBScript);
begin
  Query.Script.Clear;

  Query.Script.Add('ALTER TABLE ALBUMS DROP CONSTRAINT ALBUMS_FK1;');
  Query.Script.Add('ALTER TABLE PARABD DROP CONSTRAINT PARABD_FK1;');
  Query.Script.Add('CREATE EXCEPTION IDSERIE_UNKNOWN ''ID_SERIE inconnu'';');

  Query.Script.Add('alter table ALBUMS add NEWID_SERIE T_GUID;');
  Query.Script.Add('alter table ALBUMS alter NEWID_SERIE position 6;');
  Query.Script.Add('update albums set newid_serie = id_serie;');
  Query.Script.Add('alter table PARABD add NEWID_SERIE T_GUID;');
  Query.Script.Add('alter table PARABD alter NEWID_SERIE position 3;');
  Query.Script.Add('update PARABD set newid_serie = id_serie;');

  Query.Script.Add('DROP VIEW VW_LISTE_GENRES_ALBUMS;');
  Query.Script.Add('DROP VIEW VW_LISTE_EDITEURS_ALBUMS;');
  Query.Script.Add('DROP VIEW VW_LISTE_COLLECTIONS_ALBUMS;');
  Query.Script.Add('DROP VIEW VW_EMPRUNTS;');
  Query.Script.Add('DROP VIEW VW_LISTE_ALBUMS;');
  Query.Script.Add('DROP VIEW VW_PRIXUNITAIRES;');
  Query.Script.Add('DROP VIEW VW_PRIXALBUMS;');
  Query.Script.Add('DROP VIEW VW_LISTE_PARABD;');

  Query.Script.Add('ALTER PROCEDURE CALCUL_ANNEE_SORTIE (');
  Query.Script.Add('    WITHACHAT SMALLINT,');
  Query.Script.Add('    IN_IDSERIE CHAR(38),');
  Query.Script.Add('    SOMMEPONDEREE INTEGER,');
  Query.Script.Add('    COMPTEALBUM INTEGER,');
  Query.Script.Add('    MAXTOME INTEGER,');
  Query.Script.Add('    MAXANNEE INTEGER,');
  Query.Script.Add('    MAXMOIS INTEGER)');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    UPPERTITRESERIE VARCHAR(150),');
  Query.Script.Add('    TOME INTEGER,');
  Query.Script.Add('    ANNEEPARUTION INTEGER,');
  Query.Script.Add('    MOISPARUTION INTEGER,');
  Query.Script.Add('    ID_EDITEUR CHAR(38),');
  Query.Script.Add('    NOMEDITEUR VARCHAR(50),');
  Query.Script.Add('    ID_COLLECTION CHAR(38),');
  Query.Script.Add('    NOMCOLLECTION VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE MAXTOME2 INTEGER;');
  Query.Script.Add('begin');
  Query.Script.Add('  --');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE LISTE_TOMES (');
  Query.Script.Add('    WITHINTEGRALE SMALLINT,');
  Query.Script.Add('    IN_IDSERIE CHAR(38))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TOME SMALLINT,');
  Query.Script.Add('    INTEGRALE SMALLINT,');
  Query.Script.Add('    ACHAT SMALLINT)');
  Query.Script.Add('AS');
  Query.Script.Add('begin');
  Query.Script.Add('  --');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE PREVISIONS_SORTIES (');
  Query.Script.Add('    WITHACHAT SMALLINT,');
  Query.Script.Add('    IN_ID_SERIE CHAR(38))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    UPPERTITRESERIE VARCHAR(150),');
  Query.Script.Add('    TOME INTEGER,');
  Query.Script.Add('    ANNEEPARUTION INTEGER,');
  Query.Script.Add('    MOISPARUTION INTEGER,');
  Query.Script.Add('    ID_EDITEUR CHAR(38),');
  Query.Script.Add('    NOMEDITEUR VARCHAR(50),');
  Query.Script.Add('    ID_COLLECTION CHAR(38),');
  Query.Script.Add('    NOMCOLLECTION VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('begin');
  Query.Script.Add('  --');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE PROC_EMPRUNTS');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_EDITION CHAR(38),');
  Query.Script.Add('    ID_ALBUM CHAR(38),');
  Query.Script.Add('    TITREALBUM VARCHAR(150),');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    PRETE SMALLINT,');
  Query.Script.Add('    ID_EMPRUNTEUR CHAR(38),');
  Query.Script.Add('    NOMEMPRUNTEUR VARCHAR(150),');
  Query.Script.Add('    PRETEMPRUNT SMALLINT,');
  Query.Script.Add('    DATEEMPRUNT TIMESTAMP)');
  Query.Script.Add('AS');
  Query.Script.Add('BEGIN');
  Query.Script.Add('  --');
  Query.Script.Add('END;');

  Query.ExecuteScript;
end;

procedure ResetDatabase(Query: TUIBScript);
begin
  Query.Script.Clear;

  Query.Script.Add('CREATE TRIGGER ALBUMS_IDSERIE_BIU FOR ALBUMS');
  Query.Script.Add('ACTIVE BEFORE INSERT OR UPDATE POSITION 0');
  Query.Script.Add('AS');
  Query.Script.Add('declare variable serieexists integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.id_serie is not null) then begin');
  Query.Script.Add('    select count(*) from SERIES where ID_serie = new.id_serie into :serieexists;');
  Query.Script.Add('    if ((serieexists is null) or (serieexists = 0)) then');
  Query.Script.Add('      exception idserie_unknown;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('CREATE TRIGGER SERIES_AU0 FOR SERIES');
  Query.Script.Add('ACTIVE AFTER UPDATE POSITION 0');
  Query.Script.Add('AS');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.id_serie <> old.id_serie) then begin');
  Query.Script.Add('    update albums set id_serie = new.id_serie where id_serie = old.id_serie;');
  Query.Script.Add('    update parabd set id_serie = new.id_serie where id_serie = old.id_serie;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('CREATE TRIGGER SERIES_AD0 FOR SERIES');
  Query.Script.Add('ACTIVE AFTER DELETE POSITION 0');
  Query.Script.Add('AS');
  Query.Script.Add('begin');
  Query.Script.Add('  delete from albums where id_serie = old.id_serie;');
  Query.Script.Add('  delete from parabd where id_serie = old.id_serie;');
  Query.Script.Add('end;');

  Query.Script.Add('CREATE VIEW VW_LISTE_ALBUMS(');
  Query.Script.Add('    ID_ALBUM,');
  Query.Script.Add('    TITREALBUM,');
  Query.Script.Add('    TOME,');
  Query.Script.Add('    TOMEDEBUT,');
  Query.Script.Add('    TOMEFIN,');
  Query.Script.Add('    HORSSERIE,');
  Query.Script.Add('    INTEGRALE,');
  Query.Script.Add('    MOISPARUTION,');
  Query.Script.Add('    ANNEEPARUTION,');
  Query.Script.Add('    ID_SERIE,');
  Query.Script.Add('    TITRESERIE,');
  Query.Script.Add('    UPPERTITREALBUM,');
  Query.Script.Add('    UPPERTITRESERIE,');
  Query.Script.Add('    ACHAT,');
  Query.Script.Add('    COMPLET)');
  Query.Script.Add('AS');
  Query.Script.Add('select a.ID_ALBUM,');
  Query.Script.Add('       a.TITREALBUM,');
  Query.Script.Add('       a.TOME,');
  Query.Script.Add('       a.TOMEDEBUT,');
  Query.Script.Add('       a.TOMEFIN,');
  Query.Script.Add('       a.HORSSERIE,');
  Query.Script.Add('       a.INTEGRALE,');
  Query.Script.Add('       a.MOISPARUTION,');
  Query.Script.Add('       a.ANNEEPARUTION,');
  Query.Script.Add('       a.ID_SERIE,');
  Query.Script.Add('       s.TITRESERIE,');
  Query.Script.Add('       a.UPPERTITREALBUM,');
  Query.Script.Add('       s.UPPERTITRESERIE,');
  Query.Script.Add('       a.ACHAT,');
  Query.Script.Add('       a.COMPLET');
  Query.Script.Add('FROM ALBUMS a LEFT JOIN SERIES s ON s.ID_SERIE = a.id_serie;');

  Query.Script.Add('CREATE VIEW VW_EMPRUNTS(');
  Query.Script.Add('    ID_STATUT,');
  Query.Script.Add('    ID_EDITION,');
  Query.Script.Add('    ID_ALBUM,');
  Query.Script.Add('    TITREALBUM,');
  Query.Script.Add('    UPPERTITREALBUM,');
  Query.Script.Add('    ID_SERIE,');
  Query.Script.Add('    TOME,');
  Query.Script.Add('    INTEGRALE,');
  Query.Script.Add('    TOMEDEBUT,');
  Query.Script.Add('    TOMEFIN,');
  Query.Script.Add('    HORSSERIE,');
  Query.Script.Add('    TITRESERIE,');
  Query.Script.Add('    ID_EDITEUR,');
  Query.Script.Add('    NOMEDITEUR,');
  Query.Script.Add('    ID_COLLECTION,');
  Query.Script.Add('    NOMCOLLECTION,');
  Query.Script.Add('    PRETE,');
  Query.Script.Add('    ANNEEEDITION,');
  Query.Script.Add('    ISBN,');
  Query.Script.Add('    ID_EMPRUNTEUR,');
  Query.Script.Add('    NOMEMPRUNTEUR,');
  Query.Script.Add('    PRETEMPRUNT,');
  Query.Script.Add('    DATEEMPRUNT)');
  Query.Script.Add('AS');
  Query.Script.Add('SELECT S.id_statut,');
  Query.Script.Add('       Ed.ID_EDITION,');
  Query.Script.Add('       A.ID_ALBUM,');
  Query.Script.Add('       A.titrealbum,');
  Query.Script.Add('       A.uppertitrealbum,');
  Query.Script.Add('       A.id_serie,');
  Query.Script.Add('       A.Tome,');
  Query.Script.Add('       A.Integrale,');
  Query.Script.Add('       A.TomeDebut,');
  Query.Script.Add('       A.TomeFin,');
  Query.Script.Add('       A.HorsSerie,');
  Query.Script.Add('       A.titreserie,');
  Query.Script.Add('       E.ID_EDITEUR,');
  Query.Script.Add('       E.NomEditeur,');
  Query.Script.Add('       C.ID_COLLECTION,');
  Query.Script.Add('       C.NomCollection,');
  Query.Script.Add('       Ed.prete,');
  Query.Script.Add('       Ed.AnneeEdition,');
  Query.Script.Add('       Ed.ISBN,');
  Query.Script.Add('       Em.ID_EMPRUNTEUR,');
  Query.Script.Add('       Em.NomEmprunteur,');
  Query.Script.Add('       S.PretEmprunt,');
  Query.Script.Add('       S.DateEmprunt');
  Query.Script.Add('FROM VW_LISTE_ALBUMS A');
  Query.Script.Add('  INNER JOIN EDITIONS Ed ON A.ID_ALBUM = Ed.id_album');
  Query.Script.Add('  INNER JOIN EDITEURS e ON e.ID_EDITEUR = ed.id_editeur');
  Query.Script.Add('  LEFT JOIN COLLECTIONS C ON C.ID_COLLECTION = ed.id_collection');
  Query.Script.Add('  INNER JOIN STATUT S ON Ed.ID_EDITION = S.id_edition');
  Query.Script.Add('  INNER JOIN EMPRUNTEURS Em ON Em.ID_EMPRUNTEUR = S.id_emprunteur;');

  Query.Script.Add('CREATE VIEW VW_LISTE_COLLECTIONS_ALBUMS(');
  Query.Script.Add('    ID_ALBUM,');
  Query.Script.Add('    TITREALBUM,');
  Query.Script.Add('    TOME,');
  Query.Script.Add('    TOMEDEBUT,');
  Query.Script.Add('    TOMEFIN,');
  Query.Script.Add('    HORSSERIE,');
  Query.Script.Add('    INTEGRALE,');
  Query.Script.Add('    MOISPARUTION,');
  Query.Script.Add('    ANNEEPARUTION,');
  Query.Script.Add('    ID_SERIE,');
  Query.Script.Add('    TITRESERIE,');
  Query.Script.Add('    UPPERTITREALBUM,');
  Query.Script.Add('    ID_COLLECTION,');
  Query.Script.Add('    NOMCOLLECTION,');
  Query.Script.Add('    UPPERNOMCOLLECTION,');
  Query.Script.Add('    UPPERTITRESERIE,');
  Query.Script.Add('    ACHAT,');
  Query.Script.Add('    COMPLET)');
  Query.Script.Add('AS');
  Query.Script.Add('select a.ID_ALBUM,');
  Query.Script.Add('       a.TITREALBUM,');
  Query.Script.Add('       a.TOME,');
  Query.Script.Add('       a.TOMEDEBUT,');
  Query.Script.Add('       a.TOMEFIN,');
  Query.Script.Add('       a.HORSSERIE,');
  Query.Script.Add('       a.INTEGRALE,');
  Query.Script.Add('       a.MOISPARUTION,');
  Query.Script.Add('       a.ANNEEPARUTION,');
  Query.Script.Add('       a.ID_SERIE,');
  Query.Script.Add('       a.TITRESERIE,');
  Query.Script.Add('       a.UPPERTITREALBUM,');
  Query.Script.Add('       c.ID_COLLECTION,');
  Query.Script.Add('       c.NOMCOLLECTION,');
  Query.Script.Add('       c.UPPERNOMCOLLECTION,');
  Query.Script.Add('       a.UPPERTITRESERIE,');
  Query.Script.Add('       a.ACHAT,');
  Query.Script.Add('       a.COMPLET');
  Query.Script.Add('FROM VW_LISTE_ALBUMS a LEFT JOIN EDITIONS e ON e.id_album = a.id_album');
  Query.Script.Add('                       LEFT JOIN COLLECTIONS c ON e.id_collection = c.ID_COLLECTION;');

  Query.Script.Add('CREATE VIEW VW_LISTE_EDITEURS_ALBUMS(');
  Query.Script.Add('    ID_ALBUM,');
  Query.Script.Add('    TITREALBUM,');
  Query.Script.Add('    TOME,');
  Query.Script.Add('    TOMEDEBUT,');
  Query.Script.Add('    TOMEFIN,');
  Query.Script.Add('    HORSSERIE,');
  Query.Script.Add('    INTEGRALE,');
  Query.Script.Add('    MOISPARUTION,');
  Query.Script.Add('    ANNEEPARUTION,');
  Query.Script.Add('    ID_SERIE,');
  Query.Script.Add('    TITRESERIE,');
  Query.Script.Add('    UPPERTITREALBUM,');
  Query.Script.Add('    ID_EDITEUR,');
  Query.Script.Add('    NOMEDITEUR,');
  Query.Script.Add('    UPPERNOMEDITEUR,');
  Query.Script.Add('    UPPERTITRESERIE,');
  Query.Script.Add('    ACHAT,');
  Query.Script.Add('    COMPLET)');
  Query.Script.Add('AS');
  Query.Script.Add('select a.ID_ALBUM,');
  Query.Script.Add('       a.TITREALBUM,');
  Query.Script.Add('       a.TOME,');
  Query.Script.Add('       a.TOMEDEBUT,');
  Query.Script.Add('       a.TOMEFIN,');
  Query.Script.Add('       a.HORSSERIE,');
  Query.Script.Add('       a.INTEGRALE,');
  Query.Script.Add('       a.MOISPARUTION,');
  Query.Script.Add('       a.ANNEEPARUTION,');
  Query.Script.Add('       a.ID_SERIE,');
  Query.Script.Add('       a.TITRESERIE,');
  Query.Script.Add('       a.UPPERTITREALBUM,');
  Query.Script.Add('       e.ID_EDITEUR,');
  Query.Script.Add('       e.NOMEDITEUR,');
  Query.Script.Add('       e.UPPERNOMEDITEUR,');
  Query.Script.Add('       a.UPPERTITRESERIE,');
  Query.Script.Add('       a.ACHAT,');
  Query.Script.Add('       a.COMPLET');
  Query.Script.Add('FROM VW_LISTE_ALBUMS a LEFT JOIN EDITIONS ed ON ed.id_album = a.id_album');
  Query.Script.Add('                       LEFT JOIN EDITEURS e ON e.ID_EDITEUR = ed.id_editeur;');

  Query.Script.Add('CREATE VIEW VW_LISTE_GENRES_ALBUMS(');
  Query.Script.Add('    ID_ALBUM,');
  Query.Script.Add('    TITREALBUM,');
  Query.Script.Add('    TOME,');
  Query.Script.Add('    TOMEDEBUT,');
  Query.Script.Add('    TOMEFIN,');
  Query.Script.Add('    HORSSERIE,');
  Query.Script.Add('    INTEGRALE,');
  Query.Script.Add('    MOISPARUTION,');
  Query.Script.Add('    ANNEEPARUTION,');
  Query.Script.Add('    ID_SERIE,');
  Query.Script.Add('    TITRESERIE,');
  Query.Script.Add('    UPPERTITREALBUM,');
  Query.Script.Add('    ID_GENRE,');
  Query.Script.Add('    GENRE,');
  Query.Script.Add('    UPPERGENRE,');
  Query.Script.Add('    UPPERTITRESERIE,');
  Query.Script.Add('    ACHAT,');
  Query.Script.Add('    COMPLET)');
  Query.Script.Add('AS');
  Query.Script.Add('select a.ID_ALBUM,');
  Query.Script.Add('       a.TITREALBUM,');
  Query.Script.Add('       a.TOME,');
  Query.Script.Add('       a.TOMEDEBUT,');
  Query.Script.Add('       a.TOMEFIN,');
  Query.Script.Add('       a.HORSSERIE,');
  Query.Script.Add('       a.INTEGRALE,');
  Query.Script.Add('       a.MOISPARUTION,');
  Query.Script.Add('       a.ANNEEPARUTION,');
  Query.Script.Add('       a.ID_SERIE,');
  Query.Script.Add('       a.TITRESERIE,');
  Query.Script.Add('       a.UPPERTITREALBUM,');
  Query.Script.Add('       g.ID_GENRE,');
  Query.Script.Add('       g.GENRE,');
  Query.Script.Add('       g.UPPERGENRE,');
  Query.Script.Add('       a.UPPERTITRESERIE,');
  Query.Script.Add('       a.ACHAT,');
  Query.Script.Add('       a.COMPLET');
  Query.Script.Add('FROM VW_LISTE_ALBUMS a LEFT JOIN GENRESERIES gs ON gs.id_serie = a.id_serie');
  Query.Script.Add('                       LEFT JOIN GENRES g ON gs.id_genre = g.ID_GENRE;');

  Query.Script.Add('CREATE VIEW VW_LISTE_PARABD(');
  Query.Script.Add('    ID_PARABD,');
  Query.Script.Add('    TITREPARABD,');
  Query.Script.Add('    ID_SERIE,');
  Query.Script.Add('    TITRESERIE,');
  Query.Script.Add('    UPPERTITREPARABD,');
  Query.Script.Add('    UPPERTITRESERIE,');
  Query.Script.Add('    ACHAT,');
  Query.Script.Add('    COMPLET,');
  Query.Script.Add('    SCATEGORIE)');
  Query.Script.Add('AS');
  Query.Script.Add('select a.ID_PARABD,');
  Query.Script.Add('       a.TITREPARABD,');
  Query.Script.Add('       a.ID_SERIE,');
  Query.Script.Add('       s.TITRESERIE,');
  Query.Script.Add('       a.UPPERTITREPARABD,');
  Query.Script.Add('       s.UPPERTITRESERIE,');
  Query.Script.Add('       a.ACHAT,');
  Query.Script.Add('       a.COMPLET,');
  Query.Script.Add('       lc.LIBELLE');
  Query.Script.Add('FROM PARABD a LEFT JOIN SERIES s ON s.ID_SERIE = a.id_serie');
  Query.Script.Add('LEFT JOIN LISTES lc on (lc.ref = a.CATEGORIEPARABD and lc.categorie = 7);');

  Query.Script.Add('CREATE VIEW VW_PRIXALBUMS(');
  Query.Script.Add('    ID_ALBUM,');
  Query.Script.Add('    HORSSERIE,');
  Query.Script.Add('    TOME,');
  Query.Script.Add('    INTEGRALE,');
  Query.Script.Add('    TOMEDEBUT,');
  Query.Script.Add('    TOMEFIN,');
  Query.Script.Add('    NBALBUMS,');
  Query.Script.Add('    ID_SERIE,');
  Query.Script.Add('    ID_EDITION,');
  Query.Script.Add('    ID_EDITEUR,');
  Query.Script.Add('    PRIX)');
  Query.Script.Add('AS');
  Query.Script.Add('select');
  Query.Script.Add('  a.ID_ALBUM,');
  Query.Script.Add('  a.horsserie,');
  Query.Script.Add('  a.tome,');
  Query.Script.Add('  a.integrale,');
  Query.Script.Add('  a.tomedebut,');
  Query.Script.Add('  a.tomefin,');
  Query.Script.Add('  case');
  Query.Script.Add('    when a.integrale = 0 then 1');
  Query.Script.Add('    when a.tomedebut is null');
  Query.Script.Add('    then 1 when a.tomefin is null');
  Query.Script.Add('    then 1 when a.tomefin < a.tomedebut then 1');
  Query.Script.Add('    else a.tomefin - a.tomedebut + 1');
  Query.Script.Add('  end as nbalbums,');
  Query.Script.Add('  a.id_serie,');
  Query.Script.Add('  e.ID_EDITION,');
  Query.Script.Add('  e.id_editeur,');
  Query.Script.Add('  e.prix');
  Query.Script.Add('from albums a');
  Query.Script.Add('  inner join editions e on a.ID_ALBUM = e.id_album;');

  Query.Script.Add('CREATE VIEW VW_PRIXUNITAIRES(');
  Query.Script.Add('    HORSSERIE,');
  Query.Script.Add('    ID_SERIE,');
  Query.Script.Add('    ID_EDITEUR,');
  Query.Script.Add('    PRIXUNITAIRE)');
  Query.Script.Add('AS');
  Query.Script.Add('select');
  Query.Script.Add('  horsserie,');
  Query.Script.Add('  id_serie,');
  Query.Script.Add('  id_editeur,');
  Query.Script.Add('  avg(prix / nbalbums) as prixunitaire');
  Query.Script.Add('from vw_prixalbums');
  Query.Script.Add('where');
  Query.Script.Add('  prix is not null');
  Query.Script.Add('group by');
  Query.Script.Add('  id_serie,');
  Query.Script.Add('  horsserie,');
  Query.Script.Add('  id_editeur;');

  Query.Script.Add('ALTER PROCEDURE ALBUMS_BY_INITIALE (');
  Query.Script.Add('    INITIALE CHAR(1),');
  Query.Script.Add('    FILTRE VARCHAR(125))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_ALBUM CHAR(38),');
  Query.Script.Add('    TITREALBUM VARCHAR(150),');
  Query.Script.Add('    TOME SMALLINT,');
  Query.Script.Add('    TOMEDEBUT SMALLINT,');
  Query.Script.Add('    TOMEFIN SMALLINT,');
  Query.Script.Add('    HORSSERIE SMALLINT,');
  Query.Script.Add('    INTEGRALE SMALLINT,');
  Query.Script.Add('    MOISPARUTION SMALLINT,');
  Query.Script.Add('    ANNEEPARUTION SMALLINT,');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    ACHAT SMALLINT,');
  Query.Script.Add('    COMPLET INTEGER)');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE SWHERE VARCHAR(133);');
  Query.Script.Add('BEGIN');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then swhere = '' and '' || filtre || '' '';');
  Query.Script.Add('  FOR execute statement');
  Query.Script.Add('     ''SELECT a.ID_ALBUM, ');
  Query.Script.Add('             a.TITREALBUM,');
  Query.Script.Add('             a.TOME,');
  Query.Script.Add('             a.TOMEDEBUT,');
  Query.Script.Add('             a.TOMEFIN,');
  Query.Script.Add('             a.HORSSERIE,');
  Query.Script.Add('             a.INTEGRALE,');
  Query.Script.Add('             a.MOISPARUTION,');
  Query.Script.Add('             a.ANNEEPARUTION,');
  Query.Script.Add('             a.ID_SERIE,');
  Query.Script.Add('             s.TITRESERIE,');
  Query.Script.Add('             a.ACHAT,');
  Query.Script.Add('             a.COMPLET');
  Query.Script.Add('      FROM ALBUMS a LEFT JOIN SERIES s ON s.ID_SERIE = a.id_serie');
  Query.Script.Add('      WHERE a.initialetitrealbum = '''''' ||: INITIALE || '''''' '' || swhere ||');
  Query.Script.Add
    ('      ''ORDER BY UPPERTITREALBUM, UPPERTITRESERIE, HORSSERIE NULLS FIRST, INTEGRALE NULLS FIRST, TOME NULLS FIRST, TOMEDEBUT NULLS FIRST, TOMEFIN NULLS FIRST, ANNEEPARUTION NULLS FIRST, MOISPARUTION NULLS FIRST ''');
  Query.Script.Add('      INTO :ID_ALBUM,');
  Query.Script.Add('           :TITREALBUM,');
  Query.Script.Add('           :TOME,');
  Query.Script.Add('           :TOMEDEBUT,');
  Query.Script.Add('           :TOMEFIN,');
  Query.Script.Add('           :HORSSERIE,');
  Query.Script.Add('           :INTEGRALE,');
  Query.Script.Add('           :MOISPARUTION,');
  Query.Script.Add('           :ANNEEPARUTION,');
  Query.Script.Add('           :ID_SERIE,');
  Query.Script.Add('           :TITRESERIE,');
  Query.Script.Add('           :ACHAT,');
  Query.Script.Add('           :COMPLET');
  Query.Script.Add('  DO');
  Query.Script.Add('  BEGIN');
  Query.Script.Add('    SUSPEND;');
  Query.Script.Add('  END');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE ALBUMS_MANQUANTS (');
  Query.Script.Add('    WITHINTEGRALE SMALLINT,');
  Query.Script.Add('    WITHACHAT SMALLINT,');
  Query.Script.Add('    IN_IDSERIE CHAR(38))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    COUNTSERIE INTEGER,');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    UPPERTITRESERIE VARCHAR(150),');
  Query.Script.Add('    TOME INTEGER,');
  Query.Script.Add('    ID_EDITEUR CHAR(38),');
  Query.Script.Add('    NOMEDITEUR VARCHAR(50),');
  Query.Script.Add('    ID_COLLECTION CHAR(38),');
  Query.Script.Add('    NOMCOLLECTION VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE MAXSERIE INTEGER;');
  Query.Script.Add('DECLARE VARIABLE CURRENTTOME INTEGER;');
  Query.Script.Add('DECLARE VARIABLE OWNEDTOME INTEGER;');
  Query.Script.Add('DECLARE VARIABLE ACHAT SMALLINT;');
  Query.Script.Add('DECLARE VARIABLE SUMACHAT INTEGER;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (WITHINTEGRALE is null) then WITHINTEGRALE = 1;');
  Query.Script.Add('  if (WITHACHAT is null) then WITHACHAT = 1;');
  Query.Script.Add('  for select');
  Query.Script.Add('        A.id_serie,');
  Query.Script.Add('        max(TOME),');
  Query.Script.Add('        count(distinct TOME),');
  Query.Script.Add('        cast(sum(ACHAT) as integer),');
  Query.Script.Add('        S.id_editeur,');
  Query.Script.Add('        NOMEDITEUR,');
  Query.Script.Add('        S.id_collection,');
  Query.Script.Add('        NOMCOLLECTION');
  Query.Script.Add('      from liste_tomes(:WITHINTEGRALE, :in_idserie) A');
  Query.Script.Add('         /* pas de left join: on cherche les manquants pour compléter les séries */');
  Query.Script.Add('         inner join SERIES S on A.ID_SERIE = S.ID_SERIE');
  Query.Script.Add('         left join EDITEURS E on S.ID_EDITEUR = E.ID_EDITEUR');
  Query.Script.Add('         left join COLLECTIONS C on S.id_collection = C.ID_COLLECTION');
  Query.Script.Add('      where S.COMPLETE = 0');
  Query.Script.Add('      group by A.id_serie, UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION,');
  Query.Script.Add('               S.id_editeur, NOMEDITEUR, S.id_collection, NOMCOLLECTION');
  Query.Script.Add('      order by UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION');
  Query.Script.Add('      into');
  Query.Script.Add('        :ID_SERIE,');
  Query.Script.Add('        :MAXSERIE,');
  Query.Script.Add('        :COUNTSERIE,');
  Query.Script.Add('        :SUMACHAT,');
  Query.Script.Add('        :ID_EDITEUR,');
  Query.Script.Add('        :NOMEDITEUR,');
  Query.Script.Add('        :ID_COLLECTION,');
  Query.Script.Add('        :NOMCOLLECTION');
  Query.Script.Add('  do begin');
  Query.Script.Add('    if (WITHACHAT = 0) then');
  Query.Script.Add('      COUNTSERIE = COUNTSERIE - SUMACHAT;');
  Query.Script.Add('    if (COUNTSERIE <> MAXSERIE) then begin');
  Query.Script.Add('      CURRENTTOME = 0;');
  Query.Script.Add('      for select distinct');
  Query.Script.Add('            UPPERTITRESERIE,');
  Query.Script.Add('            TITRESERIE,');
  Query.Script.Add('            TOME,');
  Query.Script.Add('            ACHAT');
  Query.Script.Add('          from liste_tomes(:WITHINTEGRALE, :ID_SERIE) A inner join SERIES S on A.ID_SERIE = S.ID_SERIE');
  Query.Script.Add('          order by TOME');
  Query.Script.Add('          into');
  Query.Script.Add('            :UPPERTITRESERIE,');
  Query.Script.Add('            :TITRESERIE,');
  Query.Script.Add('            :OWNEDTOME,');
  Query.Script.Add('            :ACHAT');
  Query.Script.Add('      do begin');
  Query.Script.Add('        CURRENTTOME = CURRENTTOME + 1;');
  Query.Script.Add('        while ((CURRENTTOME <> OWNEDTOME) and (CURRENTTOME < MAXSERIE)) do begin');
  Query.Script.Add('          TOME = CURRENTTOME;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('          CURRENTTOME = CURRENTTOME + 1;');
  Query.Script.Add('        end');
  Query.Script.Add('        if ((WITHACHAT = 0) AND (ACHAT = 1)) then begin');
  Query.Script.Add('          TOME = OWNEDTOME;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('        end');
  Query.Script.Add('      end');
  Query.Script.Add('    end');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE PREVISIONS_SORTIES (');
  Query.Script.Add('    WITHACHAT SMALLINT,');
  Query.Script.Add('    IN_ID_SERIE CHAR(38))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    UPPERTITRESERIE VARCHAR(150),');
  Query.Script.Add('    TOME INTEGER,');
  Query.Script.Add('    ANNEEPARUTION INTEGER,');
  Query.Script.Add('    MOISPARUTION INTEGER,');
  Query.Script.Add('    ID_EDITEUR CHAR(38),');
  Query.Script.Add('    NOMEDITEUR VARCHAR(50),');
  Query.Script.Add('    ID_COLLECTION CHAR(38),');
  Query.Script.Add('    NOMCOLLECTION VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE CURRENTIDSERIE CHAR(38) CHARACTER SET NONE;');
  Query.Script.Add('DECLARE VARIABLE OLDIDSERIE CHAR(38) CHARACTER SET NONE;');
  Query.Script.Add('DECLARE VARIABLE CURRENTTOME INTEGER;');
  Query.Script.Add('DECLARE VARIABLE SOMMEPONDEREE INTEGER;');
  Query.Script.Add('DECLARE VARIABLE COMPTEALBUM INTEGER;');
  Query.Script.Add('DECLARE VARIABLE CURRENTANNEE INTEGER;');
  Query.Script.Add('DECLARE VARIABLE CURRENTMOIS INTEGER;');
  Query.Script.Add('DECLARE VARIABLE TOMEPRECEDENT INTEGER;');
  Query.Script.Add('DECLARE VARIABLE ANNEEPRECEDENTE INTEGER;');
  Query.Script.Add('DECLARE VARIABLE MOISPRECEDENT INTEGER;');
  Query.Script.Add('DECLARE VARIABLE DIFFMOIS INTEGER;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (withachat is Null) then withachat = 1;');
  Query.Script.Add('  oldidserie = NULL;');
  Query.Script.Add('  tomeprecedent = -1;');
  Query.Script.Add('  anneeprecedente = -1;');
  Query.Script.Add('  moisprecedent = null;');
  Query.Script.Add('  for select TOME, ANNEEPARUTION, MOISPARUTION, s.ID_SERIE');
  Query.Script.Add('      /* pas de left join: on calcul les prévisions de sorties des nouveautés des séries */');
  Query.Script.Add('      from albums a inner join series s on s.ID_SERIE = a.id_serie');
  Query.Script.Add('      where (s.terminee is null or s.terminee <> 1)');
  Query.Script.Add('            and a.horsserie = 0 and a.integrale = 0 and a.anneeparution is not null');
  Query.Script.Add('            and (:in_id_serie is null or s.ID_SERIE = :in_id_serie)');
  Query.Script.Add('            and (:withachat = 1 or achat = 0)');
  Query.Script.Add('      order by s.ID_SERIE, TOME');
  Query.Script.Add('      into :CURRENTTOME, :CURRENTANNEE, :CURRENTMOIS, :currentidserie');
  Query.Script.Add('  do begin');
  Query.Script.Add('    if (oldidserie is null or currentidserie <> oldidserie) then begin');
  Query.Script.Add('');
  Query.Script.Add('      if (oldidserie IS NOT NULL and comptealbum > 0) then begin');
  Query.Script.Add('        select ID_SERIE, TITRESERIE, UPPERTITRESERIE,');
  Query.Script.Add('               TOME, ANNEEPARUTION, MOISPARUTION,');
  Query.Script.Add('               ID_EDITEUR, NOMEDITEUR,');
  Query.Script.Add('               ID_COLLECTION, NOMCOLLECTION');
  Query.Script.Add('        from CALCUL_ANNEE_SORTIE(:withachat, :oldidserie, :sommeponderee, :comptealbum, :tomeprecedent, :anneeprecedente, :moisprecedent)');
  Query.Script.Add('        into :ID_SERIE, :TITRESERIE, :UPPERTITRESERIE,');
  Query.Script.Add('             :TOME, :ANNEEPARUTION, :MOISPARUTION,');
  Query.Script.Add('             :ID_EDITEUR, :NOMEDITEUR,');
  Query.Script.Add('             :ID_COLLECTION, :NOMCOLLECTION;');
  Query.Script.Add('        suspend;');
  Query.Script.Add('      end');
  Query.Script.Add('');
  Query.Script.Add('      oldidserie = currentidserie;');
  Query.Script.Add('      sommeponderee = 0;');
  Query.Script.Add('      comptealbum = 0;');
  Query.Script.Add('      tomeprecedent = -1;');
  Query.Script.Add('      anneeprecedente = -1;');
  Query.Script.Add('      moisprecedent = -1;');
  Query.Script.Add('    end');
  Query.Script.Add('    if (tomeprecedent <> -1 and CURRENTTOME - TOMEPRECEDENT <> 0) then begin');
  Query.Script.Add('      if (CURRENTMOIS is null or MOISPRECEDENT is null) then');
  Query.Script.Add('        diffmois = 0;');
  Query.Script.Add('      else');
  Query.Script.Add('        diffmois = CURRENTMOIS - MOISPRECEDENT;');
  Query.Script.Add
    ('      /* non pondéré: sommeponderee = sommeponderee + (((CURRENTANNEE - ANNEEPRECEDENTE) * 12 + (COALESCE(CURRENTMOIS, 1) - COALESCE(MOISPRECEDENT, 1))) / (CURRENTTOME - TOMEPRECEDENT)); */');
  Query.Script.Add('      sommeponderee = sommeponderee + (((CURRENTANNEE - ANNEEPRECEDENTE) * 12 + diffmois) / (CURRENTTOME - TOMEPRECEDENT)) * CURRENTTOME;');
  Query.Script.Add('      /* non pondéré: comptealbum = comptealbum + 1;*/');
  Query.Script.Add('      comptealbum = comptealbum + CURRENTTOME;');
  Query.Script.Add('    end');
  Query.Script.Add('    tomeprecedent = CURRENTTOME;');
  Query.Script.Add('    anneeprecedente = CURRENTANNEE;');
  Query.Script.Add('    moisprecedent = CURRENTMOIS;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (oldidserie IS NOT NULL and comptealbum > 0) then begin');
  Query.Script.Add('    select ID_SERIE, TITRESERIE, UPPERTITRESERIE,');
  Query.Script.Add('           TOME, ANNEEPARUTION, MOISPARUTION,');
  Query.Script.Add('           ID_EDITEUR, NOMEDITEUR,');
  Query.Script.Add('           ID_COLLECTION, NOMCOLLECTION');
  Query.Script.Add('    from CALCUL_ANNEE_SORTIE(:withachat, :oldidserie, :sommeponderee, :comptealbum, :tomeprecedent, :anneeprecedente, :moisprecedent)');
  Query.Script.Add('    into :ID_SERIE, :TITRESERIE, :UPPERTITRESERIE,');
  Query.Script.Add('         :TOME, :ANNEEPARUTION, :MOISPARUTION,');
  Query.Script.Add('         :ID_EDITEUR, :NOMEDITEUR,');
  Query.Script.Add('         :ID_COLLECTION, :NOMCOLLECTION;');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE PROC_EMPRUNTS');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_EDITION CHAR(38),');
  Query.Script.Add('    ID_ALBUM CHAR(38),');
  Query.Script.Add('    TITREALBUM VARCHAR(150),');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    PRETE SMALLINT,');
  Query.Script.Add('    ID_EMPRUNTEUR CHAR(38),');
  Query.Script.Add('    NOMEMPRUNTEUR VARCHAR(150),');
  Query.Script.Add('    PRETEMPRUNT SMALLINT,');
  Query.Script.Add('    DATEEMPRUNT TIMESTAMP)');
  Query.Script.Add('AS');
  Query.Script.Add('BEGIN');
  Query.Script.Add('  FOR SELECT Ed.ID_EDITION,');
  Query.Script.Add('             A.ID_ALBUM,');
  Query.Script.Add('             A.titrealbum,');
  Query.Script.Add('             A.id_serie,');
  Query.Script.Add('             A.titreserie,');
  Query.Script.Add('             Ed.prete,');
  Query.Script.Add('             E.ID_EMPRUNTEUR,');
  Query.Script.Add('             E.NomEmprunteur,');
  Query.Script.Add('             S.PretEmprunt,');
  Query.Script.Add('             S.DateEmprunt');
  Query.Script.Add('      FROM VW_LISTE_ALBUMS A');
  Query.Script.Add('        INNER JOIN EDITIONS Ed ON A.ID_ALBUM = Ed.id_album');
  Query.Script.Add('        INNER JOIN STATUT S ON Ed.ID_EDITION = S.id_edition');
  Query.Script.Add('        INNER JOIN EMPRUNTEURS E ON E.ID_EMPRUNTEUR = S.id_emprunteur');
  Query.Script.Add('      ORDER BY S.DateEmprunt DESC');
  Query.Script.Add('      INTO :ID_EDITION,');
  Query.Script.Add('           :ID_ALBUM,');
  Query.Script.Add('           :TITREALBUM,');
  Query.Script.Add('           :ID_SERIE,');
  Query.Script.Add('           :TITRESERIE,');
  Query.Script.Add('           :PRETE,');
  Query.Script.Add('           :ID_Emprunteur,');
  Query.Script.Add('           :NomEmprunteur,');
  Query.Script.Add('           :PretEmprunt,');
  Query.Script.Add('           :DateEmprunt');
  Query.Script.Add('  DO');
  Query.Script.Add('  BEGIN');
  Query.Script.Add('    SUSPEND;');
  Query.Script.Add('  END');
  Query.Script.Add('END;');

  Query.Script.Add('ALTER PROCEDURE CALCUL_ANNEE_SORTIE (');
  Query.Script.Add('    WITHACHAT SMALLINT,');
  Query.Script.Add('    IN_IDSERIE CHAR(38),');
  Query.Script.Add('    SOMMEPONDEREE INTEGER,');
  Query.Script.Add('    COMPTEALBUM INTEGER,');
  Query.Script.Add('    MAXTOME INTEGER,');
  Query.Script.Add('    MAXANNEE INTEGER,');
  Query.Script.Add('    MAXMOIS INTEGER)');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    UPPERTITRESERIE VARCHAR(150),');
  Query.Script.Add('    TOME INTEGER,');
  Query.Script.Add('    ANNEEPARUTION INTEGER,');
  Query.Script.Add('    MOISPARUTION INTEGER,');
  Query.Script.Add('    ID_EDITEUR CHAR(38),');
  Query.Script.Add('    NOMEDITEUR VARCHAR(50),');
  Query.Script.Add('    ID_COLLECTION CHAR(38),');
  Query.Script.Add('    NOMCOLLECTION VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE MAXTOME2 INTEGER;');
  Query.Script.Add('begin');
  Query.Script.Add('  tome = maxtome + 1;');
  Query.Script.Add('');
  Query.Script.Add('  select cast(max(tomefin) + 1 as integer) from albums');
  Query.Script.Add('  where horsserie = 0 and integrale = 1 and id_serie = :in_idserie and (:withachat = 1 or achat = 0)');
  Query.Script.Add('  into');
  Query.Script.Add('    :MAXTOME2;');
  Query.Script.Add('');
  Query.Script.Add('  if (maxtome2 > tome) then tome = maxtome2;');
  Query.Script.Add('');
  Query.Script.Add('  select s.ID_SERIE, s.TitreSerie, s.UpperTitreSerie, e.ID_EDITEUR, e.NomEditeur, c.ID_COLLECTION, c.NomCollection from');
  Query.Script.Add('    series s left join editeurs e on e.ID_EDITEUR = s.id_editeur');
  Query.Script.Add('             left join collections c on c.ID_COLLECTION = s.id_collection');
  Query.Script.Add('  where s.ID_SERIE = :in_idserie');
  Query.Script.Add('  into');
  Query.Script.Add('    :ID_SERIE,');
  Query.Script.Add('    :TITRESERIE,');
  Query.Script.Add('    :UPPERTITRESERIE,');
  Query.Script.Add('    :ID_EDITEUR,');
  Query.Script.Add('    :NOMEDITEUR,');
  Query.Script.Add('    :ID_COLLECTION,');
  Query.Script.Add('    :NOMCOLLECTION;');
  Query.Script.Add('');
  Query.Script.Add('  if (maxmois is null) then begin');
  Query.Script.Add('    ANNEEPARUTION = maxannee + ((tome - maxtome) * ((sommeponderee / 12) / comptealbum));');
  Query.Script.Add('    MOISPARUTION = null;');
  Query.Script.Add('  end else begin');
  Query.Script.Add('    MOISPARUTION = maxmois + ((tome - maxtome) * (sommeponderee / comptealbum));');
  Query.Script.Add('    ANNEEPARUTION = maxannee;');
  Query.Script.Add('    while (MOISPARUTION > 12) do begin');
  Query.Script.Add('      MOISPARUTION = MOISPARUTION - 12;');
  Query.Script.Add('      ANNEEPARUTION = ANNEEPARUTION + 1;');
  Query.Script.Add('    end');
  Query.Script.Add('  end');
  Query.Script.Add('  suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE LISTE_TOMES (');
  Query.Script.Add('    WITHINTEGRALE SMALLINT,');
  Query.Script.Add('    IN_IDSERIE CHAR(38))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TOME SMALLINT,');
  Query.Script.Add('    INTEGRALE SMALLINT,');
  Query.Script.Add('    ACHAT SMALLINT)');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE TOMEDEBUT INTEGER;');
  Query.Script.Add('DECLARE VARIABLE TOMEFIN INTEGER;');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select id_serie, tome, integrale, achat');
  Query.Script.Add('    from albums');
  Query.Script.Add('    where TOME is not null and integrale = 0 and horsserie = 0');
  Query.Script.Add('          and (:in_idserie is null or id_serie = :in_idserie)');
  Query.Script.Add('    order by id_serie, tome');
  Query.Script.Add('    into :id_serie, :TOME, :INTEGRALE, :ACHAT');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('');
  Query.Script.Add('  if (withintegrale is null) then withintegrale = 1;');
  Query.Script.Add('  if (withintegrale = 1) then');
  Query.Script.Add('    for');
  Query.Script.Add('      select id_serie, tomedebut, tomefin, integrale, achat');
  Query.Script.Add('      from albums');
  Query.Script.Add('      where TOMEDEBUT is not null and TOMEFIN is not null and integrale = 1 and horsserie = 0');
  Query.Script.Add('            and (:in_idserie is null or id_serie = :in_idserie)');
  Query.Script.Add('      order by id_serie, tomedebut, tomefin');
  Query.Script.Add('      into :ID_SERIE, :TOMEDEBUT, :TOMEFIN, :INTEGRALE, :ACHAT');
  Query.Script.Add('      do begin');
  Query.Script.Add('        TOME = TOMEDEBUT - 1;');
  Query.Script.Add('        while (TOME <> TOMEFIN) do begin');
  Query.Script.Add('          TOME = TOME + 1;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('        end');
  Query.Script.Add('      end');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE ALBUMS_BY_SERIE (');
  Query.Script.Add('    IN_ID_SERIE CHAR(38),');
  Query.Script.Add('    FILTRE VARCHAR(125))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_ALBUM CHAR(38),');
  Query.Script.Add('    TITREALBUM VARCHAR(150),');
  Query.Script.Add('    TOME SMALLINT,');
  Query.Script.Add('    TOMEDEBUT SMALLINT,');
  Query.Script.Add('    TOMEFIN SMALLINT,');
  Query.Script.Add('    HORSSERIE SMALLINT,');
  Query.Script.Add('    INTEGRALE SMALLINT,');
  Query.Script.Add('    MOISPARUTION SMALLINT,');
  Query.Script.Add('    ANNEEPARUTION SMALLINT,');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    ACHAT SMALLINT,');
  Query.Script.Add('    COMPLET INTEGER)');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE SWHERE VARCHAR(130);');
  Query.Script.Add('BEGIN');
  Query.Script.Add('  if (:IN_ID_SERIE = CAST('''' AS CHAR(38))) then sWhere = ''ID_serie is null '';');
  Query.Script.Add('                           else sWhere = ''ID_serie = '''''' || :IN_ID_SERIE || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  FOR execute statement');
  Query.Script.Add('      ''SELECT ID_ALBUM,');
  Query.Script.Add('             TITREALBUM,');
  Query.Script.Add('             TOME,');
  Query.Script.Add('             TOMEDEBUT,');
  Query.Script.Add('             TOMEFIN,');
  Query.Script.Add('             HORSSERIE,');
  Query.Script.Add('             INTEGRALE,');
  Query.Script.Add('             MOISPARUTION,');
  Query.Script.Add('             ANNEEPARUTION,');
  Query.Script.Add('             ID_SERIE,');
  Query.Script.Add('             TITRESERIE,');
  Query.Script.Add('             ACHAT,');
  Query.Script.Add('             COMPLET');
  Query.Script.Add('      FROM vw_liste_albums');
  Query.Script.Add('      WHERE '' || :sWHERE ||');
  Query.Script.Add
    ('      ''ORDER BY HORSSERIE NULLS FIRST, INTEGRALE NULLS First, TOME NULLS FIRST, ANNEEPARUTION NULLS FIRST, MOISPARUTION NULLS FIRST, UPPERTITREALBUM''');
  Query.Script.Add('      INTO :ID_ALBUM,');
  Query.Script.Add('           :TITREALBUM,');
  Query.Script.Add('           :TOME,');
  Query.Script.Add('           :TOMEDEBUT,');
  Query.Script.Add('           :TOMEFIN,');
  Query.Script.Add('           :HORSSERIE,');
  Query.Script.Add('           :INTEGRALE,');
  Query.Script.Add('           :MOISPARUTION,');
  Query.Script.Add('           :ANNEEPARUTION,');
  Query.Script.Add('           :ID_SERIE,');
  Query.Script.Add('           :TITRESERIE,');
  Query.Script.Add('           :ACHAT,');
  Query.Script.Add('           :COMPLET');
  Query.Script.Add('  DO');
  Query.Script.Add('  BEGIN');
  Query.Script.Add('    SUSPEND;');
  Query.Script.Add('  END');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE PARABD_BY_SERIE (');
  Query.Script.Add('    IN_ID_SERIE CHAR(38),');
  Query.Script.Add('    FILTRE VARCHAR(125))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_PARABD CHAR(38),');
  Query.Script.Add('    TITREPARABD VARCHAR(150),');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    ACHAT SMALLINT,');
  Query.Script.Add('    COMPLET INTEGER,');
  Query.Script.Add('    SCATEGORIE VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE SWHERE VARCHAR(130);');
  Query.Script.Add('BEGIN');
  Query.Script.Add('  if (:IN_ID_SERIE = CAST('''' AS CHAR(38))) then sWhere = ''ID_serie is null '';');
  Query.Script.Add('                           else sWhere = ''ID_serie = '''''' || :IN_ID_SERIE || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  FOR execute statement');
  Query.Script.Add('      ''SELECT ID_PARABD,');
  Query.Script.Add('             TITREPARABD,');
  Query.Script.Add('             ID_PARABD,');
  Query.Script.Add('             TITRESERIE,');
  Query.Script.Add('             ACHAT,');
  Query.Script.Add('             COMPLET,');
  Query.Script.Add('             SCATEGORIE');
  Query.Script.Add('      FROM vw_liste_PARABD');
  Query.Script.Add('      WHERE '' || :sWHERE ||');
  Query.Script.Add('      ''ORDER BY UPPERTITREPARABD''');
  Query.Script.Add('      INTO :ID_PARABD,');
  Query.Script.Add('           :TITREPARABD,');
  Query.Script.Add('           :ID_SERIE,');
  Query.Script.Add('           :TITRESERIE,');
  Query.Script.Add('           :ACHAT,');
  Query.Script.Add('           :COMPLET,');
  Query.Script.Add('           :SCATEGORIE');
  Query.Script.Add('  DO');
  Query.Script.Add('  BEGIN');
  Query.Script.Add('    SUSPEND;');
  Query.Script.Add('  END');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE SERIES_ALBUMS (');
  Query.Script.Add('    FILTRE VARCHAR(125))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    COUNTSERIE INTEGER,');
  Query.Script.Add('    ID_SERIE CHAR(38))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE SWHERE VARCHAR(132);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then swhere = ''AND '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('     ''select');
  Query.Script.Add('             CAST(''''-1'''' AS VARCHAR(150)),');
  Query.Script.Add('             ID_Serie,');
  Query.Script.Add('             Count(ID_ALBUM)');
  Query.Script.Add('      from vw_liste_albums');
  Query.Script.Add('      where TITRESerie is null '' || SWHERE ||');
  Query.Script.Add('    '' group by UPPERTITRESERIE, TITRESerie, ID_Serie''');
  Query.Script.Add('  into :TITRESerie,');
  Query.Script.Add('       :ID_Serie,');
  Query.Script.Add('       :countSerie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('     ''select');
  Query.Script.Add('             TITRESerie,');
  Query.Script.Add('             ID_Serie,');
  Query.Script.Add('             Count(ID_ALBUM)');
  Query.Script.Add('      from vw_liste_albums');
  Query.Script.Add('      where TITRESerie is not null '' || SWHERE ||');
  Query.Script.Add('    '' group by UPPERTITRESERIE, TITRESerie, ID_Serie''');
  Query.Script.Add('  into :TITRESerie,');
  Query.Script.Add('       :ID_Serie,');
  Query.Script.Add('       :countSerie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE SERIES_PARABD (');
  Query.Script.Add('    FILTRE VARCHAR(125))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    COUNTSERIE INTEGER,');
  Query.Script.Add('    ID_SERIE CHAR(38))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE SWHERE VARCHAR(132);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then swhere = ''AND '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('     ''select');
  Query.Script.Add('             CAST(''''-1'''' AS VARCHAR(150)),');
  Query.Script.Add('             ID_Serie,');
  Query.Script.Add('             Count(ID_PARABD)');
  Query.Script.Add('      from vw_liste_PARABD');
  Query.Script.Add('      where TITRESerie is null '' || SWHERE ||');
  Query.Script.Add('    '' group by UPPERTITRESERIE, TITRESerie, ID_Serie''');
  Query.Script.Add('  into :TITRESerie,');
  Query.Script.Add('       :ID_Serie,');
  Query.Script.Add('       :countSerie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('     ''select');
  Query.Script.Add('             TITRESerie,');
  Query.Script.Add('             ID_Serie,');
  Query.Script.Add('             Count(ID_PARABD)');
  Query.Script.Add('      from vw_liste_PARABD');
  Query.Script.Add('      where TITRESerie is not null '' || SWHERE ||');
  Query.Script.Add('    '' group by UPPERTITRESERIE, TITRESerie, ID_Serie''');
  Query.Script.Add('  into :TITRESerie,');
  Query.Script.Add('       :ID_Serie,');
  Query.Script.Add('       :countSerie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER TRIGGER ALBUMS_DV');
  Query.Script.Add('ACTIVE BEFORE INSERT OR UPDATE POSITION 0');
  Query.Script.Add('AS');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.TitreAlbum is null) then begin');
  Query.Script.Add('    new.UpperTitreAlbum = null;');
  Query.Script.Add('    new.SoundexTitreAlbum = null;');
  Query.Script.Add('    new.initialetitreAlbum = null;');
  Query.Script.Add('  end else');
  Query.Script.Add('  if (inserting or old.TitreAlbum is null or new.TitreAlbum <> old.TitreAlbum) then begin');
  Query.Script.Add('    new.UpperTitreAlbum = UDF_UPPER(new.TitreAlbum);');
  Query.Script.Add('    new.SoundexTitreAlbum = UDF_SOUNDEX(new.TitreAlbum, 1);');
  Query.Script.Add('    select initiale from get_initiale(new.UpperTitreAlbum) into new.initialetitreAlbum;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER TRIGGER PARABD_DV');
  Query.Script.Add('ACTIVE BEFORE INSERT OR UPDATE POSITION 0');
  Query.Script.Add('AS');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.TitreParaBD is null) then begin');
  Query.Script.Add('    new.UpperTitreParaBD = null;');
  Query.Script.Add('    new.SoundexTitreParaBD = null;');
  Query.Script.Add('    new.initialetitreParaBD = null;');
  Query.Script.Add('  end else');
  Query.Script.Add('  if (inserting or old.TitreParaBD is null or new.TitreParaBD <> old.TitreParaBD) then begin');
  Query.Script.Add('    new.UpperTitrePARABD = UDF_UPPER(new.TitrePARABD);');
  Query.Script.Add('    new.SoundexTitrePARABD = UDF_SOUNDEX(new.TitrePARABD, 1);');
  Query.Script.Add('    select initiale from get_initiale(new.UpperTitrePARABD) into new.initialetitrePARABD;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.ExecuteScript;
end;

procedure NouveauxIndex(Query: TUIBScript);
begin
  Query.Script.Clear;

  Query.Script.Add('CREATE INDEX SERIES_IDX1 ON SERIES (INITIALETITRESERIE);');
  Query.Script.Add('CREATE INDEX SERIES_IDX2 ON SERIES (TERMINEE);');
  Query.Script.Add('CREATE INDEX SERIES_IDX3 ON SERIES (ID_COLLECTION);');
  Query.Script.Add('CREATE INDEX SERIES_IDX4 ON SERIES (ID_EDITEUR);');
  Query.Script.Add('CREATE INDEX EDITEURS_IDX2 ON EDITEURS (INITIALENOMEDITEUR);');
  Query.Script.Add('CREATE INDEX GENRES_IDX3 ON GENRES (INITIALEGENRE);');
  Query.Script.Add('CREATE INDEX PERSONNES_IDX2 ON PERSONNES (INITIALENOMPERSONNE);');
  Query.Script.Add('CREATE INDEX ALBUMS_IDX4 ON ALBUMS (HORSSERIE,INTEGRALE,ID_SERIE,ACHAT);');
  Query.Script.Add('CREATE INDEX ALBUMS_IDX5 ON ALBUMS (TOME,HORSSERIE,INTEGRALE,ID_SERIE);');
  Query.Script.Add('CREATE INDEX ALBUMS_IDX6 ON ALBUMS (TOMEDEBUT,TOMEFIN,HORSSERIE,INTEGRALE,ID_SERIE);');
  Query.Script.Add('CREATE INDEX ALBUMS_IDX7 ON ALBUMS (ANNEEPARUTION,HORSSERIE,INTEGRALE,ACHAT);');
  Query.Script.Add('CREATE INDEX ALBUMS_IDX8 ON ALBUMS (ID_SERIE);');
  Query.Script.Add('CREATE INDEX EDITIONS_IDX1 ON EDITIONS (ID_COLLECTION);');
  Query.Script.Add('CREATE INDEX EDITIONS_IDX2 ON EDITIONS (ETAT);');
  Query.Script.Add('CREATE INDEX EDITIONS_IDX3 ON EDITIONS (RELIURE);');
  Query.Script.Add('CREATE INDEX EDITIONS_IDX4 ON EDITIONS (TYPEEDITION);');
  Query.Script.Add('CREATE INDEX EDITIONS_IDX5 ON EDITIONS (ORIENTATION);');
  Query.Script.Add('CREATE INDEX EDITIONS_IDX6 ON EDITIONS (FORMATEDITION);');
  Query.Script.Add('CREATE INDEX COUVERTURES_IDX2 ON COUVERTURES (ID_EDITION);');
  Query.Script.Add('CREATE INDEX COUVERTURES_IDX3 ON COUVERTURES (CATEGORIEIMAGE);');
  Query.Script.Add('CREATE INDEX PARABD_IDX1 ON PARABD (CATEGORIEPARABD);');
  Query.Script.Add('CREATE INDEX PARABD_IDX2 ON PARABD (ID_SERIE);');

  Query.Script.Add('ALTER PROCEDURE DIRECTORYCONTENT (');
  Query.Script.Add('    CHEMIN VARCHAR(255),');
  Query.Script.Add('    SEARCHATTR INTEGER)');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    SEARCHREC INTEGER,');
  Query.Script.Add('    FILENAME VARCHAR(255),');
  Query.Script.Add('    FILESIZE INTEGER,');
  Query.Script.Add('    FILEATTR INTEGER)');
  Query.Script.Add('AS');
  Query.Script.Add('begin');
  Query.Script.Add('  select udf_findfilefirst(:chemin, :searchattr) from rdb$database into :searchrec;');
  Query.Script.Add('  if (searchrec < 0) then');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  else while (searchrec > 0) do begin');
  Query.Script.Add('    select');
  Query.Script.Add('      cast(udf_extractfilename(:searchrec) as varchar(255)),');
  Query.Script.Add('      udf_extractfilesize(:searchrec),');
  Query.Script.Add('      udf_extractfileattr(:searchrec)');
  Query.Script.Add('    from rdb$database');
  Query.Script.Add('    into');
  Query.Script.Add('      :FileName,');
  Query.Script.Add('      :FileSIZE,');
  Query.Script.Add('      :FileATTR;');
  Query.Script.Add('    select udf_findfilenext(:searchrec) from rdb$database into :searchrec;');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE PROC_AUTEURS (');
  Query.Script.Add('    ALBUM CHAR(38),');
  Query.Script.Add('    SERIE CHAR(38),');
  Query.Script.Add('    PARABD CHAR(38))');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    ID_PERSONNE CHAR(38),');
  Query.Script.Add('    NOMPERSONNE VARCHAR(150),');
  Query.Script.Add('    ID_ALBUM CHAR(38),');
  Query.Script.Add('    ID_SERIE CHAR(38),');
  Query.Script.Add('    ID_PARABD CHAR(38),');
  Query.Script.Add('    METIER SMALLINT)');
  Query.Script.Add('AS');
  Query.Script.Add('begin');
  Query.Script.Add('  if (Album is not null) then');
  Query.Script.Add('    for select p.ID_PERSONNE,');
  Query.Script.Add('               p.nompersonne,');
  Query.Script.Add('               a.id_album,');
  Query.Script.Add('               NULL,');
  Query.Script.Add('               NULL,');
  Query.Script.Add('               a.metier');
  Query.Script.Add('        from personnes p inner join auteurs a on a.id_personne = p.ID_PERSONNE');
  Query.Script.Add('        where a.id_album = :ALBUM');
  Query.Script.Add('        order by a.metier, p.uppernompersonne');
  Query.Script.Add('        into :ID_PERSONNE,');
  Query.Script.Add('             :NOMPERSONNE,');
  Query.Script.Add('             :ID_ALBUM,');
  Query.Script.Add('             :ID_SERIE,');
  Query.Script.Add('             :ID_PARABD,');
  Query.Script.Add('             :METIER');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('');
  Query.Script.Add('  if (Serie is not null) then');
  Query.Script.Add('    for select p.ID_PERSONNE,');
  Query.Script.Add('               p.nompersonne,');
  Query.Script.Add('               NULL,');
  Query.Script.Add('               a.id_serie,');
  Query.Script.Add('               NULL,');
  Query.Script.Add('               a.metier');
  Query.Script.Add('        from personnes p inner join auteurs_series a on a.id_personne = p.ID_PERSONNE');
  Query.Script.Add('        where a.id_serie = :SERIE');
  Query.Script.Add('        order by a.metier, p.uppernompersonne');
  Query.Script.Add('        into :ID_PERSONNE,');
  Query.Script.Add('             :NOMPERSONNE,');
  Query.Script.Add('             :ID_ALBUM,');
  Query.Script.Add('             :ID_SERIE,');
  Query.Script.Add('             :ID_PARABD,');
  Query.Script.Add('             :METIER');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('');
  Query.Script.Add('  if (ParaBD is not null) then');
  Query.Script.Add('    for select p.ID_PERSONNE,');
  Query.Script.Add('               p.nompersonne,');
  Query.Script.Add('               NULL,');
  Query.Script.Add('               NULL,');
  Query.Script.Add('               a.id_parabd,');
  Query.Script.Add('               cast(NULL as smallint)');
  Query.Script.Add('        from personnes p inner join auteurs_parabd a on a.id_personne = p.ID_PERSONNE');
  Query.Script.Add('        where a.id_parabd = :PARABD');
  Query.Script.Add('        order by p.uppernompersonne');
  Query.Script.Add('        into :ID_PERSONNE,');
  Query.Script.Add('             :NOMPERSONNE,');
  Query.Script.Add('             :ID_ALBUM,');
  Query.Script.Add('             :ID_SERIE,');
  Query.Script.Add('             :ID_PARABD,');
  Query.Script.Add('             :METIER');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('end;');

  Query.ExecuteScript;
end;

procedure MAJ1_2_0_8(Query: TUIBScript);
begin
  PrepareDatabase(Query);
  Query.Script.Clear;

  Query.Script.Add('ALTER TABLE ALBUMS DROP ID_SERIE, ALTER NEWID_SERIE TO ID_SERIE;');
  Query.Script.Add('ALTER TABLE PARABD DROP ID_SERIE, ALTER NEWID_SERIE TO ID_SERIE;');

  Query.ExecuteScript;
  ResetDatabase(Query);
  NouveauxIndex(Query);
end;

initialization

RegisterFBUpdate('1.2.0.8', @MAJ1_2_0_8);

end.
