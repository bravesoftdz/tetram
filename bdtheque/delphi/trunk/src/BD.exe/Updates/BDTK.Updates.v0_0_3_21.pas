unit BDTK.Updates.v0_0_3_21;

interface

implementation

uses
  UIB, BDTK.Updates;

procedure MAJ0_0_3_21(Query: TUIBScript);
begin
  Query.Script.Clear;

  Query.Script.Add('ALTER TABLE ALBUMS ADD ACHAT T_YESNO_BASENO;');
  Query.Script.Add('UPDATE ALBUMS SET ACHAT = 0 WHERE ACHAT IS NULL;');

  Query.Script.Add('ALTER PROCEDURE LISTE_TOMES (');
  Query.Script.Add('    WITHINTEGRALE SMALLINT,');
  Query.Script.Add('    IN_REFSERIE INTEGER)');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    REFSERIE INTEGER,');
  Query.Script.Add('    TOME SMALLINT,');
  Query.Script.Add('    INTEGRALE SMALLINT,');
  Query.Script.Add('    ACHAT SMALLINT)');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE TOMEDEBUT INTEGER;');
  Query.Script.Add('DECLARE VARIABLE TOMEFIN INTEGER;');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select refserie, tome, integrale, achat');
  Query.Script.Add('    from albums');
  Query.Script.Add('    where TOME is not null and integrale = 0 and horsserie = 0');
  Query.Script.Add('          and (:in_refserie is null or refserie = :in_refserie)');
  Query.Script.Add('    order by refserie, tome');
  Query.Script.Add('    into :REFSERIE, :TOME, :INTEGRALE, :ACHAT');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('');
  Query.Script.Add('  if (withintegrale is null) then withintegrale = 1;');
  Query.Script.Add('  if (withintegrale = 1) then');
  Query.Script.Add('    for');
  Query.Script.Add('      select refserie, tomedebut, tomefin, integrale, achat');
  Query.Script.Add('      from albums');
  Query.Script.Add('      where TOMEDEBUT is not null and TOMEFIN is not null and integrale = 1 and horsserie = 0');
  Query.Script.Add('            and (:in_refserie is null or refserie = :in_refserie)');
  Query.Script.Add('      order by refserie, tomedebut, tomefin');
  Query.Script.Add('      into :REFSERIE, :TOMEDEBUT, :TOMEFIN, :INTEGRALE, :ACHAT');
  Query.Script.Add('      do begin');
  Query.Script.Add('        TOME = TOMEDEBUT - 1;');
  Query.Script.Add('        while (TOME <> TOMEFIN) do begin');
  Query.Script.Add('          TOME = TOME + 1;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('        end');
  Query.Script.Add('      end');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE ALBUMS_MANQUANTS (');
  Query.Script.Add('    WITHINTEGRALE SMALLINT,');
  Query.Script.Add('    WITHACHAT SMALLINT,');
  Query.Script.Add('    IN_REFSERIE INTEGER)');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    REFSERIE INTEGER,');
  Query.Script.Add('    COUNTSERIE INTEGER,');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    UPPERTITRESERIE VARCHAR(150),');
  Query.Script.Add('    TOME INTEGER,');
  Query.Script.Add('    REFEDITEUR INTEGER,');
  Query.Script.Add('    NOMEDITEUR VARCHAR(50),');
  Query.Script.Add('    REFCOLLECTION INTEGER,');
  Query.Script.Add('    NOMCOLLECTION VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE MAXSERIE INTEGER;');
  Query.Script.Add('DECLARE VARIABLE CURRENTTOME Integer;');
  Query.Script.Add('DECLARE VARIABLE OWNEDTOME Integer;');
  Query.Script.Add('DECLARE VARIABLE ACHAT Smallint;');
  Query.Script.Add('DECLARE VARIABLE SUMACHAT Integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (WITHINTEGRALE is null) then WITHINTEGRALE = 1;');
  Query.Script.Add('  if (WITHACHAT is null) then WITHACHAT = 1;');
  Query.Script.Add('  for select');
  Query.Script.Add('        A.REFSERIE,');
  Query.Script.Add('        max(TOME),');
  Query.Script.Add('        count(distinct TOME),');
  Query.Script.Add('        sum(ACHAT),');
  Query.Script.Add('        S.REFEDITEUR,');
  Query.Script.Add('        NOMEDITEUR,');
  Query.Script.Add('        S.REFCOLLECTION,');
  Query.Script.Add('        NOMCOLLECTION');
  Query.Script.Add('      from liste_tomes(:WITHINTEGRALE, :in_refserie) A');
  Query.Script.Add('         inner join SERIES S on A.REFSERIE = S.REFSERIE');
  Query.Script.Add('         left join EDITEURS E on S.REFEDITEUR = E.REFEDITEUR');
  Query.Script.Add('         left join COLLECTIONS C on S.REFCOLLECTION = C.REFCOLLECTION');
  Query.Script.Add('      where S.COMPLETE = 0');
  Query.Script.Add('      group by A.REFSERIE, UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION,');
  Query.Script.Add('               S.REFEDITEUR, NOMEDITEUR, S.REFCOLLECTION, NOMCOLLECTION');
  Query.Script.Add('      order by UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION');
  Query.Script.Add('      into');
  Query.Script.Add('        :REFSERIE,');
  Query.Script.Add('        :MAXSERIE,');
  Query.Script.Add('        :COUNTSERIE,');
  Query.Script.Add('        :SUMACHAT,');
  Query.Script.Add('        :REFEDITEUR,');
  Query.Script.Add('        :NOMEDITEUR,');
  Query.Script.Add('        :REFCOLLECTION,');
  Query.Script.Add('        :NOMCOLLECTION');
  Query.Script.Add('  do begin');
  Query.Script.Add('    if (WITHACHAT = 0) then');
  Query.Script.Add('      COUNTSERIE = COUNTSERIE - SUMACHAT;');
  Query.Script.Add('    if (COUNTSERIE <> MAXSERIE) then begin');
  Query.Script.Add('      CURRENTTOME = 0;');
  Query.Script.Add('      for select distinct');
  Query.Script.Add('            UPPERTITRESERIE,');
  Query.Script.Add('            TITRESERIE,');
  Query.Script.Add('            TOME,');
  Query.Script.Add('            ACHAT');
  Query.Script.Add('          from liste_tomes(:WITHINTEGRALE, :REFSERIE) A inner join SERIES S on A.REFSERIE = S.REFSERIE');
  Query.Script.Add('          order by TOME');
  Query.Script.Add('          into');
  Query.Script.Add('            :UPPERTITRESERIE,');
  Query.Script.Add('            :TITRESERIE,');
  Query.Script.Add('            :OWNEDTOME,');
  Query.Script.Add('            :ACHAT');
  Query.Script.Add('      do begin');
  Query.Script.Add('        CURRENTTOME = CURRENTTOME + 1;');
  Query.Script.Add('        while ((CURRENTTOME <> OWNEDTOME) and (CURRENTTOME < MAXSERIE)) do begin');
  Query.Script.Add('          TOME = CURRENTTOME;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('          CURRENTTOME = CURRENTTOME + 1;');
  Query.Script.Add('        end');
  Query.Script.Add('        if ((WITHACHAT = 0) AND (ACHAT = 1)) then begin');
  Query.Script.Add('          TOME = OWNEDTOME;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('        end');
  Query.Script.Add('      end');
  Query.Script.Add('    end');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('CREATE PROCEDURE CALCUL_ANNEE_SORTIE (');
  Query.Script.Add('    WITHACHAT SMALLINT,');
  Query.Script.Add('    IN_REFSERIE INTEGER,');
  Query.Script.Add('    SOMMEPONDEREE INTEGER,');
  Query.Script.Add('    COMPTEALBUM INTEGER,');
  Query.Script.Add('    MAXTOME INTEGER,');
  Query.Script.Add('    MAXANNEE INTEGER)');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    REFSERIE INTEGER,');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    UPPERTITRESERIE VARCHAR(150),');
  Query.Script.Add('    TOME INTEGER,');
  Query.Script.Add('    ANNEEPARUTION INTEGER,');
  Query.Script.Add('    REFEDITEUR INTEGER,');
  Query.Script.Add('    NOMEDITEUR VARCHAR(50),');
  Query.Script.Add('    REFCOLLECTION INTEGER,');
  Query.Script.Add('    NOMCOLLECTION VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE MAXTOME2 INTEGER;');
  Query.Script.Add('begin');
  Query.Script.Add('  tome = maxtome + 1;');
  Query.Script.Add('');
  Query.Script.Add('  select max(tomefin) + 1 from albums');
  Query.Script.Add('  where horsserie = 0 and integrale = 1 and refserie = :in_refserie and (:withachat = 1 or achat = 0)');
  Query.Script.Add('  into');
  Query.Script.Add('    :MAXTOME2;');
  Query.Script.Add('');
  Query.Script.Add('  if (maxtome2 > tome) then tome = maxtome2;');
  Query.Script.Add('');
  Query.Script.Add('  select s.RefSerie, s.TitreSerie, s.UpperTitreSerie, e.RefEditeur, e.NomEditeur, c.RefCollection, c.NomCollection from');
  Query.Script.Add('    series s left join editeurs e on e.refediteur = s.refediteur');
  Query.Script.Add('             left join collections c on c.refcollection = s.refcollection');
  Query.Script.Add('  where s.RefSerie = :in_refserie');
  Query.Script.Add('  into');
  Query.Script.Add('    :REFSERIE,');
  Query.Script.Add('    :TITRESERIE,');
  Query.Script.Add('    :UPPERTITRESERIE,');
  Query.Script.Add('    :REFEDITEUR,');
  Query.Script.Add('    :NOMEDITEUR,');
  Query.Script.Add('    :REFCOLLECTION,');
  Query.Script.Add('    :NOMCOLLECTION;');
  Query.Script.Add('');
  Query.Script.Add('  ANNEEPARUTION = maxannee + ((tome - maxtome) * (sommeponderee / comptealbum));');
  Query.Script.Add('  suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE PREVISIONS_SORTIES (');
  Query.Script.Add('    WITHACHAT SMALLINT,');
  Query.Script.Add('    IN_REFSERIE INTEGER)');
  Query.Script.Add('RETURNS (');
  Query.Script.Add('    REFSERIE INTEGER,');
  Query.Script.Add('    TITRESERIE VARCHAR(150),');
  Query.Script.Add('    UPPERTITRESERIE VARCHAR(150),');
  Query.Script.Add('    TOME INTEGER,');
  Query.Script.Add('    ANNEEPARUTION INTEGER,');
  Query.Script.Add('    REFEDITEUR INTEGER,');
  Query.Script.Add('    NOMEDITEUR VARCHAR(50),');
  Query.Script.Add('    REFCOLLECTION INTEGER,');
  Query.Script.Add('    NOMCOLLECTION VARCHAR(50))');
  Query.Script.Add('AS');
  Query.Script.Add('DECLARE VARIABLE CURRENTREFSERIE INTEGER;');
  Query.Script.Add('DECLARE VARIABLE OLDREFSERIE Integer;');
  Query.Script.Add('DECLARE VARIABLE CURRENTTOME Integer;');
  Query.Script.Add('DECLARE VARIABLE SOMMEPONDEREE Integer;');
  Query.Script.Add('DECLARE VARIABLE COMPTEALBUM Integer;');
  Query.Script.Add('DECLARE VARIABLE CURRENTANNEE Integer;');
  Query.Script.Add('DECLARE VARIABLE TOMEPRECEDENT Integer;');
  Query.Script.Add('DECLARE VARIABLE ANNEEPRECEDENTE Integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (withachat is Null) then withachat = 1;');
  Query.Script.Add('  oldrefserie = -1;');
  Query.Script.Add('  tomeprecedent = -1;');
  Query.Script.Add('  anneeprecedente = -1;');
  Query.Script.Add('  for select TOME, ANNEEPARUTION, s.RefSerie');
  Query.Script.Add('      from albums a inner join series s on s.refserie = a.refserie');
  Query.Script.Add('      where (s.terminee is null or s.terminee <> 1)');
  Query.Script.Add('            and a.horsserie = 0 and a.integrale = 0 and a.anneeparution is not null');
  Query.Script.Add('            and (:in_refserie is null or s.refserie = :in_refserie)');
  Query.Script.Add('            and (:withachat = 1 or achat = 0)');
  Query.Script.Add('      order by s.refserie, TOME');
  Query.Script.Add('      into :CURRENTTOME, :CURRENTANNEE, :CURRENTREFSERIE');
  Query.Script.Add('  do begin');
  Query.Script.Add('    if (currentrefserie <> oldrefserie) then begin');
  Query.Script.Add('');
  Query.Script.Add('      if (oldrefserie <> -1 and comptealbum > 0) then begin');
  Query.Script.Add('        select REFSERIE, TITRESERIE, UPPERTITRESERIE,');
  Query.Script.Add('               TOME, ANNEEPARUTION,');
  Query.Script.Add('               REFEDITEUR, NOMEDITEUR,');
  Query.Script.Add('               REFCOLLECTION, NOMCOLLECTION');
  Query.Script.Add('        from CALCUL_ANNEE_SORTIE(:withachat, :oldrefserie, :sommeponderee, :comptealbum, :tomeprecedent, :anneeprecedente)');
  Query.Script.Add('        into :REFSERIE, :TITRESERIE, :UPPERTITRESERIE,');
  Query.Script.Add('             :TOME, :ANNEEPARUTION,');
  Query.Script.Add('             :REFEDITEUR, :NOMEDITEUR,');
  Query.Script.Add('             :REFCOLLECTION, :NOMCOLLECTION;');
  Query.Script.Add('        suspend;');
  Query.Script.Add('      end');
  Query.Script.Add('');
  Query.Script.Add('      oldrefserie = currentrefserie;');
  Query.Script.Add('      sommeponderee = 0;');
  Query.Script.Add('      comptealbum = 0;');
  Query.Script.Add('      tomeprecedent = -1;');
  Query.Script.Add('      anneeprecedente = -1;');
  Query.Script.Add('    end');
  Query.Script.Add('    if (tomeprecedent <> -1) then begin');
  Query.Script.Add('      /* non pondéré: sommeponderee = sommeponderee + ((CURRENTANNEE - ANNEEPRECEDENTE) / (CURRENTTOME - TOMEPRECEDENT)); */');
  Query.Script.Add('      sommeponderee = sommeponderee + ((CURRENTANNEE - ANNEEPRECEDENTE) / (CURRENTTOME - TOMEPRECEDENT)) * CURRENTTOME;');
  Query.Script.Add('      /* non pondéré: comptealbum = comptealbum + 1;*/');
  Query.Script.Add('      comptealbum = comptealbum + CURRENTTOME;');
  Query.Script.Add('    end');
  Query.Script.Add('    tomeprecedent = CURRENTTOME;');
  Query.Script.Add('    anneeprecedente = CURRENTANNEE;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (oldrefserie <> -1 and comptealbum > 0) then begin');
  Query.Script.Add('    select REFSERIE, TITRESERIE, UPPERTITRESERIE,');
  Query.Script.Add('           TOME, ANNEEPARUTION,');
  Query.Script.Add('           REFEDITEUR, NOMEDITEUR,');
  Query.Script.Add('           REFCOLLECTION, NOMCOLLECTION');
  Query.Script.Add('    from CALCUL_ANNEE_SORTIE(:withachat, :oldrefserie, :sommeponderee, :comptealbum, :tomeprecedent, :anneeprecedente)');
  Query.Script.Add('    into :REFSERIE, :TITRESERIE, :UPPERTITRESERIE,');
  Query.Script.Add('         :TOME, :ANNEEPARUTION,');
  Query.Script.Add('         :REFEDITEUR, :NOMEDITEUR,');
  Query.Script.Add('         :REFCOLLECTION, :NOMCOLLECTION;');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.ExecuteScript;
end;

initialization

RegisterFBUpdate('0.0.3.21', @MAJ0_0_3_21);

end.
