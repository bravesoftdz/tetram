unit BDTK.Updates.v1_2_2_0;

interface

implementation

uses UIB, BDTK.Updates;

procedure MAJ1_2_2_0(Query: TUIBScript);
begin
  Query.Script.Clear;

  Query.Script.Add('ALTER TABLE SERIES ADD SUIVREMANQUANTS T_YESNO_BASEYES, ADD SUIVRESORTIES T_YESNO_BASEYES;');

  Query.Script.Add('UPDATE SERIES SET SUIVREMANQUANTS = 1 - COALESCE(COMPLETE, 0), SUIVRESORTIES = 1 - COALESCE(TERMINEE, 0);');

  Query.Script.Add('ALTER PROCEDURE ALBUMS_MANQUANTS (');
  Query.Script.Add('    withintegrale smallint,');
  Query.Script.Add('    withachat smallint,');
  Query.Script.Add('    in_idserie char(38))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_serie char(38),');
  Query.Script.Add('    countserie integer,');
  Query.Script.Add('    titreserie varchar(150),');
  Query.Script.Add('    uppertitreserie varchar(150),');
  Query.Script.Add('    tome integer,');
  Query.Script.Add('    id_editeur char(38),');
  Query.Script.Add('    nomediteur varchar(50),');
  Query.Script.Add('    id_collection char(38),');
  Query.Script.Add('    nomcollection varchar(50))');
  Query.Script.Add('as');
  Query.Script.Add('declare variable maxserie integer;');
  Query.Script.Add('declare variable currenttome integer;');
  Query.Script.Add('declare variable ownedtome integer;');
  Query.Script.Add('declare variable achat smallint;');
  Query.Script.Add('declare variable sumachat integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (WITHINTEGRALE is null) then WITHINTEGRALE = 1;');
  Query.Script.Add('  if (WITHACHAT is null) then WITHACHAT = 1;');
  Query.Script.Add('  for select');
  Query.Script.Add('        A.id_serie,');
  Query.Script.Add('        max(TOME),');
  Query.Script.Add('        count(distinct TOME),');
  Query.Script.Add('        cast(sum(ACHAT) as integer),');
  Query.Script.Add('        S.id_editeur,');
  Query.Script.Add('        NOMEDITEUR,');
  Query.Script.Add('        S.id_collection,');
  Query.Script.Add('        NOMCOLLECTION');
  Query.Script.Add('      from liste_tomes(:WITHINTEGRALE, :in_idserie) A');
  Query.Script.Add('         /* pas de left join: on cherche les manquants pour compléter les séries */');
  Query.Script.Add('         inner join SERIES S on A.ID_SERIE = S.ID_SERIE');
  Query.Script.Add('         left join EDITEURS E on S.ID_EDITEUR = E.ID_EDITEUR');
  Query.Script.Add('         left join COLLECTIONS C on S.id_collection = C.ID_COLLECTION');
  Query.Script.Add('      where S.SUIVREMANQUANTS = 1');
  Query.Script.Add('      group by A.id_serie, UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION,');
  Query.Script.Add('               S.id_editeur, NOMEDITEUR, S.id_collection, NOMCOLLECTION');
  Query.Script.Add('      order by UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION');
  Query.Script.Add('      into');
  Query.Script.Add('        :ID_SERIE,');
  Query.Script.Add('        :MAXSERIE,');
  Query.Script.Add('        :COUNTSERIE,');
  Query.Script.Add('        :SUMACHAT,');
  Query.Script.Add('        :ID_EDITEUR,');
  Query.Script.Add('        :NOMEDITEUR,');
  Query.Script.Add('        :ID_COLLECTION,');
  Query.Script.Add('        :NOMCOLLECTION');
  Query.Script.Add('  do begin');
  Query.Script.Add('    if (WITHACHAT = 0) then');
  Query.Script.Add('      COUNTSERIE = COUNTSERIE - SUMACHAT;');
  Query.Script.Add('    if (COUNTSERIE <> MAXSERIE) then begin');
  Query.Script.Add('      CURRENTTOME = 0;');
  Query.Script.Add('      for select distinct');
  Query.Script.Add('            UPPERTITRESERIE,');
  Query.Script.Add('            TITRESERIE,');
  Query.Script.Add('            TOME,');
  Query.Script.Add('            ACHAT');
  Query.Script.Add('          from liste_tomes(:WITHINTEGRALE, :ID_SERIE) A inner join SERIES S on A.ID_SERIE = S.ID_SERIE');
  Query.Script.Add('          order by TOME');
  Query.Script.Add('          into');
  Query.Script.Add('            :UPPERTITRESERIE,');
  Query.Script.Add('            :TITRESERIE,');
  Query.Script.Add('            :OWNEDTOME,');
  Query.Script.Add('            :ACHAT');
  Query.Script.Add('      do begin');
  Query.Script.Add('        CURRENTTOME = CURRENTTOME + 1;');
  Query.Script.Add('        while ((CURRENTTOME <> OWNEDTOME) and (CURRENTTOME < MAXSERIE)) do begin');
  Query.Script.Add('          TOME = CURRENTTOME;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('          CURRENTTOME = CURRENTTOME + 1;');
  Query.Script.Add('        end');
  Query.Script.Add('        if ((WITHACHAT = 0) AND (ACHAT = 1)) then begin');
  Query.Script.Add('          TOME = OWNEDTOME;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('        end');
  Query.Script.Add('      end');
  Query.Script.Add('    end');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('ALTER PROCEDURE PREVISIONS_SORTIES (');
  Query.Script.Add('    withachat smallint,');
  Query.Script.Add('    in_id_serie char(38))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_serie char(38),');
  Query.Script.Add('    titreserie varchar(150),');
  Query.Script.Add('    uppertitreserie varchar(150),');
  Query.Script.Add('    tome integer,');
  Query.Script.Add('    anneeparution integer,');
  Query.Script.Add('    moisparution integer,');
  Query.Script.Add('    id_editeur char(38),');
  Query.Script.Add('    nomediteur varchar(50),');
  Query.Script.Add('    id_collection char(38),');
  Query.Script.Add('    nomcollection varchar(50))');
  Query.Script.Add('as');
  Query.Script.Add('declare variable currentidserie char(38) character set none;');
  Query.Script.Add('declare variable oldidserie char(38) character set none;');
  Query.Script.Add('declare variable currenttome integer;');
  Query.Script.Add('declare variable sommeponderee integer;');
  Query.Script.Add('declare variable comptealbum integer;');
  Query.Script.Add('declare variable currentannee integer;');
  Query.Script.Add('declare variable currentmois integer;');
  Query.Script.Add('declare variable tomeprecedent integer;');
  Query.Script.Add('declare variable anneeprecedente integer;');
  Query.Script.Add('declare variable moisprecedent integer;');
  Query.Script.Add('declare variable diffmois integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (withachat is Null) then withachat = 1;');
  Query.Script.Add('  oldidserie = NULL;');
  Query.Script.Add('  tomeprecedent = -1;');
  Query.Script.Add('  anneeprecedente = -1;');
  Query.Script.Add('  moisprecedent = null;');
  Query.Script.Add('  for select TOME, ANNEEPARUTION, MOISPARUTION, s.ID_SERIE');
  Query.Script.Add('      /* pas de left join: on calcul les prévisions de sorties des nouveautés des séries */');
  Query.Script.Add('      from albums a inner join series s on s.ID_SERIE = a.id_serie');
  Query.Script.Add('      where s.suivresorties = 1');
  Query.Script.Add('            and a.horsserie = 0 and a.integrale = 0 and a.anneeparution is not null');
  Query.Script.Add('            and (:in_id_serie is null or s.ID_SERIE = :in_id_serie)');
  Query.Script.Add('            and (:withachat = 1 or achat = 0)');
  Query.Script.Add('      order by s.ID_SERIE, TOME');
  Query.Script.Add('      into :CURRENTTOME, :CURRENTANNEE, :CURRENTMOIS, :currentidserie');
  Query.Script.Add('  do begin');
  Query.Script.Add('    if (oldidserie is null or currentidserie <> oldidserie) then begin');
  Query.Script.Add('');
  Query.Script.Add('      if (oldidserie IS NOT NULL and comptealbum > 0) then begin');
  Query.Script.Add('        select ID_SERIE, TITRESERIE, UPPERTITRESERIE,');
  Query.Script.Add('               TOME, ANNEEPARUTION, MOISPARUTION,');
  Query.Script.Add('               ID_EDITEUR, NOMEDITEUR,');
  Query.Script.Add('               ID_COLLECTION, NOMCOLLECTION');
  Query.Script.Add('        from CALCUL_ANNEE_SORTIE(:withachat, :oldidserie, :sommeponderee, :comptealbum, :tomeprecedent, :anneeprecedente, :moisprecedent)');
  Query.Script.Add('        into :ID_SERIE, :TITRESERIE, :UPPERTITRESERIE,');
  Query.Script.Add('             :TOME, :ANNEEPARUTION, :MOISPARUTION,');
  Query.Script.Add('             :ID_EDITEUR, :NOMEDITEUR,');
  Query.Script.Add('             :ID_COLLECTION, :NOMCOLLECTION;');
  Query.Script.Add('        suspend;');
  Query.Script.Add('      end');
  Query.Script.Add('');
  Query.Script.Add('      oldidserie = currentidserie;');
  Query.Script.Add('      sommeponderee = 0;');
  Query.Script.Add('      comptealbum = 0;');
  Query.Script.Add('      tomeprecedent = -1;');
  Query.Script.Add('      anneeprecedente = -1;');
  Query.Script.Add('      moisprecedent = -1;');
  Query.Script.Add('    end');
  Query.Script.Add('    if (tomeprecedent <> -1 and CURRENTTOME - TOMEPRECEDENT <> 0) then begin');
  Query.Script.Add('      if (CURRENTMOIS is null or MOISPRECEDENT is null) then');
  Query.Script.Add('        diffmois = 0;');
  Query.Script.Add('      else');
  Query.Script.Add('        diffmois = CURRENTMOIS - MOISPRECEDENT;');
  Query.Script.Add
    ('      /* non pondéré: sommeponderee = sommeponderee + (((CURRENTANNEE - ANNEEPRECEDENTE) * 12 + (COALESCE(CURRENTMOIS, 1) - COALESCE(MOISPRECEDENT, 1))) / (CURRENTTOME - TOMEPRECEDENT)); */');
  Query.Script.Add('      sommeponderee = sommeponderee + (((CURRENTANNEE - ANNEEPRECEDENTE) * 12 + diffmois) / (CURRENTTOME - TOMEPRECEDENT)) * CURRENTTOME;');
  Query.Script.Add('      /* non pondéré: comptealbum = comptealbum + 1;*/');
  Query.Script.Add('      comptealbum = comptealbum + CURRENTTOME;');
  Query.Script.Add('    end');
  Query.Script.Add('    tomeprecedent = CURRENTTOME;');
  Query.Script.Add('    anneeprecedente = CURRENTANNEE;');
  Query.Script.Add('    moisprecedent = CURRENTMOIS;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (oldidserie IS NOT NULL and comptealbum > 0) then begin');
  Query.Script.Add('    select ID_SERIE, TITRESERIE, UPPERTITRESERIE,');
  Query.Script.Add('           TOME, ANNEEPARUTION, MOISPARUTION,');
  Query.Script.Add('           ID_EDITEUR, NOMEDITEUR,');
  Query.Script.Add('           ID_COLLECTION, NOMCOLLECTION');
  Query.Script.Add('    from CALCUL_ANNEE_SORTIE(:withachat, :oldidserie, :sommeponderee, :comptealbum, :tomeprecedent, :anneeprecedente, :moisprecedent)');
  Query.Script.Add('    into :ID_SERIE, :TITRESERIE, :UPPERTITRESERIE,');
  Query.Script.Add('         :TOME, :ANNEEPARUTION, :MOISPARUTION,');
  Query.Script.Add('         :ID_EDITEUR, :NOMEDITEUR,');
  Query.Script.Add('         :ID_COLLECTION, :NOMCOLLECTION;');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.ExecuteScript;
end;

initialization

RegisterFBUpdate('1.2.2.0', @MAJ1_2_2_0);

end.
