unit BDTK.Updates.v2_1_1_155;

interface

implementation

uses
  UIB, BDTK.Updates;

procedure MAJ2_2_1_155(Query: TUIBScript);
begin
  Query.Script.Clear;

  Query.Script.Add('alter procedure achatalbums_by_editeur (');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:id_editeur = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''s.id_editeur is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''s.id_editeur = '''''' || :id_editeur || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie,');
  Query.Script.Add('      a.integrale, a.moisparution, a.anneeparution, a.notation, a.id_serie,');
  Query.Script.Add('      s.titreserie, a.achat, a.complet');
  Query.Script.Add('    from');
  Query.Script.Add('      albums a');
  Query.Script.Add('      left join series s on');
  Query.Script.Add('        a.id_serie = s.id_serie');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      coalesce(a.titrealbum, s.titreserie), s.titreserie,');
  Query.Script.Add('      a.horsserie nulls first, a.integrale nulls first, a.tome nulls first,');
  Query.Script.Add('      a.tomedebut nulls first, a.tomefin nulls first,');
  Query.Script.Add('      a.anneeparution nulls first, a.moisparution nulls first''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure albums_by_annee (');
  Query.Script.Add('    annee type of column albums.anneeparution,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(200);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:annee = -1) then swhere = ''anneeparution is null '';');
  Query.Script.Add('                   else swhere = ''anneeparution = '' || :annee || '' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_album, titrealbum, tome, tomedebut, tomefin, horsserie,');
  Query.Script.Add('      integrale, moisparution, anneeparution, notation, id_serie,');
  Query.Script.Add('      titreserie, achat, complet');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      coalesce(titrealbum, titreserie), titreserie, horsserie nulls first,');
  Query.Script.Add('      integrale nulls first, tome nulls first, tomedebut nulls first,');
  Query.Script.Add('      tomefin nulls first, anneeparution nulls first, moisparution nulls first''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure albums_by_auteur (');
  Query.Script.Add('    id_auteur type of column personnes.id_personne,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    metier type of column auteurs.metier,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(200);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie,');
  Query.Script.Add('      a.integrale, a.moisparution, a.anneeparution, a.notation, a.id_serie,');
  Query.Script.Add('      a.titreserie, au.metier, a.achat, a.complet');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums a');
  Query.Script.Add('      inner join auteurs au on');
  Query.Script.Add('        a.id_album = au.id_album');
  Query.Script.Add('    where');
  Query.Script.Add('      au.id_personne = '''''' || :id_auteur || '''''' '' || swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      titreserie, horsserie nulls first, integrale nulls first,');
  Query.Script.Add('      tome nulls first, anneeparution nulls first, moisparution nulls first,');
  Query.Script.Add('      coalesce(titrealbum, titreserie), metier''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :metier, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure albums_by_collection (');
  Query.Script.Add('    id_collection type of column collections.id_collection,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(200);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:id_collection = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''e.id_collection is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''e.id_collection = '''''' || :id_collection || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie,');
  Query.Script.Add('      a.integrale, a.moisparution, a.anneeparution, a.notation, a.id_serie,');
  Query.Script.Add('      s.titreserie, a.achat, a.complet');
  Query.Script.Add('    from');
  Query.Script.Add('      albums a');
  Query.Script.Add('      left join editions e on');
  Query.Script.Add('        a.id_album = e.id_album');
  Query.Script.Add('      left join series s on');
  Query.Script.Add('        a.id_serie = s.id_serie');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      coalesce(a.titrealbum, s.titreserie), s.titreserie,');
  Query.Script.Add('      a.horsserie nulls first, a.integrale nulls first, a.tome nulls first,');
  Query.Script.Add('      a.tomedebut nulls first, a.tomefin nulls first,');
  Query.Script.Add('      a.anneeparution nulls first, a.moisparution nulls first''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure albums_by_editeur (');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:id_editeur = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''e.id_editeur is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''e.id_editeur = '''''' || :id_editeur || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie,');
  Query.Script.Add('      a.integrale, a.moisparution, a.anneeparution, a.notation, a.id_serie,');
  Query.Script.Add('      s.titreserie, a.achat, a.complet');
  Query.Script.Add('    from');
  Query.Script.Add('      albums a');
  Query.Script.Add('      left join editions e on');
  Query.Script.Add('        a.id_album = e.id_album');
  Query.Script.Add('      left join series s on');
  Query.Script.Add('        a.id_serie = s.id_serie');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      coalesce(a.titrealbum, s.titreserie), s.titreserie,');
  Query.Script.Add('      a.horsserie nulls first, a.integrale nulls first, a.tome nulls first,');
  Query.Script.Add('      a.tomedebut nulls first, a.tomefin nulls first,');
  Query.Script.Add('      a.anneeparution nulls first, a.moisparution nulls first''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure albums_by_genre (');
  Query.Script.Add('    id_genre type of column genres.id_genre,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(200);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:id_genre = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''g.id_genre is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''g.id_genre = '''''' || :id_genre || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie,');
  Query.Script.Add('      a.integrale, a.moisparution, a.anneeparution, a.notation, a.id_serie,');
  Query.Script.Add('      a.titreserie, a.achat, a.complet');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums a');
  Query.Script.Add('      left join genreseries gs on');
  Query.Script.Add('        gs.id_serie = a.id_serie');
  Query.Script.Add('      left join genres g on');
  Query.Script.Add('        gs.id_genre = g.id_genre');
  Query.Script.Add('    where '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      coalesce(a.titrealbum, a.titreserie), a.titreserie,');
  Query.Script.Add('      a.horsserie nulls first, a.integrale nulls first, a.tome nulls first,');
  Query.Script.Add('      a.tomedebut nulls first, a.tomefin nulls first,');
  Query.Script.Add('      a.anneeparution nulls first, a.moisparution nulls first''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure albums_by_initiale (');
  Query.Script.Add('    initiale t_initiale,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = '' and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie,');
  Query.Script.Add('      a.integrale, a.moisparution, a.anneeparution, a.notation, a.id_serie,');
  Query.Script.Add('      s.titreserie, a.achat, a.complet');
  Query.Script.Add('    from');
  Query.Script.Add('      albums a');
  Query.Script.Add('      left join series s on');
  Query.Script.Add('        s.id_serie = a.id_serie');
  Query.Script.Add('    where');
  Query.Script.Add('      coalesce(a.initialetitrealbum, s.initialetitreserie) = '''''' ||: initiale || '''''' '' || swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      coalesce(a.titrealbum, s.titreserie), s.titreserie,');
  Query.Script.Add('      a.horsserie nulls first, a.integrale nulls first, a.tome nulls first,');
  Query.Script.Add('      a.tomedebut nulls first, a.tomefin nulls first,');
  Query.Script.Add('      a.anneeparution nulls first, a.moisparution nulls first''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure albums_by_serie (');
  Query.Script.Add('    in_id_serie type of column series.id_serie,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(130);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:in_id_serie = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''id_serie is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''id_serie = '''''' || :in_id_serie || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_album, titrealbum, tome, tomedebut, tomefin, horsserie,');
  Query.Script.Add('      integrale, moisparution, anneeparution, notation, id_serie,');
  Query.Script.Add('      titreserie, achat, complet');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      horsserie nulls first, integrale nulls first, tome nulls first,');
  Query.Script.Add('      anneeparution nulls first, moisparution nulls first, titrealbum''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure albums_manquants (');
  Query.Script.Add('    withintegrale type of t_yesno,');
  Query.Script.Add('    withachat type of t_yesno,');
  Query.Script.Add('    in_idserie type of column series.id_serie)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    countserie integer,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur,');
  Query.Script.Add('    id_collection type of column collections.id_collection,');
  Query.Script.Add('    nomcollection type of column collections.nomcollection,');
  Query.Script.Add('    achat type of column albums.achat)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable maxserie integer;');
  Query.Script.Add('declare variable nb_albums integer;');
  Query.Script.Add('declare variable currenttome integer;');
  Query.Script.Add('declare variable ownedtome integer;');
  Query.Script.Add('declare variable sumachat integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (withintegrale is null) then withintegrale = 1;');
  Query.Script.Add('  if (withachat is null) then withachat = 1;');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      s.id_serie, s.nb_albums, max(a.tome), count(distinct a.tome),');
  Query.Script.Add('      cast(sum(a.achat) as integer),');
  Query.Script.Add('      e.id_editeur, e.nomediteur, c.id_collection, c.nomcollection');
  Query.Script.Add('    from');
  Query.Script.Add('      liste_tomes(:withintegrale, :in_idserie) a');
  Query.Script.Add('      /* pas de left join: on cherche les manquants pour compléter les séries */');
  Query.Script.Add('      inner join series s on');
  Query.Script.Add('        a.id_serie = s.id_serie');
  Query.Script.Add('      left join editeurs e on');
  Query.Script.Add('        s.id_editeur = e.id_editeur');
  Query.Script.Add('      left join collections c on');
  Query.Script.Add('        s.id_collection = c.id_collection');
  Query.Script.Add('    where');
  Query.Script.Add('      s.suivremanquants = 1');
  Query.Script.Add('    group by');
  Query.Script.Add('      s.id_serie, s.titreserie, e.nomediteur, c.nomcollection,');
  Query.Script.Add('      e.id_editeur, c.id_collection, s.nb_albums');
  Query.Script.Add('    order by');
  Query.Script.Add('      s.titreserie, e.nomediteur, c.nomcollection');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_serie, :nb_albums, :maxserie, :countserie,');
  Query.Script.Add('      :sumachat,');
  Query.Script.Add('      :id_editeur, :nomediteur, :id_collection, :nomcollection');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (withachat = 0) then');
  Query.Script.Add('      countserie = :countserie - :sumachat;');
  Query.Script.Add('    if (nb_albums is not null and nb_albums > 0 and nb_albums > maxserie) then');
  Query.Script.Add('      maxserie = :nb_albums;');
  Query.Script.Add('    if (countserie <> maxserie) then');
  Query.Script.Add('    begin');
  Query.Script.Add('      currenttome = 0;');
  Query.Script.Add('      for');
  Query.Script.Add('        select distinct');
  Query.Script.Add('          titreserie, tome, achat');
  Query.Script.Add('        from');
  Query.Script.Add('          liste_tomes(:withintegrale, :id_serie) a');
  Query.Script.Add('          inner join series s on');
  Query.Script.Add('            a.id_serie = s.id_serie');
  Query.Script.Add('        order by');
  Query.Script.Add('          tome');
  Query.Script.Add('        into');
  Query.Script.Add('          :titreserie, :ownedtome, :achat');
  Query.Script.Add('      do');
  Query.Script.Add('      begin');
  Query.Script.Add('        currenttome = currenttome + 1;');
  Query.Script.Add('        while ((currenttome <> ownedtome) and (currenttome < maxserie)) do');
  Query.Script.Add('        begin');
  Query.Script.Add('          tome = currenttome;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('          currenttome = currenttome + 1;');
  Query.Script.Add('        end');
  Query.Script.Add('        if ((withachat = 0) and (achat = 1)) then');
  Query.Script.Add('        begin');
  Query.Script.Add('          tome = ownedtome;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('        end');
  Query.Script.Add('      end');
  Query.Script.Add('      currenttome = currenttome + 1;');
  Query.Script.Add('      while (currenttome <= maxserie) do');
  Query.Script.Add('      begin');
  Query.Script.Add('        tome = currenttome;');
  Query.Script.Add('        suspend;');
  Query.Script.Add('        currenttome = currenttome + 1;');
  Query.Script.Add('      end');
  Query.Script.Add('    end');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  /* on ne peut pas utiliser un "union": le order by de la première requête');
  Query.Script.Add('     est impératif */');
  Query.Script.Add('  countserie = 0;');
  Query.Script.Add('  achat = null;');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      s.id_serie, s.titreserie, s.nb_albums,');
  Query.Script.Add('      e.id_editeur, e.nomediteur, c.id_collection, c.nomcollection');
  Query.Script.Add('    from');
  Query.Script.Add('      series s');
  Query.Script.Add('      left join editeurs e on');
  Query.Script.Add('        s.id_editeur = e.id_editeur');
  Query.Script.Add('      left join collections c on');
  Query.Script.Add('        s.id_collection = c.id_collection');
  Query.Script.Add('    where');
  Query.Script.Add('      not exists (select 1 from liste_tomes(:withintegrale, s.id_serie))');
  Query.Script.Add('      and s.suivremanquants = 1 and s.nb_albums is not null');
  Query.Script.Add('      and (:in_idserie is null or id_serie = :in_idserie)');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_serie, :titreserie, :nb_albums,');
  Query.Script.Add('      :id_editeur, :nomediteur, :id_collection, :nomcollection');
  Query.Script.Add('  do begin');
  Query.Script.Add('    currenttome = 1;');
  Query.Script.Add('    while (currenttome <= nb_albums) do');
  Query.Script.Add('    begin');
  Query.Script.Add('      tome = currenttome;');
  Query.Script.Add('      suspend;');
  Query.Script.Add('      currenttome = currenttome + 1;');
  Query.Script.Add('    end');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure annees_albums (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    countannee integer)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(-1 as smallint), count(id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      anneeparution is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      anneeparution''');
  Query.Script.Add('  into');
  Query.Script.Add('    :anneeparution, :countannee');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      anneeparution, count(id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      anneeparution is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      anneeparution''');
  Query.Script.Add('  into');
  Query.Script.Add('    :anneeparution, :countannee');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure calcul_annee_sortie (');
  Query.Script.Add('    withachat t_yesno,');
  Query.Script.Add('    in_idserie type of column series.id_serie,');
  Query.Script.Add('    sommeponderee integer,');
  Query.Script.Add('    comptealbum integer,');
  Query.Script.Add('    maxtome type of column albums.tome,');
  Query.Script.Add('    maxannee type of column albums.anneeparution,');
  Query.Script.Add('    maxmois type of column albums.moisparution)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur,');
  Query.Script.Add('    id_collection type of column collections.id_collection,');
  Query.Script.Add('    nomcollection type of column collections.nomcollection)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable maxtome2 integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  tome = maxtome + 1;');
  Query.Script.Add('');
  Query.Script.Add('  select');
  Query.Script.Add('    cast(max(tomefin) + 1 as integer)');
  Query.Script.Add('  from');
  Query.Script.Add('    albums');
  Query.Script.Add('  where');
  Query.Script.Add('    horsserie = 0 and integrale = 1');
  Query.Script.Add('    and id_serie = :in_idserie and (:withachat = 1 or achat = 0)');
  Query.Script.Add('  into');
  Query.Script.Add('    :maxtome2;');
  Query.Script.Add('');
  Query.Script.Add('  if (maxtome2 > tome) then tome = maxtome2;');
  Query.Script.Add('');
  Query.Script.Add('  select');
  Query.Script.Add('    s.id_serie, s.titreserie,');
  Query.Script.Add('    e.id_editeur, e.nomediteur,');
  Query.Script.Add('    c.id_collection, c.nomcollection');
  Query.Script.Add('  from');
  Query.Script.Add('    series s');
  Query.Script.Add('    left join editeurs e on');
  Query.Script.Add('      e.id_editeur = s.id_editeur');
  Query.Script.Add('    left join collections c on');
  Query.Script.Add('      c.id_collection = s.id_collection');
  Query.Script.Add('  where');
  Query.Script.Add('    s.id_serie = :in_idserie');
  Query.Script.Add('  into');
  Query.Script.Add('    :id_serie, :titreserie,');
  Query.Script.Add('    :id_editeur, :nomediteur,');
  Query.Script.Add('    :id_collection, :nomcollection;');
  Query.Script.Add('');
  Query.Script.Add('  if (maxmois is null) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    anneeparution = maxannee + ((tome - maxtome) * ((sommeponderee / 12) / comptealbum));');
  Query.Script.Add('    moisparution = null;');
  Query.Script.Add('  end');
  Query.Script.Add('  else');
  Query.Script.Add('  begin');
  Query.Script.Add('    moisparution = maxmois + ((tome - maxtome) * (sommeponderee / comptealbum));');
  Query.Script.Add('    anneeparution = maxannee;');
  Query.Script.Add('    while (moisparution > 12) do');
  Query.Script.Add('    begin');
  Query.Script.Add('      moisparution = moisparution - 12;');
  Query.Script.Add('      anneeparution = anneeparution + 1;');
  Query.Script.Add('    end');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure collections_albums (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    nomcollection type of column collections.nomcollection,');
  Query.Script.Add('    countcollection integer,');
  Query.Script.Add('    id_collection type of column collections.id_collection,');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur,');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(''''-1'''' as varchar(50)), count(id_album), null, null, null');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_collections_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_collection is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      nomcollection, id_collection''');
  Query.Script.Add('    into');
  Query.Script.Add('      :nomcollection, :countcollection, :id_collection, :nomediteur, :id_editeur');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      nomcollection, count(id_album), id_collection, nomediteur, id_editeur');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_collections_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_collection is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      nomcollection, id_collection, nomediteur, id_editeur''');
  Query.Script.Add('    into');
  Query.Script.Add('      :nomcollection, :countcollection, :id_collection, :nomediteur, :id_editeur');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure collections_by_initiale (');
  Query.Script.Add('    initiale t_initiale,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_collection type of column collections.id_collection,');
  Query.Script.Add('    nomcollection type of column collections.nomcollection,');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_collection, nomcollection, id_editeur, nomediteur');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_collections');
  Query.Script.Add('    where');
  Query.Script.Add('      initialenomcollection = '''''' || :initiale || '''''' '' || swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      nomcollection''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_collection, :nomcollection, :id_editeur, :nomediteur');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure deletefile (');
  Query.Script.Add('    fichier varchar(255))');
  Query.Script.Add('returns (');
  Query.Script.Add('    result integer)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  select udf_deletefile(:fichier) from rdb$database into :result;');
  Query.Script.Add('  suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure directorycontent (');
  Query.Script.Add('    chemin varchar(255),');
  Query.Script.Add('    searchattr integer)');
  Query.Script.Add('returns (');
  Query.Script.Add('    searchrec integer,');
  Query.Script.Add('    filename varchar(255),');
  Query.Script.Add('    filesize integer,');
  Query.Script.Add('    fileattr integer)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  select udf_findfilefirst(:chemin, :searchattr) from rdb$database into :searchrec;');
  Query.Script.Add('  if (searchrec < 0) then');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  else while (searchrec > 0) do begin');
  Query.Script.Add('    select');
  Query.Script.Add('      cast(udf_extractfilename(:searchrec) as varchar(255)),');
  Query.Script.Add('      udf_extractfilesize(:searchrec),');
  Query.Script.Add('      udf_extractfileattr(:searchrec)');
  Query.Script.Add('    from rdb$database');
  Query.Script.Add('    into');
  Query.Script.Add('      :filename,');
  Query.Script.Add('      :filesize,');
  Query.Script.Add('      :fileattr;');
  Query.Script.Add('    select udf_findfilenext(:searchrec) from rdb$database into :searchrec;');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure editeurs_achatalbums (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur,');
  Query.Script.Add('    countediteur integer,');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(''''-1'''' as varchar(50)), count(id_album), null');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_editeurs_achatalbums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_editeur is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      nomediteur, id_editeur''');
  Query.Script.Add('    into');
  Query.Script.Add('      :nomediteur, :countediteur, :id_editeur');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      nomediteur, count(id_album), id_editeur');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_editeurs_achatalbums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_editeur is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      nomediteur, id_editeur''');
  Query.Script.Add('    into');
  Query.Script.Add('      :nomediteur, :countediteur, :id_editeur');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure editeurs_albums (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur,');
  Query.Script.Add('    countediteur integer,');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(''''-1'''' as varchar(50)), count(id_album), null');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_editeurs_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_editeur is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      nomediteur, id_editeur''');
  Query.Script.Add('    into');
  Query.Script.Add('      :nomediteur, :countediteur, :id_editeur');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      nomediteur, count(id_album), id_editeur');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_editeurs_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_editeur is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      nomediteur, id_editeur''');
  Query.Script.Add('    into');
  Query.Script.Add('      :nomediteur, :countediteur, :id_editeur');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure editeurs_by_initiale (');
  Query.Script.Add('    initiale t_initiale)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_editeur, nomediteur');
  Query.Script.Add('    from');
  Query.Script.Add('      editeurs');
  Query.Script.Add('    where');
  Query.Script.Add('      initialenomediteur = :initiale');
  Query.Script.Add('    order by');
  Query.Script.Add('      nomediteur');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_editeur, :nomediteur');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure emprunteurs_by_initiale (');
  Query.Script.Add('    initiale t_initiale)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_emprunteur type of column emprunteurs.id_emprunteur,');
  Query.Script.Add('    nomemprunteur type of column emprunteurs.nomemprunteur)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_emprunteur, nomemprunteur');
  Query.Script.Add('    from');
  Query.Script.Add('      emprunteurs');
  Query.Script.Add('    where');
  Query.Script.Add('      initialenomemprunteur = :initiale');
  Query.Script.Add('    order by');
  Query.Script.Add('      nomemprunteur');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_emprunteur, :nomemprunteur');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure genres_albums (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    genre type of column genres.genre,');
  Query.Script.Add('    countgenre integer,');
  Query.Script.Add('    id_genre type of column genres.id_genre)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(132);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(''''-1'''' as varchar(30)), count(id_album), null');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_genres_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_genre is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      genre, id_genre''');
  Query.Script.Add('    into');
  Query.Script.Add('      :genre, :countgenre, :id_genre');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      genre, count(id_album), id_genre');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_genres_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_genre is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      genre, id_genre''');
  Query.Script.Add('    into');
  Query.Script.Add('      :genre, :countgenre, :id_genre');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure genres_by_initiale (');
  Query.Script.Add('    initiale t_initiale)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_genre type of column genres.id_genre,');
  Query.Script.Add('    genre type of column genres.genre)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_genre, genre');
  Query.Script.Add('    from');
  Query.Script.Add('      genres');
  Query.Script.Add('    where');
  Query.Script.Add('      initialegenre = :initiale');
  Query.Script.Add('    order by');
  Query.Script.Add('      genre');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_genre, :genre');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure get_initiale (');
  Query.Script.Add('    chaine varchar(150) character set iso8859_1)');
  Query.Script.Add('returns (');
  Query.Script.Add('    initiale t_initiale)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  initiale = upper(cast(substring(:chaine from 1 for 1) as char(1)));');
  Query.Script.Add('  if (not (initiale between ''a'' and ''z'' or initiale between ''0'' and ''9'')) then');
  Query.Script.Add('    initiale = ''#'';');
  Query.Script.Add('  suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure initiales_albums (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    initialetitrealbum type of column albums.initialetitrealbum,');
  Query.Script.Add('    countinitiale integer)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''where '' || filtre;');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      coalesce(initialetitrealbum, initialetitreserie), count(id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      albums');
  Query.Script.Add('      left join series on');
  Query.Script.Add('        albums.id_serie = series.id_serie '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      1''');
  Query.Script.Add('    into');
  Query.Script.Add('      :initialetitrealbum, :countinitiale');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure initiales_collections (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    initialenomcollection type of column collections.initialenomcollection,');
  Query.Script.Add('    countinitiale integer)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(133);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''where '' || filtre;');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      initialenomcollection, count(id_collection)');
  Query.Script.Add('    from');
  Query.Script.Add('      collections '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      initialenomcollection''');
  Query.Script.Add('    into');
  Query.Script.Add('      :initialenomcollection, :countinitiale');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure liste_tomes (');
  Query.Script.Add('    withintegrale t_yesno,');
  Query.Script.Add('    in_idserie type of column series.id_serie)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    achat type of column albums.achat)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable tomedebut type of column albums.tomedebut;');
  Query.Script.Add('declare variable tomefin type of column albums.tomefin;');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_serie, tome, integrale, achat');
  Query.Script.Add('    from');
  Query.Script.Add('      albums');
  Query.Script.Add('    where');
  Query.Script.Add('      tome is not null and integrale = 0 and horsserie = 0');
  Query.Script.Add('      and (:in_idserie is null or id_serie = :in_idserie)');
  Query.Script.Add('    order by');
  Query.Script.Add('      id_serie, tome');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_serie, :tome, :integrale, :achat');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('');
  Query.Script.Add('  if (withintegrale is null) then withintegrale = 1;');
  Query.Script.Add('  if (withintegrale = 1) then');
  Query.Script.Add('    for');
  Query.Script.Add('      select');
  Query.Script.Add('        id_serie, tomedebut, tomefin, integrale, achat');
  Query.Script.Add('      from');
  Query.Script.Add('        albums');
  Query.Script.Add('      where');
  Query.Script.Add('        tomedebut is not null and tomefin is not null');
  Query.Script.Add('        and integrale = 1 and horsserie = 0');
  Query.Script.Add('        and (:in_idserie is null or id_serie = :in_idserie)');
  Query.Script.Add('      order by');
  Query.Script.Add('        id_serie, tomedebut, tomefin');
  Query.Script.Add('      into');
  Query.Script.Add('        :id_serie, :tomedebut, :tomefin, :integrale, :achat');
  Query.Script.Add('      do');
  Query.Script.Add('      begin');
  Query.Script.Add('        tome = tomedebut - 1;');
  Query.Script.Add('        while (tome <> tomefin) do');
  Query.Script.Add('        begin');
  Query.Script.Add('          tome = tome + 1;');
  Query.Script.Add('          suspend;');
  Query.Script.Add('        end');
  Query.Script.Add('      end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure loadblobfromfile (');
  Query.Script.Add('    chemin varchar(255),');
  Query.Script.Add('    fichier varchar(255))');
  Query.Script.Add('returns (');
  Query.Script.Add('    blobcontent blob sub_type 0 segment size 80)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  select udf_loadblobfromfile(:chemin, :fichier) from rdb$database into :blobcontent;');
  Query.Script.Add('  suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure parabd_by_serie (');
  Query.Script.Add('    in_id_serie type of column series.id_serie,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_parabd type of column parabd.id_parabd,');
  Query.Script.Add('    titreparabd type of column parabd.titreparabd,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet,');
  Query.Script.Add('    scategorie type of column listes.libelle)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(130);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:in_id_serie = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''id_serie is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''id_serie = '''''' || :in_id_serie || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_parabd, titreparabd, id_parabd, titreserie, achat, complet,');
  Query.Script.Add('      scategorie');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_parabd');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      titreparabd''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_parabd, :titreparabd, :id_serie, :titreserie, :achat, :complet,');
  Query.Script.Add('      :scategorie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure personnes_by_initiale (');
  Query.Script.Add('    initiale t_initiale)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_personne type of column personnes.id_personne,');
  Query.Script.Add('    nompersonne type of column personnes.nompersonne)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_personne, nompersonne');
  Query.Script.Add('    from');
  Query.Script.Add('      personnes');
  Query.Script.Add('    where');
  Query.Script.Add('      initialenompersonne = :initiale');
  Query.Script.Add('    order by');
  Query.Script.Add('      nompersonne');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_personne, :nompersonne');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure previsions_sorties (');
  Query.Script.Add('    withachat t_yesno,');
  Query.Script.Add('    in_id_serie type of column series.id_serie)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur,');
  Query.Script.Add('    id_collection type of column collections.id_collection,');
  Query.Script.Add('    nomcollection type of column collections.nomcollection)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable currentidserie type of column series.id_serie;');
  Query.Script.Add('declare variable oldidserie type of column series.id_serie;');
  Query.Script.Add('declare variable currenttome type of column albums.tome;');
  Query.Script.Add('declare variable sommeponderee integer;');
  Query.Script.Add('declare variable comptealbum integer;');
  Query.Script.Add('declare variable currentannee type of column albums.anneeparution;');
  Query.Script.Add('declare variable currentmois type of column albums.moisparution;');
  Query.Script.Add('declare variable tomeprecedent type of column albums.tome;');
  Query.Script.Add('declare variable anneeprecedente type of column albums.anneeparution;');
  Query.Script.Add('declare variable moisprecedent type of column albums.moisparution;');
  Query.Script.Add('declare variable diffmois integer;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (withachat is null) then withachat = 1;');
  Query.Script.Add('  oldidserie = null;');
  Query.Script.Add('  tomeprecedent = -1;');
  Query.Script.Add('  anneeprecedente = -1;');
  Query.Script.Add('  moisprecedent = null;');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      tome, anneeparution, moisparution, s.id_serie');
  Query.Script.Add('    from');
  Query.Script.Add('      albums a');
  Query.Script.Add('      /* pas de left join: on calcul les prévisions de sorties des nouveautés des séries */');
  Query.Script.Add('      inner join series s on');
  Query.Script.Add('        s.id_serie = a.id_serie');
  Query.Script.Add('    where');
  Query.Script.Add('      s.suivresorties = 1');
  Query.Script.Add('      and a.horsserie = 0 and a.integrale = 0 and a.anneeparution is not null');
  Query.Script.Add('      and (:in_id_serie is null or s.id_serie = :in_id_serie)');
  Query.Script.Add('      and (:withachat = 1 or achat = 0)');
  Query.Script.Add('    order by');
  Query.Script.Add('      s.id_serie, tome');
  Query.Script.Add('    into');
  Query.Script.Add('      :currenttome, :currentannee, :currentmois, :currentidserie');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (oldidserie is null or currentidserie <> oldidserie) then');
  Query.Script.Add('    begin');
  Query.Script.Add('');
  Query.Script.Add('      if (oldidserie is not null and comptealbum > 0) then');
  Query.Script.Add('      begin');
  Query.Script.Add('        select');
  Query.Script.Add('          id_serie, titreserie, tome, anneeparution, moisparution,');
  Query.Script.Add('          id_editeur, nomediteur, id_collection, nomcollection');
  Query.Script.Add('        from');
  Query.Script.Add('          calcul_annee_sortie(');
  Query.Script.Add('            :withachat, :oldidserie, :sommeponderee, :comptealbum,');
  Query.Script.Add('            :tomeprecedent, :anneeprecedente, :moisprecedent');
  Query.Script.Add('          )');
  Query.Script.Add('        into');
  Query.Script.Add('          :id_serie, :titreserie, :tome, :anneeparution, :moisparution,');
  Query.Script.Add('          :id_editeur, :nomediteur, :id_collection, :nomcollection;');
  Query.Script.Add('');
  Query.Script.Add('        suspend;');
  Query.Script.Add('      end');
  Query.Script.Add('');
  Query.Script.Add('      oldidserie = currentidserie;');
  Query.Script.Add('      sommeponderee = 0;');
  Query.Script.Add('      comptealbum = 0;');
  Query.Script.Add('      tomeprecedent = -1;');
  Query.Script.Add('      anneeprecedente = -1;');
  Query.Script.Add('      moisprecedent = -1;');
  Query.Script.Add('    end');
  Query.Script.Add('    if (tomeprecedent <> -1 and currenttome - tomeprecedent <> 0) then');
  Query.Script.Add('    begin');
  Query.Script.Add('      if (currentmois is null or moisprecedent is null) then');
  Query.Script.Add('        diffmois = 0;');
  Query.Script.Add('      else');
  Query.Script.Add('        diffmois = currentmois - moisprecedent;');
  Query.Script.Add
    ('      /* non pondéré: sommeponderee = sommeponderee + (((currentannee - anneeprecedente) * 12 + (coalesce(currentmois, 1) - coalesce(moisprecedent, 1))) / (currenttome - tomeprecedent)); */');
  Query.Script.Add('      sommeponderee = sommeponderee + (((currentannee - anneeprecedente) * 12 + diffmois) / (currenttome - tomeprecedent)) * currenttome;');
  Query.Script.Add('      /* non pondéré: comptealbum = comptealbum + 1;*/');
  Query.Script.Add('      comptealbum = comptealbum + currenttome;');
  Query.Script.Add('    end');
  Query.Script.Add('    tomeprecedent = currenttome;');
  Query.Script.Add('    anneeprecedente = currentannee;');
  Query.Script.Add('    moisprecedent = currentmois;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (oldidserie is not null and comptealbum > 0) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    select');
  Query.Script.Add('      id_serie, titreserie, tome, anneeparution, moisparution,');
  Query.Script.Add('      id_editeur, nomediteur, id_collection, nomcollection');
  Query.Script.Add('    from');
  Query.Script.Add('      calcul_annee_sortie(');
  Query.Script.Add('        :withachat, :oldidserie, :sommeponderee, :comptealbum, :tomeprecedent,');
  Query.Script.Add('        :anneeprecedente, :moisprecedent');
  Query.Script.Add('      )');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_serie, :titreserie, :tome, :anneeparution, :moisparution,');
  Query.Script.Add('      :id_editeur, :nomediteur, :id_collection, :nomcollection;');
  Query.Script.Add('');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure proc_ajoutmvt (');
  Query.Script.Add('    id_edition type of column editions.id_edition,');
  Query.Script.Add('    id_emprunteur type of column emprunteurs.id_emprunteur,');
  Query.Script.Add('    dateemprunt timestamp,');
  Query.Script.Add('    pret type of column statut.pretemprunt)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  insert into statut (');
  Query.Script.Add('    dateemprunt, id_emprunteur, id_edition, pretemprunt');
  Query.Script.Add('  ) values (');
  Query.Script.Add('    :dateemprunt, :id_emprunteur, :id_edition, :pret');
  Query.Script.Add('  );');
  Query.Script.Add('');
  Query.Script.Add('  update editions set');
  Query.Script.Add('    prete = :pret');
  Query.Script.Add('  where');
  Query.Script.Add('    id_edition = :id_edition;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure proc_auteurs (');
  Query.Script.Add('    album type of column albums.id_album,');
  Query.Script.Add('    serie type of column series.id_serie,');
  Query.Script.Add('    parabd type of column parabd.id_parabd)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_personne type of column personnes.id_personne,');
  Query.Script.Add('    nompersonne type of column personnes.nompersonne,');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    id_parabd type of column parabd.id_parabd,');
  Query.Script.Add('    metier type of column auteurs.metier)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (album is not null) then');
  Query.Script.Add('    for');
  Query.Script.Add('      select');
  Query.Script.Add('        p.id_personne, p.nompersonne,');
  Query.Script.Add('        a.id_album, null, null, a.metier');
  Query.Script.Add('      from');
  Query.Script.Add('        personnes p');
  Query.Script.Add('        inner join auteurs a on');
  Query.Script.Add('          a.id_personne = p.id_personne');
  Query.Script.Add('      where');
  Query.Script.Add('        a.id_album = :album');
  Query.Script.Add('      order by');
  Query.Script.Add('        a.metier, p.nompersonne');
  Query.Script.Add('      into');
  Query.Script.Add('        :id_personne, :nompersonne,');
  Query.Script.Add('        :id_album, :id_serie, :id_parabd, :metier');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('');
  Query.Script.Add('  if (serie is not null) then');
  Query.Script.Add('    for');
  Query.Script.Add('      select');
  Query.Script.Add('        p.id_personne, p.nompersonne,');
  Query.Script.Add('        null, a.id_serie, null, a.metier');
  Query.Script.Add('      from');
  Query.Script.Add('        personnes p');
  Query.Script.Add('        inner join auteurs_series a on');
  Query.Script.Add('          a.id_personne = p.id_personne');
  Query.Script.Add('      where');
  Query.Script.Add('        a.id_serie = :serie');
  Query.Script.Add('      order by');
  Query.Script.Add('        a.metier, p.nompersonne');
  Query.Script.Add('      into');
  Query.Script.Add('        :id_personne, :nompersonne,');
  Query.Script.Add('        :id_album, :id_serie, :id_parabd, :metier');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('');
  Query.Script.Add('  if (parabd is not null) then');
  Query.Script.Add('    for');
  Query.Script.Add('      select');
  Query.Script.Add('        p.id_personne, p.nompersonne,');
  Query.Script.Add('        null, null, a.id_parabd, cast(null as smallint)');
  Query.Script.Add('      from');
  Query.Script.Add('        personnes p');
  Query.Script.Add('        inner join auteurs_parabd a on');
  Query.Script.Add('          a.id_personne = p.id_personne');
  Query.Script.Add('      where');
  Query.Script.Add('        a.id_parabd = :parabd');
  Query.Script.Add('      order by');
  Query.Script.Add('        p.nompersonne');
  Query.Script.Add('      into');
  Query.Script.Add('        :id_personne, :nompersonne,');
  Query.Script.Add('        :id_album, :id_serie, :id_parabd, :metier');
  Query.Script.Add('    do');
  Query.Script.Add('      suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure proc_emprunts');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_edition type of column editions.id_edition,');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    prete type of column editions.prete,');
  Query.Script.Add('    id_emprunteur type of column emprunteurs.id_emprunteur,');
  Query.Script.Add('    nomemprunteur type of column emprunteurs.nomemprunteur,');
  Query.Script.Add('    pretemprunt type of column statut.pretemprunt,');
  Query.Script.Add('    dateemprunt type of column statut.dateemprunt)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      ed.id_edition, a.id_album, a.titrealbum, a.id_serie, a.titreserie,');
  Query.Script.Add('      ed.prete, e.id_emprunteur, e.nomemprunteur, s.pretemprunt,');
  Query.Script.Add('      s.dateemprunt');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums a');
  Query.Script.Add('      inner join editions ed on');
  Query.Script.Add('        a.id_album = ed.id_album');
  Query.Script.Add('      inner join statut s on');
  Query.Script.Add('        ed.id_edition = s.id_edition');
  Query.Script.Add('      inner join emprunteurs e on');
  Query.Script.Add('        e.id_emprunteur = s.id_emprunteur');
  Query.Script.Add('    order by');
  Query.Script.Add('      s.dateemprunt desc');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_edition, :id_album, :titrealbum, :id_serie, :titreserie,');
  Query.Script.Add('      :prete, :id_emprunteur, :nomemprunteur, :pretemprunt,');
  Query.Script.Add('      :dateemprunt');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure saveblobtofile (');
  Query.Script.Add('    chemin varchar(255),');
  Query.Script.Add('    fichier varchar(255),');
  Query.Script.Add('    blobcontent blob sub_type 0 segment size 80)');
  Query.Script.Add('returns (');
  Query.Script.Add('    result integer)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  select udf_saveblobtofile(:chemin, :fichier, :blobcontent) from rdb$database into :result;');
  Query.Script.Add('  suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure searchfilename (');
  Query.Script.Add('    chemin varchar(255),');
  Query.Script.Add('    old_filename varchar(255),');
  Query.Script.Add('    reserve integer)');
  Query.Script.Add('returns (');
  Query.Script.Add('    new_filename varchar(255))');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  select udf_searchfilename(:chemin, :old_filename, :reserve) from rdb$database into :new_filename;');
  Query.Script.Add('  suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure series_albums (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    countserie integer,');
  Query.Script.Add('    id_serie type of column series.id_serie)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(132);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(''''-1'''' as varchar(150)), id_serie, count(id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      titreserie is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      titreserie, id_serie''');
  Query.Script.Add('    into');
  Query.Script.Add('      :titreserie, :id_serie, :countserie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      titreserie, id_serie, count(id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      titreserie is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      titreserie, id_serie''');
  Query.Script.Add('    into');
  Query.Script.Add('      :titreserie, :id_serie, :countserie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure series_by_initiale (');
  Query.Script.Add('    initiale t_initiale)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    id_editeur type of column editeurs.id_editeur,');
  Query.Script.Add('    nomediteur type of column editeurs.nomediteur,');
  Query.Script.Add('    id_collection type of column collections.id_collection,');
  Query.Script.Add('    nomcollection type of column collections.nomcollection)');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_serie, s.titreserie,');
  Query.Script.Add('      s.id_editeur, e.nomediteur, s.id_collection, c.nomcollection');
  Query.Script.Add('      from');
  Query.Script.Add('        series s');
  Query.Script.Add('        left join editeurs e on');
  Query.Script.Add('          s.id_editeur = e.id_editeur');
  Query.Script.Add('        left join collections c on');
  Query.Script.Add('          s.id_collection = c.id_collection');
  Query.Script.Add('      where');
  Query.Script.Add('        s.initialetitreserie = :initiale');
  Query.Script.Add('      order by');
  Query.Script.Add('        s.titreserie, e.nomediteur, c.nomcollection');
  Query.Script.Add('      into');
  Query.Script.Add('        :id_serie, :titreserie,');
  Query.Script.Add('        :id_editeur, :nomediteur, :id_collection, :nomcollection');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('alter procedure series_parabd (');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    countserie integer,');
  Query.Script.Add('    id_serie type of column series.id_serie)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(132);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(''''-1'''' as varchar(150)), id_serie, count(id_parabd)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_parabd');
  Query.Script.Add('    where');
  Query.Script.Add('      titreserie is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      titreserie, id_serie''');
  Query.Script.Add('    into');
  Query.Script.Add('      :titreserie, :id_serie, :countserie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      titreserie, id_serie, count(id_parabd)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_parabd');
  Query.Script.Add('    where');
  Query.Script.Add('      titreserie is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      titreserie, id_serie''');
  Query.Script.Add('    into');
  Query.Script.Add('      :titreserie, :id_serie, :countserie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.ExecuteScript;
end;

initialization

RegisterFBUpdate('2.2.1.155', @MAJ2_2_1_155);

end.
