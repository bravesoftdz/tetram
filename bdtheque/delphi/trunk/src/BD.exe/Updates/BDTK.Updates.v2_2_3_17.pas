unit BDTK.Updates.v2_2_3_17;

interface

implementation

uses
  System.SysUtils, UIB, UIBLib, BDTK.Updates;

procedure MAJ2_2_3_17(Query: TUIBScript);
begin
  Query.Script.Clear;

  Query.Script.Add('create index univers_idx1 on univers (id_univers_parent, id_univers);');

  Query.Script.Add('alter table univers add branche_univers varchar(2000) character set none not null;');
  Query.Script.Add('create index univers_idx2 on univers (branche_univers);');

  Query.Script.Add('create or alter trigger univers_dv for univers');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.nomunivers is distinct from old.nomunivers) then begin');
  Query.Script.Add('    select initiale from get_initiale(new.nomunivers) into new.initialenomunivers;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (new.id_univers_parent is null) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    new.id_univers_racine = new.id_univers;');
  Query.Script.Add('    new.branche_univers = ''|'' || new.id_univers || ''|'';');
  Query.Script.Add('  end');
  Query.Script.Add('  else');
  Query.Script.Add('    if (new.id_univers_parent is distinct from old.id_univers_parent) then');
  Query.Script.Add('      select');
  Query.Script.Add('        id_univers_racine, ''|'' || new.id_univers || branche_univers');
  Query.Script.Add('      from');
  Query.Script.Add('        univers');
  Query.Script.Add('      where');
  Query.Script.Add('        id_univers = new.id_univers_parent');
  Query.Script.Add('      into');
  Query.Script.Add('        new.id_univers_racine, new.branche_univers;');
  Query.Script.Add('end;');

  Query.Script.Add('create table albums_univers (');
  Query.Script.Add('  id_album t_guid_notnull not null,');
  Query.Script.Add('  id_univers t_guid_notnull not null,');
  Query.Script.Add('  source_album t_yesno_baseno not null,');
  Query.Script.Add('  source_serie t_yesno_baseno not null,');
  Query.Script.Add('  dc_albums_univers t_timestamp_notnull,');
  Query.Script.Add('  dm_albums_univers t_timestamp_notnull');
  Query.Script.Add(');');

  Query.Script.Add('alter table albums_univers add constraint pk_albums_univers primary key (id_album,id_univers);');
  Query.Script.Add
    ('alter table albums_univers add constraint fk_albums_univers_1 foreign key (id_album) references albums(id_album) on delete cascade on update cascade using index fk_albums_univers_1;');
  Query.Script.Add
    ('alter table albums_univers add constraint fk_albums_univers_2 foreign key (id_univers) references univers(id_univers) on delete cascade on update cascade using index fk_albums_univers_2;');

  Query.Script.Add('create or alter trigger albums_univers_uniqid_biu0 for albums_univers');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.dc_albums_univers is null) then new.dc_albums_univers = old.dc_albums_univers;');
  Query.Script.Add('');
  Query.Script.Add('  new.dm_albums_univers = cast(''now'' as timestamp);');
  Query.Script.Add('  if (inserting or new.dc_albums_univers is null) then new.dc_albums_univers = new.dm_albums_univers;');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter trigger albums_univers_au0 for albums_univers');
  Query.Script.Add('active after update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.source_serie = 0 and new.source_album = 0) then');
  Query.Script.Add('    delete from albums_univers where id_album = new.id_album and id_univers = new.id_univers;');
  Query.Script.Add('end;');

  Query.Script.Add('create table parabd_univers (');
  Query.Script.Add('  id_parabd t_guid_notnull not null,');
  Query.Script.Add('  id_univers t_guid_notnull not null,');
  Query.Script.Add('  source_parabd t_yesno_baseno not null,');
  Query.Script.Add('  source_serie t_yesno_baseno not null,');
  Query.Script.Add('  dc_parabd_univers t_timestamp_notnull,');
  Query.Script.Add('  dm_parabd_univers t_timestamp_notnull');
  Query.Script.Add(');');

  Query.Script.Add('alter table parabd_univers add constraint pk_parabd_univers primary key (id_parabd,id_univers);');
  Query.Script.Add
    ('alter table parabd_univers add constraint fk_parabd_univers_1 foreign key (id_parabd) references parabd(id_parabd) on delete cascade on update cascade using index fk_parabd_univers_1;');
  Query.Script.Add
    ('alter table parabd_univers add constraint fk_parabd_univers_2 foreign key (id_univers) references univers(id_univers) on delete cascade on update cascade using index fk_parabd_univers_2;');

  Query.Script.Add('create or alter trigger parabd_univers_uniqid_biu0 for parabd_univers');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.dc_parabd_univers is null) then new.dc_parabd_univers = old.dc_parabd_univers;');
  Query.Script.Add('');
  Query.Script.Add('  new.dm_parabd_univers = cast(''now'' as timestamp);');
  Query.Script.Add('  if (inserting or new.dc_parabd_univers is null) then new.dc_parabd_univers = new.dm_parabd_univers;');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter trigger parabd_univers_au0 for parabd_univers');
  Query.Script.Add('active after update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.source_serie = 0 and new.source_parabd = 0) then');
  Query.Script.Add('    delete from parabd_univers where id_parabd = new.id_parabd and id_univers = new.id_univers;');
  Query.Script.Add('end;');

  Query.Script.Add('create table series_univers (');
  Query.Script.Add('  id_serie t_guid_notnull not null,');
  Query.Script.Add('  id_univers t_guid_notnull not null,');
  Query.Script.Add('  dc_series_univers t_timestamp_notnull,');
  Query.Script.Add('  dm_series_univers t_timestamp_notnull');
  Query.Script.Add(');');

  Query.Script.Add('alter table series_univers add constraint pk_series_univers primary key (id_serie,id_univers);');
  Query.Script.Add
    ('alter table series_univers add constraint fk_series_univers_1 foreign key (id_serie) references series(id_serie) on delete cascade on update cascade using index fk_series_univers_1;');
  Query.Script.Add
    ('alter table series_univers add constraint fk_series_univers_2 foreign key (id_univers) references univers(id_univers) on delete cascade on update cascade using index fk_series_univers_2;');

  Query.Script.Add('create or alter trigger series_univers_uniqid_biu0 for series_univers');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.dc_series_univers is null) then new.dc_series_univers = old.dc_series_univers;');
  Query.Script.Add('');
  Query.Script.Add('  new.dm_series_univers = cast(''now'' as timestamp);');
  Query.Script.Add('  if (inserting or new.dc_series_univers is null) then new.dc_series_univers = new.dm_series_univers;');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter trigger series_univers_ai0 for series_univers');
  Query.Script.Add('active after insert position 0');
  Query.Script.Add('as');
  Query.Script.Add('declare variable id_album type of column albums.id_album;');
  Query.Script.Add('declare variable id_parabd type of column parabd.id_parabd;');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_album');
  Query.Script.Add('    from');
  Query.Script.Add('      albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_serie = new.id_serie');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album');
  Query.Script.Add('  do');
  Query.Script.Add('    update or insert into albums_univers (');
  Query.Script.Add('      id_album, id_univers, source_serie');
  Query.Script.Add('    ) values (');
  Query.Script.Add('      :id_album, new.id_univers, 1');
  Query.Script.Add('    );');
  Query.Script.Add('');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_parabd');
  Query.Script.Add('    from');
  Query.Script.Add('      parabd');
  Query.Script.Add('    where');
  Query.Script.Add('      id_serie = new.id_serie');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_parabd');
  Query.Script.Add('  do');
  Query.Script.Add('    update or insert into parabd_univers (');
  Query.Script.Add('      id_parabd, id_univers, source_serie');
  Query.Script.Add('    ) values (');
  Query.Script.Add('      :id_parabd, new.id_univers, 1');
  Query.Script.Add('    );');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter trigger series_univers_ad0 for series_univers');
  Query.Script.Add('active after delete position 0');
  Query.Script.Add('as');
  Query.Script.Add('declare variable id_album type of column albums.id_album;');
  Query.Script.Add('declare variable id_parabd type of column parabd.id_parabd;');
  Query.Script.Add('begin');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_album');
  Query.Script.Add('    from');
  Query.Script.Add('      albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_serie = old.id_serie');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album');
  Query.Script.Add('  do');
  Query.Script.Add('    update albums_univers set');
  Query.Script.Add('      source_serie = 0');
  Query.Script.Add('    where');
  Query.Script.Add('      id_album = :id_album');
  Query.Script.Add('      and id_univers = old.id_univers;');
  Query.Script.Add('');
  Query.Script.Add('  for');
  Query.Script.Add('    select');
  Query.Script.Add('      id_parabd');
  Query.Script.Add('    from');
  Query.Script.Add('      parabd');
  Query.Script.Add('    where');
  Query.Script.Add('      id_serie = old.id_serie');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_parabd');
  Query.Script.Add('  do');
  Query.Script.Add('    update parabd_univers set');
  Query.Script.Add('      source_serie = 0');
  Query.Script.Add('    where');
  Query.Script.Add('      id_parabd = :id_parabd');
  Query.Script.Add('      and id_univers = old.id_univers;');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter trigger albums_aiu0 for albums');
  Query.Script.Add('active after insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('declare variable id_univers type of column series_univers.id_univers;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (old.id_serie is distinct from new.id_serie) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (old.id_serie is not null) then');
  Query.Script.Add('      update albums_univers set');
  Query.Script.Add('        source_serie = 0');
  Query.Script.Add('      where');
  Query.Script.Add('        id_album = new.id_album;');
  Query.Script.Add('');
  Query.Script.Add('    if (new.id_serie is not null) then');
  Query.Script.Add('      for');
  Query.Script.Add('        select');
  Query.Script.Add('          id_univers');
  Query.Script.Add('        from');
  Query.Script.Add('          series_univers');
  Query.Script.Add('        where');
  Query.Script.Add('          id_serie = new.id_serie');
  Query.Script.Add('        into');
  Query.Script.Add('          :id_univers');
  Query.Script.Add('      do');
  Query.Script.Add('        update or insert into albums_univers (');
  Query.Script.Add('          id_album, id_univers, source_serie');
  Query.Script.Add('        ) values (');
  Query.Script.Add('          new.id_album, :id_univers, 1');
  Query.Script.Add('        );');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter trigger parabd_aiu0 for parabd');
  Query.Script.Add('active after insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('declare variable id_univers type of column series_univers.id_univers;');
  Query.Script.Add('begin');
  Query.Script.Add('  if (old.id_serie is distinct from new.id_serie) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (old.id_serie is not null) then');
  Query.Script.Add('      update parabd_univers set');
  Query.Script.Add('        source_serie = 0');
  Query.Script.Add('      where');
  Query.Script.Add('        id_parabd = new.id_parabd;');
  Query.Script.Add('');
  Query.Script.Add('    if (new.id_serie is not null) then');
  Query.Script.Add('      for');
  Query.Script.Add('        select');
  Query.Script.Add('          id_univers');
  Query.Script.Add('        from');
  Query.Script.Add('          series_univers');
  Query.Script.Add('        where');
  Query.Script.Add('          id_serie = new.id_serie');
  Query.Script.Add('        into');
  Query.Script.Add('          :id_univers');
  Query.Script.Add('      do');
  Query.Script.Add('        update or insert into parabd_univers (');
  Query.Script.Add('          id_parabd, id_univers, source_serie');
  Query.Script.Add('        ) values (');
  Query.Script.Add('          new.id_parabd, :id_univers, 1');
  Query.Script.Add('        );');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter view vw_liste_albums(');
  Query.Script.Add('    id_album,');
  Query.Script.Add('    titrealbum,');
  Query.Script.Add('    tome,');
  Query.Script.Add('    tomedebut,');
  Query.Script.Add('    tomefin,');
  Query.Script.Add('    horsserie,');
  Query.Script.Add('    integrale,');
  Query.Script.Add('    moisparution,');
  Query.Script.Add('    anneeparution,');
  Query.Script.Add('    id_serie,');
  Query.Script.Add('    titreserie,');
  Query.Script.Add('    achat,');
  Query.Script.Add('    complet,');
  Query.Script.Add('    notation,');
  Query.Script.Add('    initialetitrealbum,');
  Query.Script.Add('    initialetitreserie)');
  Query.Script.Add('as');
  Query.Script.Add('select');
  Query.Script.Add('  a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie, a.integrale, a.moisparution, a.anneeparution,');
  Query.Script.Add('  a.id_serie, s.titreserie, a.achat, a.complet, a.notation, coalesce(a.initialetitrealbum, s.initialetitreserie),');
  Query.Script.Add('  s.initialetitreserie');
  Query.Script.Add('from');
  Query.Script.Add('  albums a');
  Query.Script.Add('  left join series s on');
  Query.Script.Add('    s.id_serie = a.id_serie');
  Query.Script.Add(';');

  Query.Script.Add('create or alter view vw_liste_albums_univers(');
  Query.Script.Add('    id_album,');
  Query.Script.Add('    titrealbum,');
  Query.Script.Add('    tome,');
  Query.Script.Add('    tomedebut,');
  Query.Script.Add('    tomefin,');
  Query.Script.Add('    horsserie,');
  Query.Script.Add('    integrale,');
  Query.Script.Add('    moisparution,');
  Query.Script.Add('    anneeparution,');
  Query.Script.Add('    id_serie,');
  Query.Script.Add('    titreserie,');
  Query.Script.Add('    achat,');
  Query.Script.Add('    complet,');
  Query.Script.Add('    notation,');
  Query.Script.Add('    initialetitrealbum,');
  Query.Script.Add('    initialetitreserie,');
  Query.Script.Add('    id_univers,');
  Query.Script.Add('    nomunivers,');
  Query.Script.Add('    id_univers_racine,');
  Query.Script.Add('    id_univers_parent,');
  Query.Script.Add('    branche_univers)');
  Query.Script.Add('as');
  Query.Script.Add('select');
  Query.Script.Add('  a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie, a.integrale, a.moisparution, a.anneeparution,');
  Query.Script.Add('  a.id_serie, s.titreserie, a.achat, a.complet, a.notation, coalesce(a.initialetitrealbum, s.initialetitreserie),');
  Query.Script.Add('  s.initialetitreserie, au.id_univers, u.nomunivers, u.id_univers_racine, u.id_univers_parent, u.branche_univers');
  Query.Script.Add('from');
  Query.Script.Add('  albums a');
  Query.Script.Add('  left join series s on');
  Query.Script.Add('    s.id_serie = a.id_serie');
  Query.Script.Add('  left join albums_univers au on');
  Query.Script.Add('    au.id_album = a.id_album');
  Query.Script.Add('  left join univers u on');
  Query.Script.Add('    u.id_univers = au.id_univers');
  Query.Script.Add(';');

  Query.Script.Add('create or alter procedure univers_albums (');
  Query.Script.Add('    filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('    nomunivers type of column univers.nomunivers,');
  Query.Script.Add('    countunivers integer,');
  Query.Script.Add('    id_univers type of column univers.id_univers)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(132);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      nomunivers, id_univers, count(distinct id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums_univers');
  Query.Script.Add('    where');
  Query.Script.Add('      id_univers is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      nomunivers, id_univers''');
  Query.Script.Add('    into');
  Query.Script.Add('      :nomunivers, :id_univers, :countunivers');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter procedure albums_by_univers (');
  Query.Script.Add('    in_id_univers type of column univers.id_univers,');
  Query.Script.Add('    filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column albums.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet,');
  Query.Script.Add('    id_univers type of column univers.id_univers,');
  Query.Script.Add('    id_univers_racine type of column univers.id_univers_racine)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(130);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:in_id_univers = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''id_univers is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''id_univers = '''''' || :in_id_univers || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select distinct');
  Query.Script.Add('      id_album, titrealbum, tome, tomedebut, tomefin, horsserie,');
  Query.Script.Add('      integrale, moisparution, anneeparution, notation, id_serie,');
  Query.Script.Add('      titreserie, achat, complet, id_univers, id_univers_racine');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums_univers');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      horsserie nulls first, integrale nulls first, tome nulls first,');
  Query.Script.Add('      anneeparution nulls first, moisparution nulls first, titrealbum''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet, :id_univers, :id_univers_racine');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter trigger albums_dv for albums');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.titrealbum is null) then begin');
  Query.Script.Add('    new.soundextitrealbum = null;');
  Query.Script.Add('    new.initialetitrealbum = null;');
  Query.Script.Add('  end else');
  Query.Script.Add('  if (new.titrealbum is distinct from old.titrealbum) then begin');
  Query.Script.Add('    new.soundextitrealbum = udf_soundex(new.titrealbum, 1);');
  Query.Script.Add('    select initiale from get_initiale(new.titrealbum) into new.initialetitrealbum;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter view vw_liste_parabd(');
  Query.Script.Add('    id_parabd,');
  Query.Script.Add('    titreparabd,');
  Query.Script.Add('    id_serie,');
  Query.Script.Add('    titreserie,');
  Query.Script.Add('    achat,');
  Query.Script.Add('    complet,');
  Query.Script.Add('    scategorie)');
  Query.Script.Add('as');
  Query.Script.Add('select');
  Query.Script.Add('  p.id_parabd, p.titreparabd, p.id_serie, s.titreserie, p.achat, p.complet, lc.libelle');
  Query.Script.Add('from');
  Query.Script.Add('  parabd p');
  Query.Script.Add('  left join series s on');
  Query.Script.Add('    s.id_serie = p.id_serie');
  Query.Script.Add('  left join listes lc on');
  Query.Script.Add('    lc.ref = p.categorieparabd and lc.categorie = 7');
  Query.Script.Add(';');

  Query.Script.Add('create or alter view vw_liste_parabd_univers(');
  Query.Script.Add('    id_parabd,');
  Query.Script.Add('    titreparabd,');
  Query.Script.Add('    id_serie,');
  Query.Script.Add('    titreserie,');
  Query.Script.Add('    achat,');
  Query.Script.Add('    complet,');
  Query.Script.Add('    scategorie,');
  Query.Script.Add('    id_univers,');
  Query.Script.Add('    nomunivers,');
  Query.Script.Add('    id_univers_racine,');
  Query.Script.Add('    id_univers_parent,');
  Query.Script.Add('    branche_univers)');
  Query.Script.Add('as');
  Query.Script.Add('select');
  Query.Script.Add('  p.id_parabd, p.titreparabd, p.id_serie, s.titreserie, p.achat, p.complet, lc.libelle,');
  Query.Script.Add('  pu.id_univers, u.nomunivers, u.id_univers_racine, u.id_univers_parent, u.branche_univers');
  Query.Script.Add('from');
  Query.Script.Add('  parabd p');
  Query.Script.Add('  left join series s on');
  Query.Script.Add('    s.id_serie = p.id_serie');
  Query.Script.Add('  left join listes lc on');
  Query.Script.Add('    lc.ref = p.categorieparabd and lc.categorie = 7');
  Query.Script.Add('  left join parabd_univers pu on');
  Query.Script.Add('    pu.id_parabd = p.id_parabd');
  Query.Script.Add('  left join univers u on');
  Query.Script.Add('    u.id_univers = pu.id_univers');
  Query.Script.Add(';');

  Query.Script.Add('create or alter trigger parabd_dv for parabd');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.titreparabd is null) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    new.soundextitreparabd = null;');
  Query.Script.Add('    new.initialetitreparabd = null;');
  Query.Script.Add('  end else');
  Query.Script.Add('  if (new.titreparabd is distinct from old.titreparabd) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    new.soundextitreparabd = udf_soundex(new.titreparabd, 1);');
  Query.Script.Add('    select initiale from get_initiale(new.titreparabd) into new.initialetitreparabd;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('drop trigger series_au0;');
  Query.Script.Add('drop trigger univers_univers_ref;');
  Query.Script.Add('alter table albums drop id_univers, drop id_univers_racine;');
  Query.Script.Add('alter table parabd drop id_univers, drop id_univers_racine;');

  Query.Script.Add('create or alter procedure series_albums (');
  Query.Script.Add('    filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    countserie integer,');
  Query.Script.Add('    id_serie type of column series.id_serie)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(132);');
  Query.Script.Add('declare variable nom_vue varchar(8) = '''';');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  if (filtre containing ''univers'') then');
  Query.Script.Add('    nom_vue = ''_univers'';');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(''''-1'''' as varchar(150)), id_serie, count(distinct id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums'' || :nom_vue || ''');
  Query.Script.Add('    where');
  Query.Script.Add('      titreserie is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      titreserie, id_serie''');
  Query.Script.Add('    into');
  Query.Script.Add('      :titreserie, :id_serie, :countserie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      titreserie, id_serie, count(distinct id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums'' || :nom_vue || ''');
  Query.Script.Add('    where');
  Query.Script.Add('      titreserie is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      titreserie, id_serie''');
  Query.Script.Add('    into');
  Query.Script.Add('      :titreserie, :id_serie, :countserie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter procedure series_parabd (');
  Query.Script.Add('    filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    countserie integer,');
  Query.Script.Add('    id_serie type of column series.id_serie)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(132);');
  Query.Script.Add('declare variable nom_vue varchar(8) = '''';');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  if (filtre containing ''univers'') then');
  Query.Script.Add('    nom_vue = ''_univers'';');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      cast(''''-1'''' as varchar(150)), id_serie, count(distinct id_parabd)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_parabd'' || :nom_vue || ''');
  Query.Script.Add('    where');
  Query.Script.Add('      titreserie is null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      titreserie, id_serie''');
  Query.Script.Add('    into');
  Query.Script.Add('      :titreserie, :id_serie, :countserie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      titreserie, id_serie, count(distinct id_parabd)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_parabd'' || :nom_vue || ''');
  Query.Script.Add('    where');
  Query.Script.Add('      titreserie is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      titreserie, id_serie''');
  Query.Script.Add('    into');
  Query.Script.Add('      :titreserie, :id_serie, :countserie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter procedure albums_by_serie (');
  Query.Script.Add('    in_id_serie type of column series.id_serie,');
  Query.Script.Add('    filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(130);');
  Query.Script.Add('declare variable nom_vue varchar(8) = '''';');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:in_id_serie = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''id_serie is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''id_serie = '''''' || :in_id_serie || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('');
  Query.Script.Add('  if (filtre containing ''univers'') then');
  Query.Script.Add('    nom_vue = ''_univers'';');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select distinct');
  Query.Script.Add('      id_album, titrealbum, tome, tomedebut, tomefin, horsserie,');
  Query.Script.Add('      integrale, moisparution, anneeparution, notation, id_serie,');
  Query.Script.Add('      titreserie, achat, complet');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums'' || :nom_vue || ''');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      horsserie nulls first, integrale nulls first, tome nulls first,');
  Query.Script.Add('      anneeparution nulls first, moisparution nulls first, titrealbum''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter procedure parabd_by_serie (');
  Query.Script.Add('    in_id_serie type of column series.id_serie,');
  Query.Script.Add('    filtre varchar(125))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_parabd type of column parabd.id_parabd,');
  Query.Script.Add('    titreparabd type of column parabd.titreparabd,');
  Query.Script.Add('    id_serie type of column series.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet,');
  Query.Script.Add('    scategorie type of column listes.libelle)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(130);');
  Query.Script.Add('declare variable nom_vue varchar(8) = '''';');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:in_id_serie = cast('''' as t_guid)) then');
  Query.Script.Add('    swhere = ''id_serie is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''id_serie = '''''' || :in_id_serie || '''''' '';');
  Query.Script.Add('  if (coalesce(filtre, '''') <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('');
  Query.Script.Add('  if (filtre containing ''univers'') then');
  Query.Script.Add('    nom_vue = ''_univers'';');
  Query.Script.Add('');
  Query.Script.Add('  for');
  Query.Script.Add('    execute statement ''select distinct');
  Query.Script.Add('      id_parabd, titreparabd, id_parabd, titreserie, achat, complet, scategorie');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_parabd'' || :nom_vue || ''');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      titreparabd''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_parabd, :titreparabd, :id_serie, :titreserie, :achat, :complet, :scategorie');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter trigger series_dv for series');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.titreserie is distinct from old.titreserie) then begin');
  Query.Script.Add('    new.soundextitreserie = udf_soundex(new.titreserie, 1);');
  Query.Script.Add('    select initiale from get_initiale(new.titreserie) into new.initialetitreserie;');
  Query.Script.Add('  end');
  Query.Script.Add('end;');

  Query.Script.Add('create or alter procedure initiales_univers (');
  Query.Script.Add('    filtre varchar(150))');
  Query.Script.Add('returns (');
  Query.Script.Add('    initialenomunivers type of column univers.initialenomunivers,');
  Query.Script.Add('    countinitiale integer)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(156);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''where '' || filtre;');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      initialenomunivers, count(id_univers)');
  Query.Script.Add('    from');
  Query.Script.Add('      univers '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      1''');
  Query.Script.Add('    into');
  Query.Script.Add('      :initialenomunivers, :countinitiale');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter procedure univers_by_initiale (');
  Query.Script.Add('    initiale t_initiale_utf8,');
  Query.Script.Add('    filtre varchar(150))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_univers type of column univers.id_univers,');
  Query.Script.Add('    nomunivers type of column univers.nomunivers)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(156);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = '' and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_univers, nomunivers');
  Query.Script.Add('    from');
  Query.Script.Add('      univers');
  Query.Script.Add('    where');
  Query.Script.Add('      initialenomunivers = '''''' ||: initiale || '''''' '' || swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      nomunivers''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_univers, :nomunivers');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('alter table series drop id_univers, drop id_univers_racine;');
  Query.Script.Add('drop view vw_liste_univers;');

  Query.ExecuteScript;
end;

initialization

RegisterFBUpdate('2.2.3.17', @MAJ2_2_3_17);

end.
