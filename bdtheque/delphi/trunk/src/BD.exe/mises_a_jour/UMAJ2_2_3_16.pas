unit UMAJ2_2_3_16;

interface

implementation

uses
  SysUtils, UIB, UIBLib, Updates;

procedure MAJ2_2_3_16(Query: TUIBScript);
begin
  Query.Script.Clear;

  Query.Script.Add('alter table albums add id_univers t_guid, add id_univers_racine t_guid;');
  Query.Script.Add('alter table series add id_univers t_guid, add id_univers_racine t_guid;');
  Query.Script.Add('alter table parabd add id_univers t_guid, add id_univers_racine t_guid;');

  Query.Script.Add('create domain t_siteweb as varchar(255) character set utf8 collate utf8;');

  Query.Script.Add('create table univers (');
  Query.Script.Add('  id_univers t_guid_notnull,');
  Query.Script.Add('  nomunivers t_nom_utf8 not null,');
  Query.Script.Add('  description t_description_utf8,');
  Query.Script.Add('  initialenomunivers t_initiale_utf8,');
  Query.Script.Add('  siteweb t_siteweb,');
  Query.Script.Add('  id_univers_parent t_guid,');
  Query.Script.Add('  id_univers_racine t_guid,');
  Query.Script.Add('  dc_univers t_timestamp_notnull,');
  Query.Script.Add('  dm_univers t_timestamp_notnull');
  Query.Script.Add(');');

  Query.Script.Add('alter table univers add constraint pk_univers primary key (id_univers);');

  Query.Script.Add('create or alter trigger univers_uniqid_biu0 for univers');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.id_univers is null) then new.id_univers = old.id_univers;');
  Query.Script.Add('  if (new.id_univers is null) then new.id_univers = udf_createguid();');
  Query.Script.Add('');
  Query.Script.Add('  if (new.dc_univers is null) then new.dc_univers = old.dc_univers;');
  Query.Script.Add('');
  Query.Script.Add('  new.dm_univers = cast(''now'' as timestamp);');
  Query.Script.Add('  if (inserting or new.dc_univers is null) then new.dc_univers = new.dm_univers;');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter trigger univers_dv for univers');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.nomunivers is distinct from old.nomunivers) then begin');
  Query.Script.Add('    select initiale from get_initiale(new.nomunivers) into new.initialenomunivers;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (new.id_univers_parent is null) then');
  Query.Script.Add('    new.id_univers_racine = new.id_univers;');
  Query.Script.Add('  else');
  Query.Script.Add('    if (new.id_univers_parent is distinct from old.id_univers_parent) then');
  Query.Script.Add('      select');
  Query.Script.Add('        id_univers_racine');
  Query.Script.Add('      from');
  Query.Script.Add('        univers');
  Query.Script.Add('      where');
  Query.Script.Add('        id_univers = new.id_univers_parent');
  Query.Script.Add('      into');
  Query.Script.Add('        new.id_univers_racine;');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter trigger univers_univers_ref for univers');
  Query.Script.Add('active after update or delete position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (deleting) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    update univers set id_univers_parent = old.id_univers_parent where id_univers_parent = old.id_univers;');
  Query.Script.Add('    update series set id_univers = null, id_univers_racine = null where id_univers = old.id_univers;');
  Query.Script.Add('    update albums set id_univers = null, id_univers_racine = null where id_univers = old.id_univers;');
  Query.Script.Add('    update parabd set id_univers = null, id_univers_racine = null where id_univers = old.id_univers;');
  Query.Script.Add('  end');
  Query.Script.Add('  if (updating) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (new.id_univers_racine is distinct from old.id_univers_racine) then begin');
  Query.Script.Add
    ('      update univers set id_univers_racine = new.id_univers_racine where id_univers_parent = new.id_univers and id_univers_racine is distinct from new.id_univers_racine;');
  Query.Script.Add
    ('      update series set id_univers_racine = new.id_univers_racine where id_univers = new.id_univers and id_univers_racine is distinct from new.id_univers_racine;');
  Query.Script.Add
    ('      update albums set id_univers_racine = new.id_univers_racine where id_univers = new.id_univers and id_univers_racine is distinct from new.id_univers_racine;');
  Query.Script.Add
    ('      update parabd set id_univers_racine = new.id_univers_racine where id_univers = new.id_univers and id_univers_racine is distinct from new.id_univers_racine;');
  Query.Script.Add('    end');
  Query.Script.Add('  end');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter trigger univers_logsup_ad0 for univers');
  Query.Script.Add('active after delete position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  insert into suppressions(tablename, fieldname, id) values (''UNIVERS'', ''id_univers'', old.id_univers);');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter trigger series_dv for series');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.titreserie is distinct from old.titreserie) then begin');
  Query.Script.Add('    new.soundextitreserie = udf_soundex(new.titreserie, 1);');
  Query.Script.Add('    select initiale from get_initiale(new.titreserie) into new.initialetitreserie;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (new.id_univers is distinct from old.id_univers) then begin');
  Query.Script.Add('    if (new.id_univers is null) then');
  Query.Script.Add('      new.id_univers_racine = null;');
  Query.Script.Add('    else');
  Query.Script.Add('      select id_univers_racine from univers where id_univers = new.id_univers into new.id_univers_racine;');
  Query.Script.Add('  end');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter trigger series_au0 for series');
  Query.Script.Add('active after update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.id_univers is distinct from old.id_univers) then begin');
  Query.Script.Add('    update albums set id_univers = new.id_univers where id_serie = new.id_serie;');
  Query.Script.Add('    update parabd set id_univers = new.id_univers where id_serie = new.id_serie;');
  Query.Script.Add('  end');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter trigger parabd_dv for parabd');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.titreparabd is null) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    new.soundextitreparabd = null;');
  Query.Script.Add('    new.initialetitreparabd = null;');
  Query.Script.Add('  end else');
  Query.Script.Add('  if (new.titreparabd is distinct from old.titreparabd) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    new.soundextitreparabd = udf_soundex(new.titreparabd, 1);');
  Query.Script.Add('    select initiale from get_initiale(new.titreparabd) into new.initialetitreparabd;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (new.id_serie is distinct from old.id_serie) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (new.id_serie is null) then');
  Query.Script.Add('      new.id_univers = null;');
  Query.Script.Add('    else');
  Query.Script.Add('      select id_univers from series where id_serie = new.id_serie into new.id_univers;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (new.id_univers is distinct from old.id_univers) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (new.id_univers is null) then');
  Query.Script.Add('      new.id_univers_racine = null;');
  Query.Script.Add('    else');
  Query.Script.Add('      select id_univers_racine from univers where id_univers = new.id_univers into new.id_univers_racine;');
  Query.Script.Add('  end');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter trigger albums_dv for albums');
  Query.Script.Add('active before insert or update position 0');
  Query.Script.Add('as');
  Query.Script.Add('begin');
  Query.Script.Add('  if (new.titrealbum is null) then begin');
  Query.Script.Add('    new.soundextitrealbum = null;');
  Query.Script.Add('    new.initialetitrealbum = null;');
  Query.Script.Add('  end else');
  Query.Script.Add('  if (new.titrealbum is distinct from old.titrealbum) then begin');
  Query.Script.Add('    new.soundextitrealbum = udf_soundex(new.titrealbum, 1);');
  Query.Script.Add('    select initiale from get_initiale(new.titrealbum) into new.initialetitrealbum;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (new.id_serie is distinct from old.id_serie) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (new.id_serie is null) then');
  Query.Script.Add('      new.id_univers = null;');
  Query.Script.Add('    else');
  Query.Script.Add('      select id_univers from series where id_serie = new.id_serie into new.id_univers;');
  Query.Script.Add('  end');
  Query.Script.Add('');
  Query.Script.Add('  if (new.id_univers is distinct from old.id_univers) then');
  Query.Script.Add('  begin');
  Query.Script.Add('    if (new.id_univers is null) then');
  Query.Script.Add('      new.id_univers_racine = null;');
  Query.Script.Add('    else');
  Query.Script.Add('      select id_univers_racine from univers where id_univers = new.id_univers into new.id_univers_racine;');
  Query.Script.Add('  end');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('drop trigger albums_idserie_biu;');

  Query.Script.Add('create or alter view vw_liste_univers as');
  Query.Script.Add('with recursive liste_univers as (');
  Query.Script.Add('  select');
  Query.Script.Add
    ('    id_univers, nomunivers, initialenomunivers, id_univers_parent, id_univers_racine, cast(''|'' || id_univers || ''|'' as varchar(5000)) branche');
  Query.Script.Add('  from');
  Query.Script.Add('    univers');
  Query.Script.Add('  where');
  Query.Script.Add('    id_univers_parent is null');
  Query.Script.Add('');
  Query.Script.Add('  union all');
  Query.Script.Add('');
  Query.Script.Add('  select');
  Query.Script.Add('    ch.id_univers, ch.nomunivers, ch.initialenomunivers, ch.id_univers_parent, ch.id_univers_racine, ''|'' || ch.id_univers || pa.branche');
  Query.Script.Add('  from');
  Query.Script.Add('    univers ch');
  Query.Script.Add('    inner join liste_univers pa on');
  Query.Script.Add('      ch.id_univers_parent = pa.id_univers');
  Query.Script.Add('  )');
  Query.Script.Add('select');
  Query.Script.Add('  id_univers, nomunivers, initialenomunivers, id_univers_parent, id_univers_racine, branche');
  Query.Script.Add('from');
  Query.Script.Add('  liste_univers');
  Query.Script.Add(';');

  Query.Script.Add('create or alter view vw_liste_albums(');
  Query.Script.Add('    id_album,');
  Query.Script.Add('    titrealbum,');
  Query.Script.Add('    tome,');
  Query.Script.Add('    tomedebut,');
  Query.Script.Add('    tomefin,');
  Query.Script.Add('    horsserie,');
  Query.Script.Add('    integrale,');
  Query.Script.Add('    moisparution,');
  Query.Script.Add('    anneeparution,');
  Query.Script.Add('    id_serie,');
  Query.Script.Add('    titreserie,');
  Query.Script.Add('    achat,');
  Query.Script.Add('    complet,');
  Query.Script.Add('    notation,');
  Query.Script.Add('    initialetitrealbum,');
  Query.Script.Add('    initialetitreserie,');
  Query.Script.Add('    id_univers,');
  Query.Script.Add('    nomunivers,');
  Query.Script.Add('    id_univers_racine,');
  Query.Script.Add('    branche_univers)');
  Query.Script.Add('as');
  Query.Script.Add('select');
  Query.Script.Add('  a.id_album, a.titrealbum, a.tome, a.tomedebut, a.tomefin, a.horsserie, a.integrale, a.moisparution, a.anneeparution,');
  Query.Script.Add('  a.id_serie, s.titreserie, a.achat, a.complet, a.notation, coalesce(a.initialetitrealbum, s.initialetitreserie),');
  Query.Script.Add('  s.initialetitreserie, a.id_univers, u.nomunivers, a.id_univers_racine, u.branche');
  Query.Script.Add('from');
  Query.Script.Add('  albums a');
  Query.Script.Add('  left join series s on');
  Query.Script.Add('    s.id_serie = a.id_serie');
  Query.Script.Add('  left join vw_liste_univers u on');
  Query.Script.Add('    u.id_univers = a.id_univers');
  Query.Script.Add(';');

  Query.Script.Add('create or alter procedure albums_by_univers (');
  Query.Script.Add('    in_id_univers type of column univers.id_univers,');
  Query.Script.Add('    filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_album type of column albums.id_album,');
  Query.Script.Add('    titrealbum type of column albums.titrealbum,');
  Query.Script.Add('    tome type of column albums.tome,');
  Query.Script.Add('    tomedebut type of column albums.tomedebut,');
  Query.Script.Add('    tomefin type of column albums.tomefin,');
  Query.Script.Add('    horsserie type of column albums.horsserie,');
  Query.Script.Add('    integrale type of column albums.integrale,');
  Query.Script.Add('    moisparution type of column albums.moisparution,');
  Query.Script.Add('    anneeparution type of column albums.anneeparution,');
  Query.Script.Add('    notation type of column albums.notation,');
  Query.Script.Add('    id_serie type of column albums.id_serie,');
  Query.Script.Add('    titreserie type of column series.titreserie,');
  Query.Script.Add('    achat type of column albums.achat,');
  Query.Script.Add('    complet type of column albums.complet,');
  Query.Script.Add('    id_univers type of column albums.id_univers,');
  Query.Script.Add('    id_univers_racine type of column albums.id_univers)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(130);');
  Query.Script.Add('begin');
  Query.Script.Add('  if (:in_id_univers = cast('''' as char(38))) then');
  Query.Script.Add('    swhere = ''id_univers is null '';');
  Query.Script.Add('  else');
  Query.Script.Add('    swhere = ''id_univers = '''''' || :in_id_univers || '''''' '';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = swhere || ''and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_album, titrealbum, tome, tomedebut, tomefin, horsserie,');
  Query.Script.Add('      integrale, moisparution, anneeparution, notation, id_serie,');
  Query.Script.Add('      titreserie, achat, complet, id_univers, id_univers_racine');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      '' || :swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      horsserie nulls first, integrale nulls first, tome nulls first,');
  Query.Script.Add('      anneeparution nulls first, moisparution nulls first, titrealbum''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_album, :titrealbum, :tome, :tomedebut, :tomefin, :horsserie,');
  Query.Script.Add('      :integrale, :moisparution, :anneeparution, :notation, :id_serie,');
  Query.Script.Add('      :titreserie, :achat, :complet, :id_univers, :id_univers_racine');
  Query.Script.Add('  do');
  Query.Script.Add('  begin');
  Query.Script.Add('    suspend;');
  Query.Script.Add('  end');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter procedure univers_by_initiale (');
  Query.Script.Add('    initiale t_initiale_utf8,');
  Query.Script.Add('    filtre varchar(150))');
  Query.Script.Add('returns (');
  Query.Script.Add('    id_univers type of column univers.id_univers,');
  Query.Script.Add('    nomunivers type of column univers.nomunivers)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(156);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = '' and '' || filtre || '' '';');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      id_univers, nomunivers');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_univers');
  Query.Script.Add('    where');
  Query.Script.Add('      initialenomunivers = '''''' ||: initiale || '''''' '' || swhere || ''');
  Query.Script.Add('    order by');
  Query.Script.Add('      nomunivers''');
  Query.Script.Add('    into');
  Query.Script.Add('      :id_univers, :nomunivers');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter procedure univers_albums (');
  Query.Script.Add('    filtre varchar(125) character set none)');
  Query.Script.Add('returns (');
  Query.Script.Add('    nomunivers type of column univers.nomunivers,');
  Query.Script.Add('    countunivers integer,');
  Query.Script.Add('    id_univers type of column univers.id_univers)');
  Query.Script.Add('as');
  Query.Script.Add('declare variable swhere varchar(132);');
  Query.Script.Add('begin');
  Query.Script.Add('  swhere = '''';');
  Query.Script.Add('  if (filtre is not null and filtre <> '''') then');
  Query.Script.Add('    swhere = ''and '' || filtre;');
  Query.Script.Add('');
  Query.Script.Add('  for execute statement');
  Query.Script.Add('    ''select');
  Query.Script.Add('      nomunivers, id_univers, count(id_album)');
  Query.Script.Add('    from');
  Query.Script.Add('      vw_liste_albums');
  Query.Script.Add('    where');
  Query.Script.Add('      id_univers is not null '' || swhere || ''');
  Query.Script.Add('    group by');
  Query.Script.Add('      nomunivers, id_univers''');
  Query.Script.Add('    into');
  Query.Script.Add('      :nomunivers, :id_univers, :countunivers');
  Query.Script.Add('  do');
  Query.Script.Add('    suspend;');
  Query.Script.Add('end');
  Query.Script.Add(';');

  Query.Script.Add('create or alter view vw_liste_parabd (');
  Query.Script.Add(' id_parabd,');
  Query.Script.Add(' titreparabd,');
  Query.Script.Add(' id_serie,');
  Query.Script.Add(' titreserie,');
  Query.Script.Add(' achat,');
  Query.Script.Add(' complet,');
  Query.Script.Add(' scategorie,');
  Query.Script.Add(' id_univers,');
  Query.Script.Add(' nomunivers,');
  Query.Script.Add(' id_univers_racine,');
  Query.Script.Add(' branche_univers');
  Query.Script.Add(') as');
  Query.Script.Add('select');
  Query.Script.Add('  p.id_parabd, p.titreparabd, p.id_serie, s.titreserie, p.achat, p.complet, lc.libelle,');
  Query.Script.Add('  p.id_univers, u.nomunivers, p.id_univers_racine, u.branche');
  Query.Script.Add('from');
  Query.Script.Add('  parabd p');
  Query.Script.Add('  left join series s on');
  Query.Script.Add('    s.id_serie = p.id_serie');
  Query.Script.Add('  left join listes lc on');
  Query.Script.Add('    lc.ref = p.categorieparabd and lc.categorie = 7');
  Query.Script.Add('  left join vw_liste_univers u on');
  Query.Script.Add('    u.id_univers = p.id_univers');
  Query.Script.Add(';');

  Query.ExecuteScript;
end;

initialization

RegisterFBUpdate('2.2.3.16', @MAJ2_2_3_16);

end.
