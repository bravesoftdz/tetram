<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Script>
  <Infos>
    <Auteur>Tetram Corp</Auteur>
    <Description/>
    <ScriptVersion>2.1</ScriptVersion>
    <BDVersion>2.2.3.29</BDVersion>
    <LastUpdate>Sun, 18 May 2014 16:46:16 +0200</LastUpdate>
    <Engine>DWScript</Engine>
    <Alias aka="Soleil Productions"/>
  </Infos>
  <Options>
    <Option Label="Miniatures dans les recherches" Values="Oui|Non" Default="Oui"/>
    <Option Label="Date d&apos;&#xE9;dition = Date de parution" Values="Oui|Non" Default="Oui"/>
    <Option Label="Liste des auteurs" Values="Album et s&#xE9;rie|Album uniquement" Default="Album et s&#xE9;rie"/>
  </Options>
  <Code>uses DWScriptFonctions, DWDefaultRegEx;

const urlSite = &apos;http://soleilprod.com&apos;;
const urlSearch = &apos;/recherche&apos;;

const regExResultSeries = &apos;&lt;div class=&quot;maincontent&quot; id=&quot;catalogue&quot;&gt;(?s-:.*?)&lt;table(?:.*?)&gt;((?s-).*?)&lt;/table&gt;&apos;;
const regExResultSerie = &apos;&lt;td class=&quot;album&quot;&gt;(?s-:.*?)&lt;a(?:.*?)&gt;&lt;img(?: src=&quot;(?&lt;couverture&gt;.*?)&quot;|.*?)*&gt;&lt;/a&gt;(?s-:.*?)&lt;h2&gt;&lt;a(?: href=&quot;(?&lt;lien&gt;.*?)&quot;|.*?)*&gt;(?&lt;titre_album&gt;.*?)&lt;/a&gt;&lt;/h2&gt;(?s-:.*?)&lt;p class=&quot;auteurs&quot;&gt;(?&lt;commentaire&gt;(?s-).*?)&lt;/p&gt;(?s-:.*?)&lt;/td&gt;&apos;;

const regExAlbum = &apos;&lt;div class=&quot;maincontent&quot; id=&quot;album&quot;&gt;((?s-).*?)&lt;div class=&quot;sidecontent&quot;&gt;&apos;;
const regExResultAlbum = &apos;&lt;div class=&quot;left&quot;&gt;(?s-:.*?)&lt;img(?: src=&quot;(?&lt;couverture&gt;.*?)&quot;|.*?)*&gt;(?s-:.*?)&lt;div class=&quot;right&quot;&gt;(?s-:.*?)&lt;h1&gt;(?&lt;titre_album&gt;.*?)&lt;/h1&gt;&lt;h2&gt;(?&lt;sous_titre_album&gt;.*?)&lt;/h2&gt;&apos;;

const regExAlbumTitreSerieGenre = &apos;&lt;div class=&quot;right&quot;&gt;(?s-:.*?)(?:&lt;p&gt;Genre : &lt;a(?s-:.*?)&gt;(?&lt;genre&gt;(?s-).*?)&lt;/a&gt;(?s-:.*?))(?:&lt;h3&gt;(?&lt;collection&gt;.*?)&lt;/h3&gt;)&lt;h1&gt;(?&lt;titre_serie&gt;.*?)&lt;/h1&gt;&lt;h2&gt;(?:T\.(?&lt;tome&gt;\d*) - )?(?&lt;titre_album&gt;.*?)&lt;/h2&gt;&apos;;
const regExAlbumEdition = &apos;&lt;li&gt;&lt;strong&gt;Date de sortie :&lt;/strong&gt; (.*?)&lt;/li&gt;&apos;;
const regExAlbumISBN = &apos;&lt;li&gt;&lt;strong&gt;EAN :&lt;/strong&gt; ([\d|x|X|-]*)&lt;/li&gt;&apos;;
const regExAlbumNBPages = &apos;&lt;li&gt;&lt;strong&gt;Pages :&lt;/strong&gt; ([\d]*)&lt;/li&gt;&apos;;
const regExAlbumPrix = &apos;&lt;li&gt;&lt;strong&gt;Prix :&lt;/strong&gt; ([\d|,|\.]*) &amp;euro;&lt;/li&gt;&apos;;

const regExAlbumResume = &apos;&lt;div class=&quot;auteurs&quot;&gt;(?:.*?)&lt;p&gt;((?s-).*?)(?:&lt;div id=&quot;resumeEN|&lt;/div&gt;)&apos;; // &lt;/div&gt; doit &#xEA;tre apr&#xE8;s resumeEN
const regExAlbumResumeLigne = &apos;&lt;p(?:.*?)&gt;((?s-).*?)&lt;/p&gt;&apos;;

const regExAlbumScenariste = &apos;&lt;div class=&quot;auteurs&quot;&gt;(?:.*?)Sc&#xE9;nariste(?:s)? : ((?s-).*?)(?:&lt;br/&gt;|&lt;/div&gt;)&apos;;
const regExAlbumDessinateur = &apos;&lt;div class=&quot;auteurs&quot;&gt;(?:.*?)Dessinateur(?:s)? : ((?s-).*?)(?:&lt;br/&gt;|&lt;/div&gt;)&apos;;
const regExAlbumColoriste = &apos;&lt;div class=&quot;auteurs&quot;&gt;(?:.*?)Coloriste(?:s)? : ((?s-).*?)(?:&lt;br/&gt;|&lt;/div&gt;)&apos;;

const regExAlbumCouverture = &apos;&lt;div class=&quot;left&quot;&gt;(?s-:.*?)&apos; + regExIMG + &apos;(?s-:.*?)&lt;/div&gt;&apos;; // le &lt;/div&gt; pour ne pas aller chercher des images au fin fond de la page

const regExAlbums = &apos;&lt;div class=&quot;carousel&quot; id=&quot;carousel1&quot;&gt;(?s-:.*?)&lt;ul&gt;((?s-).*?)&lt;/ul&gt;(?s-:.*?)&lt;/div&gt;&apos;;
const regExOtherAlbum = &apos;&lt;li&gt;&lt;div class=&quot;vignette&quot;&gt;&lt;a(?: href=&quot;(?&lt;lien&gt;.*?)&quot;|.*?)*&gt;&lt;div&gt;(?&lt;titre_album&gt;.*?)&lt;/div&gt;&lt;img(?: src=&quot;(?&lt;couverture&gt;.*?)&quot;| alt=&quot;(?&lt;sous_titre_album&gt;.*?)&quot;|.*?)*&gt;&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&apos;;

procedure ParseAlbum(const id_album: string);
var
  lien, page, sAuteur, s: string;
  re: TBdtkRegEx;
  AuteursSerie, DateParution: Boolean;
begin
  lien := CombineURL(urlSite, id_album);
  page := GetPage(lien, True);

  // c&apos;est l&apos;ann&#xE9;e de la derni&#xE8;re &#xE9;dition qui est indiqu&#xE9;e, par la date de parution
  DateParution := CheckOptionValue(&apos;Date d&apos;&apos;&#xE9;dition = Date de parution&apos;, &apos;Oui&apos;);
  var sl: array of String = StrSplit(ExtractRegEx(page, regExAlbumEdition), &apos;/&apos;);
  if sl.Count &gt; 0 then
  begin
    AlbumToImport.Edition.AnneeEdition := StrToIntDef(sl.Pop, 0);
    if DateParution then
      AlbumToImport.AnneeParution := AlbumToImport.Edition.AnneeEdition;
  end;
  if sl.Count &gt; 0 then
    if DateParution then
      AlbumToImport.MoisParution := TraduitMois(sl.Pop);

  AlbumToImport.Edition.ISBN := ExtractRegEx(page, regExAlbumISBN);
  AlbumToImport.Edition.Prix := StrToFloatDef(ExtractRegEx(page, regExAlbumPrix), 0);
  AlbumToImport.Edition.NombreDePages := StrToIntDef(ExtractRegEx(page, regExAlbumNBPages), 0);

  re := TBdtkRegEx.Create;
  try
    WriteToConsole(page);
    if re.BeginSearch(page, regExAlbumTitreSerieGenre) and re.Next then
    begin
      AlbumToImport.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_album&apos;));
      AlbumToImport.Tome := StrToIntDef(re.GetCaptureByName(&apos;tome&apos;), 0);
      AlbumToImport.Serie.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_serie&apos;));
      if SameText(AlbumToImport.Titre, AlbumToImport.Serie.Titre) then AlbumToImport.Titre := &apos;&apos;;
      AlbumToImport.Serie.Genres.Add(re.GetCaptureByName(&apos;genre&apos;));
      AlbumToImport.Serie.Collection := re.GetCaptureByName(&apos;collection&apos;);
      AlbumToImport.Serie.Editeur.NomEditeur := &apos;Soleil&apos;;
      AlbumToImport.Serie.Editeur.SiteWeb := urlSite;

      AlbumToImport.Edition.Collection := AlbumToImport.Serie.Collection;
      AlbumToImport.Edition.Editeur.NomEditeur := AlbumToImport.Serie.Editeur.NomEditeur;
      AlbumToImport.Edition.Editeur.SiteWeb := AlbumToImport.Serie.Editeur.SiteWeb;
    end;

    AlbumToImport.Sujet := &apos;&apos;;
    if re.BeginSearch(ExtractRegEx(page, regExAlbumResume), regExAlbumResumeLigne) then
    while re.Find(s) do
      AlbumToImport.Sujet := AjoutString4(AlbumToImport.Sujet, HTMLText(s), #13#10);

    AuteursSerie := CheckOptionValue(&apos;Liste des auteurs&apos;, &apos;Album et s&#xE9;rie&apos;);

    if re.BeginSearch(ExtractRegEx(page, regExAlbumScenariste), regExURL) then
      while re.Next do
      begin
        sAuteur := re.GetCaptureByName(&apos;texte&apos;);
        AlbumToImport.Scenaristes.Add(MakeAuteurAlbum(sAuteur, maScenariste));
        if AuteursSerie then
          AlbumToImport.Serie.Scenaristes.Add(MakeAuteurSerie(sAuteur, maScenariste));
      end;

    if re.BeginSearch(ExtractRegEx(page, regExAlbumDessinateur), regExURL) then
      while re.Next do
      begin
        sAuteur := re.GetCaptureByName(&apos;texte&apos;);
        AlbumToImport.Dessinateurs.Add(MakeAuteurAlbum(sAuteur, maDessinateur));
        if AuteursSerie then
          AlbumToImport.Serie.Dessinateurs.Add(MakeAuteurSerie(sAuteur, maDessinateur));
      end;

    if re.BeginSearch(ExtractRegEx(page, regExAlbumColoriste), regExURL) then
      while re.Next do
      begin
        sAuteur := re.GetCaptureByName(&apos;texte&apos;);
        AlbumToImport.Coloristes.Add(MakeAuteurAlbum(sAuteur, maColoriste));
        if AuteursSerie then
          AlbumToImport.Serie.Coloristes.Add(MakeAuteurSerie(sAuteur, maColoriste));
      end;
  finally
    re.Free;
  end;

  s := ExtractRegEx(page, regExAlbumCouverture);
  if s &lt;&gt; &apos;&apos; then
    AlbumToImport.Edition.AddImageFromURL(CombineURL(lien, s), ctiCouverture);

  AlbumToImport.Import;
end;

function AfficheResults(page, Critere: string): string;
var
  re: TBdtkRegEx;
  c: TScriptChoix;
  s, id, titre_album, commentaire, couv: string;
  Miniatures: Boolean;
  searchSerie: boolean;
begin
  Miniatures := CheckOptionValue(&apos;Miniatures dans les recherches&apos;, &apos;Oui&apos;);
  Result := &apos;&apos;;

  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;R&#xE9;sultats de recherche de &quot;&apos; + Critere + &apos;&quot;&apos;;

    s := ExtractRegEx(page, regExResultSeries);
    if (s &lt;&gt; &apos;&apos;) and re.BeginSearch(s, regExResultSerie) then
    begin
      searchSerie := True;
      while re.Next do begin
        id := re.GetCaptureByName(&apos;lien&apos;);
        titre_album := re.GetCaptureByName(&apos;titre_album&apos;);
        commentaire := re.GetCaptureByName(&apos;commentaire&apos;);
        if Miniatures then
        begin
          couv := re.GetCaptureByName(&apos;couverture&apos;);
          if couv &lt;&gt; &apos;&apos; then couv := CombineURL(urlSite, couv);
        end;

        c.AjoutChoixWithThumb(&apos;S&#xE9;ries&apos;, HTMLDecode(titre_album), HTMLText(commentaire), id, couv);
      end;
    end
    else
    // si la chaine est un nom de s&#xE9;rie exact, on tombe direct sur la fiche d&apos;un album de la s&#xE9;rie
    begin
      searchSerie := False;
      id := ExtractRegEx(page, regExURLFinal);

      // writetoconsole(page);
      page := ExtractRegEx(page, regExAlbum);

      if re.BeginSearch(page, regExResultAlbum) and re.Next then
      begin
        // id := re.GetCaptureByName(&apos;lien&apos;);
        titre_album := re.GetCaptureByName(&apos;titre_album&apos;);
        commentaire := re.GetCaptureByName(&apos;sous_titre_album&apos;);
        if Miniatures then
        begin
          couv := re.GetCaptureByName(&apos;couverture&apos;);
          if couv &lt;&gt; &apos;&apos; then couv := CombineURL(urlSite, couv);
        end;

        c.AjoutChoixWithThumb(&apos;Album&apos;, HTMLDecode(titre_album), HTMLText(commentaire), id, couv);
      end;

      if re.BeginSearch(ExtractRegEx(page, regExAlbums), regExOtherAlbum) then
        while re.Next do begin
          id := re.GetCaptureByName(&apos;lien&apos;);
          titre_album := re.GetCaptureByName(&apos;titre_album&apos;);
          commentaire := re.GetCaptureByName(&apos;sous_titre_album&apos;);
          if Miniatures then
          begin
            couv := re.GetCaptureByName(&apos;couverture&apos;);
            if couv &lt;&gt; &apos;&apos; then couv := CombineURL(urlSite, couv);
          end;

          c.AjoutChoixWithThumb(&apos;Album&apos;, HTMLDecode(titre_album), HTMLText(commentaire), id, couv);
        end;
    end;


    if c.ChoixCount &gt; 0 then
    begin
      Result := c.Show;
      if (Result &lt;&gt; &apos;&apos;) and searchSerie then
      begin
        page := GetPageWithHeaders(CombineURL(urlSite, Result), True);
        Result := AfficheResults(page, Critere);
      end;
    end
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

function RechercheParTitre(const Titre: string): string;
var
  page: string;
  Pieces: array of RAttachement;
begin
  Pieces.SetLength(3);
  Pieces[0].Nom := &apos;SearchForm[mode]&apos;;
  Pieces[0].Valeur := &apos;0&apos;;
  Pieces[0].isFichier := False;
  Pieces[1].Nom := &apos;SearchForm[term]&apos;;
  Pieces[1].Valeur := Titre;
  Pieces[1].isFichier := False;
  Pieces[2].Nom := &apos;yt1&apos;;
  Pieces[2].Valeur := &apos;submit&apos;;
  Pieces[2].isFichier := False;
  page := PostPageWithHeaders(urlSite + urlSearch, Pieces, True);

  Result := AfficheResults(page, Titre);
end;

var
  id_album, entry: string;
var
  index: integer;
begin
  entry := AlbumToImport.DefaultSearch;
  index := 0;
  if not AskSearchEntry([&apos;Titre de la s&#xE9;rie|(Ne fonctionne pas avec les titres d&apos;&apos;albums)&apos;, &apos;Lien&apos;], entry, index) then Exit;

  id_album := &apos;&apos;;
  case index of
    0: id_album := RechercheParTitre(entry);
    1: id_album := entry
  end;

  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end;</Code>
</Script>
