<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Script>
  <Infos>
    <Auteur>Tetram Corp</Auteur>
    <Description/>
    <ScriptVersion>2.2</ScriptVersion>
    <BDVersion>2.2.3.29</BDVersion>
    <LastUpdate>Sun, 18 May 2014 16:08:58 +0200</LastUpdate>
    <Engine>PascalScript</Engine>
  </Infos>
  <Options>
    <Option Label="Miniatures dans les recherches" Values="Oui|Non" Default="Oui"/>
  </Options>
  <Code>program Dargaud;

uses ScriptFonctions, DefaultRegEx;

const
  urlSite = &apos;http://www.dargaud.com&apos;;
  urlSearch = urlSite + &apos;/recherche/albums/&apos;;

  urlInfoAlbumSerie = &apos;http://www.dargaud.com/front/albums/xml/album_serie.aspx?id=&apos;; // + id_album
  urlInfoSerie = &apos;http://www.dargaud.com/front/albums/series/xml/serie.aspx?id=&apos;; // + id_serie
  urlPageSerie = &apos;http://www.dargaud.com/front/albums/series/serie.aspx?id=&apos;; // + id_serie

  regExResultAlbums = &apos;&lt;div class=&quot;album&quot;(?:.*?)&gt;[\r|\n|\t|\s]*(&lt;div(?:&lt;div(?s-:.)*?&lt;/div&gt;[\r|\n|\t|\s]*|(?s-:.)*?)&lt;/div&gt;[\r|\n|\t|\s]*|(?s-:.)*?)&lt;/div&gt;&apos;;
  regExResult = &apos;&lt;div id=&quot;liste-albums&quot;&gt;((?s-).*?)&lt;div id=&quot;footer&quot;&gt;&apos;;
  regExResultAlbumsTitre = &apos;&lt;div class=&quot;album-titre&quot;&gt;.*?&apos; + regExURL + &apos;[\r|\n|\t|\s]*&lt;/div&gt;&apos;;

  regExInfosDiv = &apos;&lt;div %s=&quot;%s&quot;(?:.*?)&gt;[\r|\n|\t|\s]*(&lt;div(?:&lt;div(?s-:.)*?&lt;/div&gt;[\r|\n|\t|\s]*|(?s-:.)*?)&lt;/div&gt;[\r|\n|\t|\s]*|(?s-:.)*?)[\r|\n|\t|\s]*&lt;/div&gt;&apos;;
  regExInfosDivLink = &apos;&lt;div %s=&quot;%s&quot;(?:.*?)&gt;.*?&apos; + regExURL + &apos;[\r|\n|\t|\s]*&lt;/div&gt;&apos;;
  regExInfosSpan = &apos;&lt;span %s=&quot;%s&quot;(?:.*?)&gt;[\r|\n|\t|\s]*((?s-).*?)[\r|\n|\t|\s]*&lt;/span&gt;&apos;;

  regExAlbumInfos = &apos;&lt;div id=&quot;contenu-bloc-droite&quot;&gt;((?s-).*?)&lt;div id=&quot;footer&quot;&gt;&apos;;
  regExAlbumDetails = &apos;&lt;li&gt;[\r|\n|\t|\s]*&lt;span class=&quot;fonction&quot;(?:.*?)&gt;%s(?s-:.)*?&lt;/span&gt;[\r|\n|\t|\s]*((?s-).*?)[\r|\n|\t|\s]*&lt;/li&gt;&apos;;


  regExSerieInfos = &apos;&lt;serie(?: id=&quot;(?&lt;id_serie&gt;\d*)&quot;| titre=&quot;(?&lt;titre_serie&gt;.*?)&quot;| texte=&quot;(?&lt;resume&gt;.*?)&quot;|.*?)*&gt;(?s-:.*?)&lt;/serie&gt;&apos;;
  // pcre refuse qu&apos;on utilise une seule expression (manifestement un bug)
  // regExSerieDetails = &apos;&lt;serie(?s-:.*?)&gt;(?s-:&lt;peoples&gt;(?&lt;auteurs&gt;.*?)&lt;/peoples&gt;|&lt;albums&gt;(?&lt;albums&gt;.*?)&lt;/albums&gt;|.*?)*&lt;/serie&gt;&apos;;
  regExSerieAlbums = &apos;&lt;serie(?s-:.*?)&gt;(?s-:.*?)&lt;albums&gt;(?&lt;albums&gt;.*?)&lt;/albums&gt;(?s-:.*?)&lt;/serie&gt;&apos;;
  regExSerieAuteurs = &apos;&lt;serie(?s-:.*?)&gt;(?s-:.*?)&lt;peoples&gt;(?&lt;auteurs&gt;.*?)&lt;/peoples&gt;(?s-:.*?)&lt;/serie&gt;&apos;;
  regExSerieAlbum = &apos;&lt;album(?: type=&quot;(?&lt;type&gt;.*?)&quot;| id=&quot;(?&lt;id_album&gt;\d*)&quot;| titre=&quot;(?&lt;titre_album&gt;.*?)&quot;| auteurs=&quot;(?&lt;auteurs&gt;.*?)&quot;| annee=&quot;(?&lt;annee&gt;\d*?)&quot;|.*?)*/&gt;&apos;;

  regExAlbumSerieInfos = &apos;&lt;album_serie(?: ser_id=&quot;(?&lt;id_serie&gt;\d*)&quot;| nbr_alb=&quot;(?&lt;nbalbums&gt;\d*)&quot;| ser_titre=&quot;(?&lt;titre_serie&gt;.*?)&quot;|.*?)*&gt;(?s-:.*?)&lt;/album_serie&gt;&apos;;
  regExAuteurInfos = &apos;&lt;people(?: type=&quot;(?&lt;metier&gt;.*?)&quot;| nom=&quot;(?&lt;nom&gt;.*?)&quot;|.*?)*/&gt;&apos;;

procedure ExtraireImages(lienPlayer: string);
var
  page: string;
  lien: string;
  id: string;
  img: string;
  position: integer;
  list: isuperobject;
begin
  page := GetPage(lienPlayer, True);
  lienPlayer := ExtractRegExGroup(page, regExIFRAME, &apos;lien&apos;);

  page := GetPage(lienPlayer, True);
  id := ExtractRegEx(page, &apos;&lt;div id=&quot;viewer&quot; rel=&quot;(.*?)&quot;&gt;&apos;);
  lienPlayer := ExtractRegEx(page, &apos;playerPath = &apos;&apos;(.*?)&apos;&apos;;&apos;);

  page := GetPage(lienPlayer + id + &apos;.json&apos;, True);

  list := so(page).GetO(&apos;list&apos;);
  for position := 0 to list.AsArray.Length - 1 do
  begin
    img := list.AsArray.O[position].GetS(&apos;page&apos;);
    lien := lienPlayer + id + &apos;-&apos; + img + &apos;-1200.jpg&apos;;
    if Pos(&apos;couv&apos;, img) &gt; 0 then
      AlbumToImport.Edition.AddImageFromURL(lien, ctiCouverture)
    else
      AlbumToImport.Edition.AddImageFromURL(lien, ctiPlanche);
  end;
end;

procedure ParseAlbum(const id_album: string);
var
  page, metier, nom, s, id_serie: string;
  sl: TStringList;
  p: Integer;
begin
  page := GetPage(CombineUrl(urlSite, id_album), True);

  with TBdtkRegEx.Create do
  try
    // album
    s := ExtractRegEx(page, regExAlbumInfos);

    AlbumToImport.Titre := PrepareTitre2(HTMLText(ExtractRegEx(s, Format(regExInfosDiv, [&apos;id&apos;, &apos;titre-album&apos;]))));
    AlbumToImport.Serie.Titre := PrepareTitre2(HTMLText(ExtractRegEx(s, Format(regExInfosDiv, [&apos;id&apos;, &apos;titre-serie&apos;]))));
    AlbumToImport.Tome := StrToIntDef(ExtractRegEx(s, Format(regExInfosSpan, [&apos;class&apos;, &apos;nb-tome&apos;])), 0);

    s := ExtractRegEx(page, Format(regExInfosDiv, [&apos;id&apos;, &apos;contenu-a-propos&apos;]));

    AlbumToImport.Sujet := HTMLText(ExtractRegEx(s, Format(regExInfosDiv, [&apos;class&apos;, &apos;contenu&apos;])));
    if BeginSearch(s, Format(regExInfosDiv, [&apos;class&apos;, &apos;auteur&apos;])) then
      while Find(s) do
      begin
        metier := ExtractRegEx(s, Format(regExInfosSpan, [&apos;class&apos;, &apos;fonction&apos;]));
        metier := Copy(metier, 1, Pos(&apos; &apos;, metier) - 1);

        nom := ExtractRegExGroup(ExtractRegEx(s, Format(regExInfosSpan, [&apos;class&apos;, &apos;nom&apos;])), regExURL, &apos;texte&apos;);

        if metier = &apos;dessinateur&apos; then
          AlbumToImport.Dessinateurs.Add(MakeAuteurAlbum(nom, maDessinateur));
        if metier = &apos;sc&#xE9;nariste&apos; then
          AlbumToImport.Scenaristes.Add(MakeAuteurAlbum(nom, maScenariste));
        if metier = &apos;coloriste&apos; then
          AlbumToImport.Coloristes.Add(MakeAuteurAlbum(nom, maColoriste));
      end;

    s := ExtractRegEx(page, Format(regExInfosDiv, [&apos;id&apos;, &apos;contenu-fiche&apos;]));


    sl := TStringList.Create;
    try
      sl.Split(ExtractRegEx(page, Format(regExAlbumDetails, [&apos;date de parution&apos;])), &apos; &apos;);
      if sl.Count &gt; 0 then
        AlbumToImport.AnneeParution := StrToIntDef(sl[sl.Count - 1], 0);
      if sl.Count &gt; 1 then
        AlbumToImport.MoisParution := TraduitMois(sl[sl.Count - 2]);
    finally
      sl.Free;
    end;

    AlbumToImport.Edition.Editeur.NomEditeur := &apos;Dargaud&apos;;
    AlbumToImport.Edition.Editeur.SiteWeb := &apos;http://www.dargaud.com&apos;;
    AlbumToImport.Edition.ISBN := ExtractRegEx(page, Format(regExAlbumDetails, [&apos;EAN&apos;]));
    AlbumToImport.Edition.NombreDePages := StrToIntDef(ExtractRegEx(page, Format(regExAlbumDetails, [&apos;nombre de pages&apos;])), 0);
    sl := TStringList.Create;
    try
      s := Trim(ExtractRegEx(page, Format(regExAlbumDetails, [&apos;prix&apos;])));
      if Pos(&apos; &apos;, s) &gt; 0 then
      begin
        sl.Split(s, &apos; &apos;);
        p := sl.IndexOf(&apos;E&apos;);
        if p = -1 then p := sl.IndexOf(&apos;&#x20AC;&apos;);
        if p &gt; 0 then
        begin
          s := &apos;&apos;;
          p := p - 1;
          while p &gt;= 0 do
          begin
            s := s + sl[0];
            p := p - 1;
          end;
          AlbumToImport.Edition.Prix := StrToFloat(StringReplace(s, &apos;,&apos;, &apos;.&apos;, [rfReplaceAll]));
        end;
      end
      else
        AlbumToImport.Edition.Prix := StrToFloat(StringReplace(ExtractRegEx(s, regExNumeric), &apos;,&apos;, &apos;.&apos;, [rfReplaceAll]));

    finally
      sl.Free;
    end;

    // couverture et planches
    // version plus grande si disponible
    s := ExtractRegExGroup(ExtractRegEx(page, Format(regExInfosDiv, [&apos;id&apos;, &apos;bt-player&apos;])), regExURL, &apos;lien&apos;);
    if s &lt;&gt; &apos;&apos; then
      ExtraireImages(s)
    else
    begin
      // version miniature
      if BeginSearch(ExtractRegEx(page, Format(regExInfosDiv, [&apos;class&apos;, &apos;serie-couverture&apos;])), regExIMG) then
      while Find(s) do
      begin
        s := Trim(s);
        if Pos(&apos;couv&apos;, s) &gt; 0 then
          AlbumToImport.Edition.AddImageFromURL(s, ctiCouverture)
        else
          AlbumToImport.Edition.AddImageFromURL(s, ctiPlanche);
      end;
    end;


    id_serie := &apos;&apos;;
    if BeginSearch(ExtractRegEx(page, Format(regExInfosDiv, [&apos;id&apos;, &apos;chemin-fer&apos;])), regExURL) then
      while Next do id_serie := GetCaptureByName(&apos;lien&apos;);

    AlbumToImport.Serie.Editeur.NomEditeur := &apos;Dargaud&apos;;
    AlbumToImport.Serie.Editeur.SiteWeb := &apos;http://www.dargaud.com&apos;;

    // lien album serie
    if id_serie &lt;&gt; &apos;&apos; then
    begin
      AlbumToImport.Serie.SiteWeb := id_serie;

      page := GetPage(id_serie, True);

      s := ExtractRegEx(page, regExAlbumInfos);

      AlbumToImport.Serie.Titre := PrepareTitre2(HTMLText(ExtractRegEx(page, Format(regExInfosDiv, [&apos;id&apos;, &apos;titre-serie&apos;]))));

      s := ExtractRegEx(page, Format(regExInfosDiv, [&apos;id&apos;, &apos;contenu-a-propos&apos;]));

      AlbumToImport.Serie.Sujet := HTMLText(ExtractRegEx(s, Format(regExInfosDiv, [&apos;class&apos;, &apos;contenu&apos;])));
      if BeginSearch(s, Format(regExInfosDiv, [&apos;class&apos;, &apos;auteur&apos;])) then
        while Find(s) do
        begin
          metier := ExtractRegEx(s, Format(regExInfosSpan, [&apos;class&apos;, &apos;fonction&apos;]));
          metier := Copy(metier, 1, Pos(&apos; &apos;, metier) - 1);

          nom := ExtractRegExGroup(ExtractRegEx(s, Format(regExInfosSpan, [&apos;class&apos;, &apos;nom&apos;])), regExURL, &apos;texte&apos;);

          if metier = &apos;dessinateur&apos; then
            AlbumToImport.Serie.Dessinateurs.Add(MakeAuteurSerie(nom, maDessinateur));
          if metier = &apos;sc&#xE9;nariste&apos; then
            AlbumToImport.Serie.Scenaristes.Add(MakeAuteurSerie(nom, maScenariste));
          if metier = &apos;coloriste&apos; then
            AlbumToImport.Serie.Coloristes.Add(MakeAuteurSerie(nom, maColoriste));
        end;

//      AlbumToImport.Serie.NbAlbums := StrToIntDef(GetCaptureByName(&apos;nbalbums&apos;), 0);
    end;
  finally
    Free;
  end;

  AlbumToImport.Import;
end;

function RechercheParTitre(const Cle, Titre: string): string;
var
  Miniatures: Boolean;
  s, sAlbum, thumb: string;
  re, re2: TBdtkRegEx;
  c: TScriptChoix;
  lien, titre_album, commentaire: string;
  Pieces: array of RAttachement;
  idPage: integer;
begin
  Miniatures := GetOptionValue(&apos;Miniatures dans les recherches&apos;, &apos;Oui&apos;) = &apos;Oui&apos;;

  Result := &apos;&apos;;
  idPage := 1;

  SetLength(Pieces, 2);
  Pieces[0].Nom := &apos;num_page&apos;;
  Pieces[0].Valeur := IntToStr(idPage);
  Pieces[0].isFichier := False;
  Pieces[1].Nom := Cle;
  Pieces[1].Valeur := Titre;
  Pieces[1].isFichier := False;

  s := PostPage(urlSearch, Pieces, True);
  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  re2 := TBdtkRegEx.Create;
  try
    c.Titre := &apos;R&#xE9;sultats de recherche de &quot;&apos; + Titre + &apos;&quot;&apos;;
    while (s &lt;&gt; &apos;&apos;) and re.BeginSearch(ExtractRegEx(s, regExResult), regExResultAlbums) do
    begin
      while re.Find(sAlbum) do
        if re2.BeginSearch(sAlbum, regExResultAlbumsTitre) and re2.Match then
        begin
          lien := re2.GetCaptureByName(&apos;lien&apos;);
          titre_album := re2.GetCaptureByName(&apos;texte&apos;);

          commentaire := &apos;&apos;;
          AjoutString1(commentaire, ExtractRegExGroup(sAlbum, Format(regExInfosDivLink, [&apos;class&apos;, &apos;album-serie&apos;]), &apos;texte&apos;), #13#10, &apos;S&#xE9;rie: &apos;, &apos;&apos;);
          AjoutString1(commentaire, ExtractRegEx(sAlbum, Format(regExInfosDiv, [&apos;class&apos;, &apos;album-tome&apos;])), #13#10, &apos;&apos;, &apos;&apos;);

          if Miniatures then
            thumb := Trim(ExtractRegEx(sAlbum, regExIMG))
          else
            thumb := &apos;&apos;;

          if thumb &lt;&gt; &apos;&apos; then
            c.AjoutChoixWithThumb(&apos;Album&apos;, titre_album, commentaire, lien, thumb)
          else
            c.AjoutChoix(&apos;Album&apos;, titre_album, commentaire, lien);
        end;

      if MatchRegEx(s, &apos;&lt;input class=&apos;&apos;suivant&apos;&apos; type=&apos;&apos;submit&apos;&apos;.*?/&gt;&apos;) then
      begin
        Inc(idPage);
        Pieces[0].Valeur := IntToStr(idPage);
        s := PostPage(urlSearch, Pieces, True);
      end
      else
        s := &apos;&apos;;
    end;
    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    re2.Free;
    c.Free;
  end;
end;

var
  id_album, entry: string;
  index: integer;
begin
  entry := AlbumToImport.DefaultSearch;
  index := 0;
  if not AskSearchEntry([&apos;Titre de l&apos;&apos;album&apos;, &apos;Titre de la s&#xE9;rie&apos;, &apos;Auteur&apos;, &apos;ID de l&apos;&apos;album&apos;], entry, index) then Exit;

  case index of
    0: id_album := RechercheParTitre(&apos;album&apos;, entry);
    1: id_album := RechercheParTitre(&apos;serie&apos;, entry);
    2: id_album := RechercheParTitre(&apos;auteur&apos;, entry);
    else
      id_album := entry;
  end;
  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end.</Code>
</Script>
