<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Script>
  <Infos>
    <Auteur>Tetram Corp</Auteur>
    <Description/>
    <ScriptVersion>1.3</ScriptVersion>
    <BDVersion>2.2.3.29</BDVersion>
    <LastUpdate>Sun, 18 May 2014 16:08:20 +0200</LastUpdate>
    <Engine>PascalScript</Engine>
  </Infos>
  <Options>
    <Option Label="Type de recherche" Values="Uniquement BD|Uniquement Jeunesse|Les deux" Default="Les deux"/>
    <Option Label="Miniatures dans les recherches" Values="Oui|Non" Default="Oui"/>
  </Options>
  <Code>program Casterman;

uses ScriptFonctions;

const
  urlSite = &apos;http://www.casterman.com&apos;;
  urlSearchBD = &apos;http://bd.casterman.com/Search_Result.cfm?TypeSearch=Catalogue&amp;keywords=&apos;;
  urlSearchJeunesse = &apos;http://jeunesse.casterman.com/Search_Result.cfm?TypeSearch=Catalogue&amp;keywords=&apos;;

  regExResultAlbums =
    &apos;&lt;div class=&quot;highlights searchresult&quot;&gt;[\r|\n|\t|\s]*&lt;div class=&quot;visu&quot;&gt;[\r|\n|\t|\s]*(?:&lt;a(?:.*?)&gt;&apos;
    + &apos;&lt;img(?: src=&quot;(?&lt;thumb&gt;.*?)&quot;|.*?)*/&gt;&lt;/a&gt;)?[\r|\n|\t|\s]*&amp;nbsp;[\r|\n|\t|\s]*&lt;/div&gt;[\r|\n|\t|\s]*&lt;div class=&quot;details&quot;&gt;[\r|\n|\t|\s]*&apos;
    + &apos;&lt;div class=&quot;title&quot;&gt;[\r|\n|\t|\s]*&lt;span&gt;Album :&lt;/span&gt;&lt;a(?: href=&quot;(?&lt;lien&gt;.*?)&quot;|.*?)*&gt;(?&lt;titre_album&gt;.*?)&lt;/a&gt;[\r|\n|\t|\s]*&lt;/div&gt;&apos;
    + &apos;(?&lt;commentaire&gt;(?s-).*?)&lt;/div&gt;[\r|\n|\t|\s]*&lt;div class=&quot;clearer&quot;&gt;&lt;/div&gt;[\r|\n|\t|\s]*&lt;/div&gt;&apos;;

  regExAlbumTitre = &apos;&lt;div class=&quot;mainTitle&quot;&gt;(?&lt;titre_album&gt;.*?)(?: *)&lt;/div&gt;&apos;;
  regExAlbumAuteurs = &apos;&lt;td class=&quot;authors&quot; width=&quot;50%&quot; valign=&quot;top&quot;&gt;((?s-).*?)&lt;/td&gt;&apos;;
  regExAlbumAuteur = &apos;&lt;span&gt;[\r|\n|\t|\s]*&lt;a(?:.*?)&gt;(?&lt;nom&gt;.*?)&lt;/a&gt;(?:,)?[\r|\n|\t|\s]*&lt;/span&gt;&apos;;
  regExAlbumParution = &apos;&lt;td class=&quot;pubdate&quot;&gt;[\r|\n|\t|\s]*&lt;strong&gt;Date de parution :&lt;/strong&gt;\s*(?&lt;parution&gt;[\d|/]*)[\r|\n|\t|\s]*&lt;/td&gt;&apos;;
  regExAlbumCollection = &apos;&lt;div class=&quot;specs&quot;&gt;Collection : &lt;span&gt;&lt;a(?:.*?)&gt;\s*(?&lt;collection&gt;.*?)\s*&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&apos;;
  regExAlbumSerie = &apos;&lt;div class=&quot;specs&quot;&gt;[\r|\n|\t|\s]*Serie : &lt;a(?: href=&quot;(?&lt;lien&gt;.*?)&quot;|.*?)*&gt;(?&lt;titre_serie&gt;.*?)&lt;/a&gt;[\r|\n|\t|\s]*&lt;/div&gt;&apos;;
  regExAlbumTome = &apos;&lt;div class=&quot;specs&quot;&gt;Tome : &lt;span&gt;(?&lt;tome&gt;\d*)&lt;/span&gt;&lt;/div&gt;&apos;;
  regExAlbumPages = &apos;&lt;div class=&quot;specs&quot;&gt;Pages : &lt;span&gt;(?&lt;pages&gt;\d*)&lt;/span&gt;&lt;/div&gt;&apos;;
  regExAlbumPrix = &apos;&lt;div class=&quot;specs&quot;&gt;Prix : &lt;span&gt;(?&lt;prix&gt;[\d|\.|,]*) &amp;euro;&lt;/span&gt;&lt;/div&gt;&apos;;
  regExAlbumResume = &apos;&lt;div class=&quot;bookDescription&quot;&gt;(?s-:.*?)&lt;div class=&quot;text&quot;&gt;(?&lt;resume&gt;(?s-).*?)&lt;/div&gt;&apos;;
  regExAlbumISBN = &apos;&lt;li&gt;ISBN : ([\d|x|X|-]*)&lt;/li&gt;&apos;;
  regExAlbumCouverture = &apos;&lt;div class=&quot;album-cover-image&quot;&gt;[\r|\n|\t|\s]*&lt;a(?: href=&quot;(?&lt;lien&gt;.*?)&quot;|.*?)*&gt;[\r|\n|\t|\s]*&lt;img(?s-:.*?)&gt;[\r|\n|\t|\s]*&lt;/a&gt;[\r|\n|\t|\s]*&lt;/div&gt;&apos;;
  regExAlbumPrevisu = &apos;&lt;a href=&quot;(?&lt;lien&gt;.*?)&quot; class=&quot;preview&quot;&gt;&lt;span&gt;Pr&#xE9;visualiser&lt;/span&gt;&lt;/a&gt;&apos;;
  regExAlbumPlanche = &apos;&lt;div class=&quot;preview&quot;(?:.*?)&gt;[\r|\n|\t|\s]*&lt;a(?: href=&quot;(?&lt;lien&gt;.*?)&quot;|.*?)*&gt;[\r|\n|\t|\s]*(?:&lt;img(?:.*?)&gt;[\r|\n|\t|\s]*)*&lt;/a&gt;[\r|\n|\t|\s]*&lt;/div&gt;&apos;;

procedure ParseAlbum(const lien: string);
var
  page, nom, s: string;
  re: TBdtkRegEx;
begin
  re := TBdtkRegEx.Create;
  try
    page := GetPage(lien, True);
    AlbumToImport.Titre := PrepareTitre(ExtractRegEx(page, regExAlbumTitre));

    if re.BeginSearch(ExtractRegEx(page, regExAlbumAuteurs), regExAlbumAuteur) then
      while re.Find(nom) do
      begin
        AlbumToImport.Serie.Scenaristes.Add(MakeAuteurSerie(nom, maScenariste));
        AlbumToImport.Scenaristes.Add(MakeAuteurAlbum(nom, maScenariste));
        AlbumToImport.Serie.Dessinateurs.Add(MakeAuteurSerie(nom, maDessinateur));
        AlbumToImport.Dessinateurs.Add(MakeAuteurAlbum(nom, maDessinateur));
      end;

    with TStringList.Create do
      try
        Split(ExtractRegEx(page, regExAlbumParution), &apos;/&apos;);
        if Count &gt; 0 then
          AlbumToImport.AnneeParution := StrToIntDef(Strings[Count - 1], 0);
        if Count &gt; 1 then
          AlbumToImport.MoisParution := TraduitMois(Strings[Count - 2]);
      finally
        Free;
      end;

    AlbumToImport.Serie.Editeur.NomEditeur := &apos;Casterman&apos;;
    AlbumToImport.Serie.Editeur.SiteWeb := urlSite;
    AlbumToImport.Serie.Collection := ExtractRegEx(page, regExAlbumCollection);
    AlbumToImport.Edition.Editeur.NomEditeur := AlbumToImport.Serie.Editeur.NomEditeur;
    AlbumToImport.Edition.Editeur.SiteWeb := AlbumToImport.Serie.Editeur.SiteWeb;
    AlbumToImport.Edition.Collection := AlbumToImport.Serie.Collection;

    if re.BeginSearch(page, regExAlbumSerie) and re.Next then begin
      AlbumToImport.Serie.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_serie&apos;));
      s := re.GetCaptureByName(&apos;lien&apos;);
      if s &lt;&gt; &apos;&apos; then
        AlbumToImport.Serie.SiteWeb := CombineURL(lien, s);
    end;

    AlbumToImport.Tome := StrToIntDef(ExtractRegEx(page, regExAlbumTome), 0);
    AlbumToImport.Edition.NombreDePages := StrToIntDef(ExtractRegEx(page, regExAlbumPages), 0);
    AlbumToImport.Edition.Prix := StrToFloatDef(StringReplace(ExtractRegEx(page, regExAlbumPrix), &apos;,&apos;, &apos;.&apos;, []), 0);
    AlbumToImport.Edition.ISBN := ExtractRegEx(page, regExAlbumISBN);

    AlbumToImport.Sujet := HTMLText(ExtractRegEx(page, regExAlbumResume));

    s := ExtractRegEx(page, regExAlbumCouverture);
    if s &lt;&gt; &apos;&apos; then
      AlbumToImport.Edition.AddImageFromURL(CombineURL(lien, s), ctiCouverture);

    s := ExtractRegEx(page, regExAlbumPrevisu);
    if s &lt;&gt; &apos;&apos; then
    begin
      lien := CombineURL(lien, s);
      page := GetPage(lien, True);

      if re.BeginSearch(page, regExAlbumPlanche) then
        while re.Find(s) do
          if (s &lt;&gt; &apos;&apos;) and (ExtractFileName(s) &lt;&gt; &apos;club.cfm&apos;) then
            AlbumToImport.Edition.AddImageFromURL(CombineURL(lien, s), ctiPlanche);
    end;
  finally
    re.Free;
  end;

  AlbumToImport.Import;
end;

function RechercheParTitre(const Titre: string): string;
var
  page, lien: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
  id, titre_album, commentaire, thumb: string;
  Added, Miniatures: Boolean;
  OptionRecherche: Integer;
  Jeunesse, BD: Boolean;
begin
  Result := &apos;&apos;;

  OptionRecherche := GetOptionValueIndex(&apos;Type de recherche&apos;, 2);
  BD := (OptionRecherche = 0) or (OptionRecherche = 2);
  Jeunesse := (OptionRecherche = 1) or (OptionRecherche = 2);

  Result := &apos;&apos;;
  Miniatures := GetOptionValue(&apos;Miniatures dans les recherches&apos;, &apos;Oui&apos;) = &apos;Oui&apos;;
  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;R&#xE9;sultats de recherche de &quot;&apos; + Titre + &apos;&quot;&apos;;

    if BD then
    begin
      lien := urlSearchBD + Titre;
      page := GetPage(lien, True);
      Added := False;
      if re.BeginSearch(page, regExResultAlbums) then
        while re.Next do begin
          if Miniatures then
            thumb := re.GetCaptureByName(&apos;thumb&apos;)
          else
            thumb := &apos;&apos;;
          if thumb &lt;&gt; &apos;&apos; then
            thumb := CombineURL(lien, thumb);
          id := re.GetCaptureByName(&apos;lien&apos;);
            id := CombineURL(lien, id);
          titre_album := HTMLText(re.GetCaptureByName(&apos;titre_album&apos;));
          commentaire := HTMLText(re.GetCaptureByName(&apos;commentaire&apos;));
          if Length(commentaire) &gt; 250 then commentaire := Copy(commentaire, 1, 247) + &apos;...&apos;;
          if thumb &lt;&gt; &apos;&apos; then
            c.AjoutChoixWithThumb(&apos;BD&apos;, titre_album, commentaire, id, thumb)
          else
            c.AjoutChoix(&apos;BD&apos;, titre_album, commentaire, id);
          Added := True;
        end;
      if not Added then c.AjoutChoix(&apos;BD&apos;, &apos;Aucun&apos;, &apos;&apos;, &apos;&apos;);
    end;

    if Jeunesse then
    begin
      lien := urlSearchJeunesse + Titre;
      page := GetPage(lien, True);
      Added := False;
      if re.BeginSearch(page, regExResultAlbums) then
        while re.Next do begin
          if Miniatures then
            thumb := re.GetCaptureByName(&apos;thumb&apos;)
          else
            thumb := &apos;&apos;;
          if thumb &lt;&gt; &apos;&apos; then
            thumb := CombineURL(lien, thumb);
          id := re.GetCaptureByName(&apos;lien&apos;);
            id := CombineURL(lien, id);
          titre_album := HTMLText(re.GetCaptureByName(&apos;titre_album&apos;));
          commentaire := HTMLText(re.GetCaptureByName(&apos;commentaire&apos;));
          if Length(commentaire) &gt; 250 then commentaire := Copy(commentaire, 1, 247) + &apos;...&apos;;
          if thumb &lt;&gt; &apos;&apos; then
            c.AjoutChoixWithThumb(&apos;Jeunesse&apos;, titre_album, commentaire, id, thumb)
          else
            c.AjoutChoix(&apos;Jeunesse&apos;, titre_album, commentaire, id);
          Added := True;
        end;
      if not Added then c.AjoutChoix(&apos;Jeunesse&apos;, &apos;Aucun&apos;, &apos;&apos;, &apos;&apos;);
    end;

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

var
  id_album, entry: string;
  index: integer;
begin
  entry := AlbumToImport.DefaultSearch;
  index := 1;
  if not AskSearchEntry([&apos;ISBN&apos;, &apos;Titre de l&apos;&apos;album ou de la s&#xE9;rie&apos;, &apos;Lien&apos;], entry, index) then Exit;

  id_album := &apos;&apos;;
  case index of
    0, 1: id_album := RechercheParTitre(entry);
    2: id_album := entry
  end;

  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end.</Code>
</Script>
