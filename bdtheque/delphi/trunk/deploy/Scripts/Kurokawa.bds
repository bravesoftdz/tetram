<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Script>
  <Infos>
    <Auteur>Tetram Corp</Auteur>
    <Description/>
    <ScriptVersion>1.3</ScriptVersion>
    <BDVersion>2.2.3.29</BDVersion>
    <LastUpdate>Sun, 18 May 2014 16:14:28 +0200</LastUpdate>
    <Engine>PascalScript</Engine>
  </Infos>
  <Options/>
  <Code>program Kurokawa;

uses ScriptFonctions;

const
  urlSite = &apos;http://www.kurokawa.fr&apos;;
  urlSearch = &apos;/recherche/?q=&apos;;

  regExResultAlbums = &apos;&lt;div id=&quot;books&quot;&gt;((?s-).*?)&lt;/div&gt;&apos;;
  regExResult = &apos;&lt;td class=&quot;case_1 row_\d&quot;&gt;&lt;a(?: href=&quot;(?&lt;id_album&gt;.*?)&quot;|.*?)*&gt;(?&lt;titre_album&gt;.*?)&lt;/a&gt;&lt;/td&gt;&apos;;

  regExAlbumTitre = &apos;&lt;th width=&quot;100&quot;&gt;Titre&lt;/th&gt;[\r|\n|\t|\s]*&lt;td&gt;&lt;strong&gt;(?&lt;titre_serie&gt;.*?)(?: - (?:T(?&lt;tome&gt;\d*))?\s?(?&lt;titre_album&gt;.*?))?&lt;/strong&gt;&lt;/td&gt;&apos;;
  regExAlbumAuteur = &apos;&lt;th&gt;Auteur\(s\)&lt;/th&gt;[\r|\n|\t|\s]*&lt;td&gt;&lt;span class=&quot;author&quot;&gt;(?&lt;nom&gt;.*?)&lt;/span&gt;&lt;/td&gt;&apos;;
  regExAlbumCollection = &apos;&lt;th&gt;Collection&lt;/th&gt;[\r|\n|\t|\s]*&lt;td&gt;&lt;a(?:.*?)&gt;(?&lt;collection&gt;.*?)&lt;/a&gt;&lt;/td&gt;&apos;;
  regExAlbumParution = &apos;&lt;th width=&quot;124&quot;&gt;Date de parution&lt;/th&gt;&lt;td&gt;([\d|/]*)&lt;/td&gt;&apos;;
  regExAlbumISBN = &apos;&lt;th class=&quot;right&quot;&gt;Code ISBN&lt;/th&gt;&lt;td&gt;([\d|x|X|-]*)&lt;/td&gt;&apos;;
  regExAlbumPrix = &apos;&lt;th&gt;Prix&lt;/th&gt;&lt;td&gt;&lt;strong&gt;&#x20AC;([\d|\.|,]*)&lt;/strong&gt;&lt;/td&gt;&apos;;
  regExAlbumPages = &apos;&lt;th&gt;Nombre de pages&lt;/th&gt;&lt;td&gt;(\d*)&lt;/td&gt;&apos;;
  regExAlbumResume = &apos;&lt;div class=&quot;couv&quot;&gt;(?s-:.*?)&lt;div class=&quot;txt&quot;&gt;(?&lt;resume&gt;(?s-).*?)&lt;/div&gt;[\r|\n|\t|\s]*&lt;/div&gt;&apos;;
  regExAlbumCouverture = &apos;so\.addVariable\(&apos;&apos;media&apos;&apos;, &apos;&apos;(?&lt;couverture&gt;.*?)&apos;&apos;\);&apos;;

procedure ParseAlbum(const id_album: string);
var
  page, auteur, s: string;
  re: TBdtkRegEx;
begin
  page := GetPage(CombineURL(urlSite, id_album), True);

  re := TBdtkRegEx.Create;
  try
    if re.BeginSearch(page, regExAlbumTitre) and re.Next then
    begin
      AlbumToImport.Serie.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_serie&apos;));
      AlbumToImport.Tome := StrToIntDef(re.GetCaptureByName(&apos;tome&apos;), 0);
      AlbumToImport.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_album&apos;));
      if AlbumToImport.Titre = AlbumToImport.Serie.Titre then AlbumToImport.Titre := &apos;&apos;;
    end;

    auteur := ExtractRegEx(page, regExAlbumAuteur);
    if auteur &lt;&gt; &apos;&apos; then
    begin
      AlbumToImport.Scenaristes.Add(MakeAuteurAlbum(auteur, maScenariste));
      AlbumToImport.Serie.Scenaristes.Add(MakeAuteurSerie(auteur, maScenariste));
      AlbumToImport.Dessinateurs.Add(MakeAuteurAlbum(auteur, maDessinateur));
      AlbumToImport.Serie.Dessinateurs.Add(MakeAuteurSerie(auteur, maDessinateur));
    end;

    AlbumToImport.Serie.Editeur.NomEditeur := &apos;Kurokawa&apos;;
    AlbumToImport.Serie.Editeur.SiteWeb := urlSite;
    AlbumToImport.Serie.Collection := ExtractRegEx(page, regExAlbumCollection);
    AlbumToImport.Edition.Editeur.NomEditeur := AlbumToImport.Serie.Editeur.NomEditeur;
    AlbumToImport.Edition.Editeur.SiteWeb := AlbumToImport.Serie.Editeur.SiteWeb;
    AlbumToImport.Edition.Collection := AlbumToImport.Serie.Collection;

    AlbumToImport.Edition.ISBN := ExtractRegEx(page, regExAlbumISBN);
    AlbumToImport.Edition.Prix := StrToFloatDef(ExtractRegEx(page, regExAlbumPrix), 0);
    AlbumToImport.Edition.NombreDePages := StrToIntDef(ExtractRegEx(page, regExAlbumPages), 0);

    with TStringList.Create do
    try
      Split(ExtractRegEx(page, regExAlbumParution), &apos;/&apos;);
      if Count &gt; 0 then
        AlbumToImport.AnneeParution := StrToIntDef(Strings[Count - 1], 0);
      if Count &gt; 1 then
        AlbumToImport.MoisParution := TraduitMois(Strings[Count - 2]);
    finally
      Free;
    end;

    AlbumToImport.Sujet := HTMLText(ExtractRegEx(page, regExAlbumResume));

    s :=ExtractRegEx(page, regExAlbumCouverture);
    if s &lt;&gt; &apos;&apos; then
    begin
      s := ChangeFileExt(s, &apos;.JPG&apos;);
      s := ChangeFilePath(s, &apos;/uploads/oeuvres/zoom&apos;);
      AlbumToImport.Edition.AddImageFromURL(CombineURL(urlSite, s), ctiCouverture);
    end;
  finally
    re.Free;
  end;

  AlbumToImport.Import;
end;

function RechercheParTitre(const Titre: string): string;
var
  page: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
  id, titre_album: string;
begin
  Result := &apos;&apos;;
  page := GetPage(urlSite + urlSearch + Titre, True);
  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;R&#xE9;sultats de recherche de &quot;&apos; + Titre + &apos;&quot;&apos;;
    if re.BeginSearch(ExtractRegEx(page, regExResultAlbums), regExResult) then
      while re.Next do begin
        id := re.GetCaptureByName(&apos;id_album&apos;);
        titre_album := re.GetCaptureByName(&apos;titre_album&apos;);
        c.AjoutChoix(&apos;Album&apos;, titre_album, &apos;&apos;, id);
      end;

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

var
  id_album, entry: string;
  index: integer;
begin
  entry := AlbumToImport.DefaultSearch;
  index := 0;
  if not AskSearchEntry([&apos;Titre de l&apos;&apos;album ou de la s&#xE9;rie&apos;, &apos;Lien&apos;], entry, index) then Exit;

  id_album := &apos;&apos;;
  case index of
    0: id_album := RechercheParTitre(entry);
    1: id_album := entry
  end;

  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end.</Code>
</Script>
