<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Script>
  <Infos>
    <Auteur>Tetram Corp</Auteur>
    <Description/>
    <ScriptVersion>1.4</ScriptVersion>
    <BDVersion>2.2.3.29</BDVersion>
    <LastUpdate>Sun, 18 May 2014 16:11:22 +0200</LastUpdate>
    <Engine>PascalScript</Engine>
    <Alias aka="Vents d&apos;Ouest"/>
  </Infos>
  <Options>
    <Option Label="Recherche Gl&#xE9;nat BD" Values="Oui|Non" Default="Oui"/>
    <Option Label="Recherche Gl&#xE9;nat Manga" Values="Oui|Non" Default="Oui"/>
    <Option Label="Recherche Vents d&apos;Ouest" Values="Oui|Non" Default="Oui"/>
  </Options>
  <Code>program Glenat;

uses ScriptFonctions;

const
  urlSearch = &apos;http://www.glenat.com/cherche.asp?CRITERE=TXT_TITRE&amp;EDITEUR=088343089091090092341040111468470&amp;TXT_TITRE=&apos;;
  urlBDPlanches = &apos;/flash/livre.php?ean13=&apos;; // + isbn/ean

  regExSearchResultats = &apos;&lt;img(?:.*?)marecherche(?:.*?)&gt;(?s-:.*?)&lt;table(?:.*?)&gt;((?s-:.*?)&lt;tr class=ligne[1|2]&gt;(?s-:.*?))&lt;/table&gt;&apos;;
  regExSearchResultatsLigne = &apos;((?s-)&lt;tr(?:.*?)(?:.*?)&lt;/tr&gt;)&apos;;
  regExSearchResultatsLigneSerie = &apos;&lt;tr&gt;&lt;td(?:.*?)class=titre&gt;(?:&lt;(?:.*?)&gt;)*(?&lt;titre_serie&gt;.*?)&lt;/td&gt;&lt;/tr&gt;&apos;;
  regExSearchResultatsLigneAlbum = &apos;&lt;tr class=ligne[1|2]&gt;(?s-:.*?)&lt;td(?s-:.*?)&gt;(?s-:.*?)&lt;a href=&quot;(?&lt;lien&gt;.*?)&quot;&gt;(?s-:.*?)&lt;!--(?s-:.*?)--&gt;[\r|\n|\t|\s]*(?&lt;tome&gt;.*?)[\r|\n|\t|\s]*&lt;/a&gt;(?:[\r|\n|\t|\s]*&apos;
   + &apos;&lt;font(?s-:.*?)&gt;&lt;br&gt;[\r|\n|\t|\s]*&lt;i&gt;(?&lt;titre_album&gt;.*?)&lt;/i&gt;&lt;/font&gt;)*(?s-:.*?)&lt;td(?s-:.*?)&gt;&lt;font(?:.*?)&gt;(?&lt;auteur&gt;.*?)&lt;/font&gt;&lt;/td&gt;(?s-:.*?)&lt;div(?:.*?)&gt;&lt;font(?:.*?)&gt;[\r|\n|\t|\s]*(?&lt;parution&gt;.*?)[\r|\n|\t|\s]*&apos;
   + &apos;&lt;/font&gt;&lt;/div&gt;(?s-:.*?)&lt;td(?:.*?)&gt;&lt;font(?:.*?)&gt;(?&lt;editeur&gt;.*?)&lt;/font&gt;(?s-:.*?)&lt;/td&gt;(?s-:.*?)&lt;/tr&gt;&apos;;

  regExMangaCouverture = &apos;&lt;div class=&quot;fiche_gauche&quot;&gt;(?s-:.*?)&lt;img src=&quot;(?&lt;couverture&gt;.*?)&quot;(?:.*?)/&gt;(?s-:.*?)&lt;div(?:.*?)&gt;(?s-:.*?)&lt;img(?:.*?)/&gt;(?s-:.*?)&lt;p(?:.*?)&gt;(?s-:.*?)&lt;br /&gt;(?&lt;edition&gt;.*?)&lt;/p&gt;(?s-:.*?)&lt;/div&gt;(?s-:.*?)&lt;/div&gt;&apos;;
  regExMangaInfos = &apos;&lt;div class=&quot;fiche_droite&quot;&gt;((?s-).*?)&lt;div class=&quot;clearring&quot;&gt;&apos;;
  regExMangaSerie = &apos;&lt;h1(?:.*?)&gt;(?&lt;titre_serie&gt;.*?)(?:#(?&lt;tome&gt;\d+)|)*&lt;/h1&gt;&apos;;
  regExMangaTitre = &apos;&lt;h2(?:.*?)&gt;(?&lt;titre_album&gt;.*?)&lt;/h2&gt;&apos;;
  regExMangaDetail = &apos;&lt;p(?:.*?)&gt;(?&lt;data&gt;(?s-).*?)&lt;/p&gt;&apos;; // infos, puis r&#xE9;sum&#xE9;
  regExMangaAuteur = &apos;&lt;div class=&quot;mini_auteur&quot;&gt;(?s-:.*?)&lt;h2(?:.*?)&gt;(?s-:.*?)&lt;a(?:.*?)&gt;[\r|\n|\t|\s]*(?&lt;auteur&gt;.*?)[\r|\n|\t|\s]*&lt;/a&gt;(?s-:.*?)&lt;/h2&gt;&apos;;

  regExBDCouverture = &apos;&lt;td class=&quot;frame left&quot;&gt;(?s-:.*?)&lt;img(?: src=&quot;(?&lt;couverture&gt;.*?)&quot;|.*?)*/&gt;(?s-:.*?)&lt;/td&gt;&apos;;
  regExBDInfos = &apos;&lt;td class=&quot;frame main&quot;&gt;((?s-).*?)&lt;/td&gt;&apos;;
  regExBDSerie = &apos;&lt;h1 class=&quot;title&quot;&gt;(.*?)&lt;/h1&gt;&apos;;
  regExBDTome = &apos;&lt;h2 class=&quot;tome&quot;&gt;(?:\D*?)(\d*?)&lt;/h2&gt;&apos;;
  regExBDTitre = &apos;&lt;h3 class=&quot;subtitle&quot;&gt;(.*?)&lt;/h3&gt;&apos;;
  regExBDCollection = &apos;&lt;li class=&quot;collection&quot;&gt;(?s-:.*?)&lt;a(?:.*?)&gt;(.*?)&lt;/a&gt;&apos;;
  regExBDPages = &apos;&lt;li class=&quot;pages&quot;&gt;(\d*?)(?:\D*?)&lt;/li&gt;&apos;;
  regExBDParution = &apos;&lt;li class=&quot;date&quot;&gt;(?:(?:[a-zA-Z]| )*?)([\d|.|,]*?)&lt;/li&gt;&apos;;
  regExBDISBN = &apos;&lt;li class=&quot;ean&quot;&gt;EAN/ISBN(?:[ |:]*?)([\d|x|X|-]*?)&lt;/li&gt;&apos;;
  regExBDPrix = &apos;&lt;li class=&quot;price&quot;&gt;Prix(?:[ |:]*?)([\d|\.|,]*?)(?s-:.*?)&lt;/li&gt;&apos;;
  regExBDGenres = &apos;&lt;li class=&quot;genres&quot;&gt;Genres:(.*?)&lt;/li&gt;&apos;;
  regExBDTermine = &apos;&lt;span class=&quot;statut&quot;&gt;(.*?)&lt;/span&gt;&apos;;
  regExBDResume = &apos;&lt;div class=&quot;text&quot;&gt;(.*?)&lt;/div&gt;&apos;;
  regExBDAuteurs = &apos;&lt;ul class=&quot;authors&quot;&gt;((?s-).*?)&lt;/ul&gt;&apos;;
  regExBDAuteur = &apos;&lt;span(?:.*?)&gt;(?&lt;metier&gt;.*?)&lt;/span&gt;[\r|\n|\t|\s]*&lt;a(?:.*?)&gt;(?&lt;nom&gt;.*?)&lt;/a&gt;&apos;;

  urlInfoAlbum = &apos;http://www.dargaud.com/front/albums/xml/album.aspx?id=&apos;; // + id_album
  urlInfoAlbumSerie = &apos;http://www.dargaud.com/front/albums/xml/album_serie.aspx?id=&apos;; // + id_album

  urlInfoSerie = &apos;http://www.dargaud.com/front/albums/series/xml/serie.aspx?id=&apos;; // + id_serie
  urlPageSerie = &apos;http://www.dargaud.com/front/albums/series/serie.aspx?id=&apos;; // + id_serie

  regExResultAlbums = &apos;&lt;object id=&apos;&apos;header(?:.*?)classid=&apos;&apos;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000(?:.*?)value=(?:.*?)titre=Albums(?:.*?)&lt;/object&gt;&lt;/td&gt;[\r|\n|\t|\s]*((?s-).*?)[\r|\n|\t|\s]*&lt;td&gt;&amp;nbsp;&lt;/td&gt;&apos;;
  regExResultSeries = &apos;&lt;object id=&apos;&apos;header(?:.*?)classid=&apos;&apos;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000(?:.*?)value=(?:.*?)titre=S&#xE9;ries(?:.*?)&lt;/object&gt;&lt;/td&gt;[\r|\n|\t|\s]*((?s-).*?)[\r|\n|\t|\s]*&lt;td&gt;&amp;nbsp;&lt;/td&gt;&apos;;
  regExResult = &apos;&lt;td class=&quot;result&quot;&gt;&lt;span&gt;(?:.*?)&lt;/span&gt;(.*?)&lt;/td&gt;&apos;;
  regExResultAlbumsTitre = &apos;&lt;a class=&quot;rechercheBold&quot; href=&quot;(?:.*?)&quot;&gt;(.*?)&lt;/a&gt;&apos;;
  regExResultAlbumsDetails = &apos;&lt;br&gt;&amp;nbsp;&amp;nbsp;%s&amp;nbsp;: &lt;/span&gt;&lt;a class=&quot;recherche&quot; href=(?:.*?)&gt;(.*?)&lt;/a&gt;&apos;;

  regExSerieTitre = &apos;&lt;serie(?:.*?)titre=&quot;(.*?)&quot;&apos;;
  regExSerieAlbums = &apos;&lt;albums&gt;(.*?)&lt;/albums&gt;&apos;;
  regExSerieAlbum = &apos;&lt;album(.*?)/&gt;&apos;;
  regExSerieAlbumId = &apos;id=&quot;(.*?)&quot;&apos;;
  regExSerieAlbumType = &apos;type=&quot;(.*?)&quot;&apos;;
  regExSerieAlbumTitre = &apos;titre=&quot;(.*?)&quot;&apos;;
  regExSerieAlbumAnnee = &apos;annee=&quot;(.*?)&quot;&apos;;
  regExSerieAlbumAuteurs = &apos;auteurs=&quot;(.*?)&quot;&apos;;

  regExAlbumSerieId = &apos;&lt;album_serie(?:.*?)ser_id=&quot;(.*?)&quot;(?:.*?)&gt;&apos;;
  regExAlbumSerieTitre = &apos;&lt;album_serie(?:.*?)ser_titre=&quot;(.*?)&quot;(?:.*?)&gt;&apos;;
  regExAlbumSerieNbAlbums = &apos;&lt;album_serie(?:.*?)nbr_alb=&quot;(.*?)&quot;(?:.*?)&gt;&apos;;

  regExAlbumTitre = &apos;&lt;album(?:.*?)titre=&quot;(.*?)&quot;&apos;;
  regExAlbumISBN = &apos;&lt;album(?:.*?)isbn=&quot;(.*?)&quot;&apos;;
  regExAlbumResume = &apos;&lt;album(?:.*?)texte=&quot;(.*?)&quot;&apos;;
  regExAlbumTome = &apos;&lt;album(?:.*?)tome=&quot;(?:\D*?)(\d*?)&quot;&apos;;
  regExAlbumParution = &apos;&lt;album(?:.*?)date=&quot;(.*?)&quot;&apos;;
  regExAlbumPrix = &apos;&lt;album(?:.*?)prix=&quot;(.*?)&quot;&apos;;
  regExAlbumPages = &apos;&lt;album(?:.*?)pages=&quot;(.*?)&quot;&apos;;
  regExAlbumCouverture = &apos;&lt;album(?:.*?)media=&quot;(.*?)&quot;&apos;;
  regExAlbumAuteurs = &apos;&lt;peoples&gt;(.*?)&lt;/peoples&gt;&apos;;
  regExAlbumAuteur = &apos;&lt;people(.*?)/&gt;&apos;;
  regExAlbumAuteurType = &apos;type=&quot;(.*?)&quot;&apos;;
  regExAlbumAuteurNom = &apos;nom=&quot;(.*?)&quot;&apos;;

function IsLienManga(const Lien: string): Boolean;
begin
  Result := Pos(&apos;glenatmanga&apos;, lien) &gt; 0;
end;

function IsLienBD(const Lien: string): Boolean;
begin
  Result := Pos(&apos;glenatbd&apos;, lien) &gt; 0;
end;

function IsLienVO(const Lien: string): Boolean;
begin
  Result := Pos(&apos;ventsdouest&apos;, lien) &gt; 0;
end;

procedure ParseManga(const lien: string);
var
  page, s, data, auteur: string;
  re: TBdtkRegEx;
begin
  page := GetPage(lien, False);

  re := TBdtkRegEx.Create;
  try
    s := ExtractRegEx(page, regExMangaInfos);
    if re.BeginSearch(s, regExMangaSerie) and re.Next then
    begin
      AlbumToImport.Serie.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_serie&apos;));
      AlbumToImport.Tome := StrToIntDef(re.GetCaptureByName(&apos;tome&apos;), 0);
    end;
    AlbumToImport.Titre := PrepareTitre(ExtractRegEx(s, regExMangaTitre));
    if AlbumToImport.Titre = AlbumToImport.Serie.Titre then AlbumToImport.Titre := &apos;&apos;;

    if re.BeginSearch(s, regExMangaDetail) and re.Next then
    begin
      data := re.GetCaptureByName(&apos;data&apos;);
      AlbumToImport.Serie.Collection := ExtractRegEx(data, &apos;&lt;a(?:.*?)&gt;(?:Collection )?(.*?)&lt;/a&gt;&apos;);
      AlbumToImport.Edition.Collection := AlbumToImport.Serie.Collection;
      AlbumToImport.Edition.NombreDePages := StrToIntDef(ExtractRegEx(data, &apos;(\d+) pages&apos;), 0);
      AlbumToImport.Edition.ISBN := CleanISBN(ExtractRegEx(data, &apos;ISBN(?:[ |:]*)([\d|x|X|-]+)&apos;));
      if AlbumToImport.Edition.ISBN = &apos;&apos; then
        AlbumToImport.Edition.ISBN := CleanISBN(ExtractRegEx(data, &apos;EAN(?:[ |:]*)([\d|x|X|-]+)&apos;));
      AlbumToImport.Edition.Prix := StrToFloatDef(ExtractRegEx(data, &apos;Prix(?:[ |:]*)([\d|.|,]+)&apos;), 0);

      with TStringList.Create do
        try
          Split(ExtractRegEx(data, &apos;Paru en ([\w|\d|&#xFB;|&#xE9;|&#xE8;|&#xEA;| ]*)&apos;), &apos; &apos;);
          if Count &gt; 0 then
            AlbumToImport.AnneeParution := StrToIntDef(Strings[Count - 1], 0);
          if Count &gt; 1 then
            AlbumToImport.MoisParution := TraduitMois(Strings[Count - 2]);
        finally
          Free;
        end;

      if ExtractRegEx(s, &apos;&lt;div id=&quot;Alerte&quot;&gt;((?s-).*?)&lt;/div&gt;&apos;) &lt;&gt; &apos;&apos; then
        re.BeginSearch(s, &apos;&lt;div id=&quot;Alerte&quot;&gt;(?:(?s-).*?)&lt;/div&gt;[\r|\n|\t|\s]*&apos; + regExMangaDetail);

      if re.Next then
        AlbumToImport.Sujet := HTMLText(re.GetCaptureByName(&apos;data&apos;));
    end;

    AlbumToImport.Serie.Editeur.NomEditeur := &apos;Glenat Manga&apos;;
    AlbumToImport.Serie.Editeur.SiteWeb := &apos;http://www.glenatmanga.com&apos;;
    AlbumToImport.Edition.Editeur.NomEditeur := AlbumToImport.Serie.Editeur.NomEditeur;
    AlbumToImport.Edition.Editeur.SiteWeb := AlbumToImport.Serie.Editeur.SiteWeb;

    auteur := ExtractRegEx(page, regExMangaAuteur);
    AlbumToImport.Scenaristes.Add(MakeAuteurAlbum(auteur, maScenariste));
    AlbumToImport.Dessinateurs.Add(MakeAuteurAlbum(auteur, maDessinateur));
    AlbumToImport.Serie.Scenaristes.Add(MakeAuteurSerie(auteur, maScenariste));
    AlbumToImport.Serie.Dessinateurs.Add(MakeAuteurSerie(auteur, maDessinateur));

    if re.BeginSearch(page, regExMangaCouverture) and re.Next then begin
      s := re.GetCaptureByName(&apos;couverture&apos;);
      if s &lt;&gt; &apos;&apos; then
        AlbumToImport.Edition.AddImageFromURL(CombineURL(lien, s), ctiCouverture);

      s := re.GetCaptureByName(&apos;edition&apos;);
      if Pos(&apos;en cours&apos;, s) &gt; 0 then AlbumToImport.Serie.Terminee := 0;
      if Pos(&apos;termin&#xE9;e&apos;, s) &gt; 0 then AlbumToImport.Serie.Terminee := 1;
    end;
  finally
    re.Free;
  end;

  AlbumToImport.Import;
end;

procedure ParseBD(const lien: string);
var
  page, images, auteur, metier, s, termine: string;
  imgAdded: Boolean;
begin
  page := GetPage(lien, True);

  s := ExtractRegEx(page,  regExBDInfos);
  AlbumToImport.Serie.Titre := PrepareTitre(ExtractRegEx(s,  regExBDSerie));
  AlbumToImport.Titre := PrepareTitre(ExtractRegEx(s,  regExBDTitre));
  AlbumToImport.Tome := StrToIntDef(ExtractRegEx(s,  regExBDTome), 0);
  AlbumToImport.Sujet := HTMLText(ExtractRegEx(s,  regExBDResume));

  AlbumToImport.Edition.NombreDePages := StrToIntDef(ExtractRegEx(s,  regExBDPages), 0);
  AlbumToImport.Edition.ISBN := ExtractRegEx(s,  regExBDISBN);
  AlbumToImport.Edition.Prix := StrToFloatDef(ExtractRegEx(s,  regExBDPrix), 0);
  with TStringList.Create do
    try
      Split(ExtractRegEx(s, regExBDParution), &apos;.&apos;);
      if Count &gt; 0 then
        AlbumToImport.AnneeParution := StrToIntDef(Strings[Count - 1], 0);
      if Count &gt; 1 then
        AlbumToImport.MoisParution := TraduitMois(Strings[Count - 2]);
    finally
      Free;
    end;

  if IsLienVO(lien) then
  begin
    AlbumToImport.Serie.Editeur.NomEditeur := &apos;Vents d&apos;&apos;Ouest&apos;;
    AlbumToImport.Serie.Editeur.SiteWeb := &apos;http://www.ventsdouest.com&apos;;
  end
  else
  begin
    AlbumToImport.Serie.Editeur.NomEditeur := &apos;Glenat BD&apos;;
    AlbumToImport.Serie.Editeur.SiteWeb := &apos;http://www.glenatbd.com&apos;;
  end;
  AlbumToImport.Serie.Collection := ExtractRegEx(s,  regExBDCollection);
  AlbumToImport.Edition.Editeur.NomEditeur := AlbumToImport.Serie.Editeur.NomEditeur;
  AlbumToImport.Edition.Editeur.SiteWeb := AlbumToImport.Serie.Editeur.SiteWeb;
  AlbumToImport.Edition.Collection := AlbumToImport.Serie.Collection;

  with TBdtkRegEx.Create do
    try
      if BeginSearch(ExtractRegEx(s, regExBDAuteurs), regExBDAuteur) then
        while Next do begin
          auteur := GetCaptureByName(&apos;nom&apos;);
          metier := GetCaptureByName(&apos;metier&apos;);
          if (metier = &apos;Dessinateur&apos;) or (metier = &apos;Auteur&apos;) then
          begin
            AlbumToImport.Dessinateurs.Add(MakeAuteurAlbum(auteur, maDessinateur));
            AlbumToImport.Serie.Dessinateurs.Add(MakeAuteurSerie(auteur, maDessinateur));
          end;
          if (metier = &apos;Sc&#xE9;nariste&apos;) or (metier = &apos;Auteur&apos;) then
          begin
            AlbumToImport.Scenaristes.Add(MakeAuteurAlbum(auteur, maScenariste));
            AlbumToImport.Serie.Scenaristes.Add(MakeAuteurSerie(auteur, maScenariste));
          end;
          if (metier = &apos;Coloriste&apos;) or (metier = &apos;Auteur&apos;) then
          begin
            AlbumToImport.Coloristes.Add(MakeAuteurAlbum(auteur, maColoriste));
            AlbumToImport.Serie.Coloristes.Add(MakeAuteurSerie(auteur, maColoriste));
          end;
        end;

      if BeginSearch(ExtractRegEx(s, regExBDGenres), &apos;&lt;a(?:.*?)&gt;(?&lt;genre&gt;.*?)&lt;/a&gt;&apos;) then
        while Next do
          AlbumToImport.Serie.Genres.Add(GetCaptureByName(&apos;genre&apos;));
    finally
      Free;
    end;

  termine := ExtractRegEx(s, regExBDTermine);
  if Pos(&apos;en cours&apos;, termine) &gt; 0 then AlbumToImport.Serie.Terminee := 0;
  if Pos(&apos;termin&#xE9;e&apos;, termine) &gt; 0 then AlbumToImport.Serie.Terminee := 1;

  imgAdded := False;
  if AlbumToImport.Edition.ISBN &lt;&gt; &apos;&apos; then
  begin
    images := GetPage(CombineURL(lien, urlBDPlanches + AlbumToImport.Edition.ISBN), True);
    if images &lt;&gt; &apos;&apos; then
    begin
      with TBdtkRegEx.Create do
        try
          if BeginSearch(ExtractRegEx(images, &apos;&lt;pages&gt;((?s-).*?)&lt;/pages&gt;&apos;), &apos;&lt;page&gt;(?&lt;lien&gt;.*?)&lt;/page&gt;&apos;) then
            while Find(s) do
              if Pos(&apos;0000000000000-P.jpg&apos;, s) = 0 then
              begin
                if imgAdded then
                  AlbumToImport.Edition.AddImageFromURL(CombineURL(lien, s), ctiPlanche)
                else
                  AlbumToImport.Edition.AddImageFromURL(CombineURL(lien, s), ctiCouverture);
                imgAdded := True;
              end;
        finally
          Free;
        end;
    end;
  end;

  if not imgAdded then begin
    s := ExtractRegEx(page, regExBDCouverture);
    if s &lt;&gt; &apos;&apos; then
      AlbumToImport.Edition.AddImageFromURL(CombineURL(lien, s), ctiCouverture);
  end;

  AlbumToImport.Import;
end;

function RechercheParTitre(const Titre: string): string;
var
  page, sAlbum, oldSerie, sSerie: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
  lien, titre_album, commentaire: string;
  OptionRecherche: Integer;
  GlenatManga, GlenatBD, VentsdOuest: Boolean;
  isOk: Boolean;
begin
  Result := &apos;&apos;;

  GlenatBD := GetOptionValue(&apos;Recherche Gl&#xE9;nat BD&apos;, &apos;Oui&apos;) = &apos;Oui&apos;;
  GlenatManga := GetOptionValue(&apos;Recherche Gl&#xE9;nat Manga&apos;, &apos;Oui&apos;) = &apos;Oui&apos;;
  VentsdOuest := GetOptionValue(&apos;Recherche Vents d&apos;&apos;Ouest&apos;, &apos;Oui&apos;) = &apos;Oui&apos;;

  page := GetPage(urlSearch + Titre, False);
  page := ExtractRegEx(page, regExSearchResultats);

  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;R&#xE9;sultats de recherche de &quot;&apos; + Titre + &apos;&quot;&apos;;
    oldSerie := &apos;&apos;;
    if re.BeginSearch(page, regExSearchResultatsLigne) then
      while re.Find(sAlbum) do begin
        sSerie := ExtractRegEx(sAlbum, regExSearchResultatsLigneSerie);
        if sSerie = &apos;&apos; then
          with TBdtkRegEx.Create do
            try
              sSerie := oldSerie;
              if BeginSearch(sAlbum, regExSearchResultatsLigneAlbum) and Next then
              begin
                lien := GetCaptureByName(&apos;lien&apos;);
                isOk := OptionRecherche = 2;
                if not isOk then isOk := (GlenatBD and IsLienBD(lien)) or (GlenatManga and IsLienManga(lien)) or (VentsdOuest and IsLienVO(lien));

                if isOk then begin
                  titre_album := GetCaptureByName(&apos;titre_album&apos;);
                  AjoutString2(titre_album, GetCaptureByName(&apos;tome&apos;), #13#10);
                  commentaire := &apos;&apos;;
                  AjoutString1(commentaire, StringReplace(GetCaptureByName(&apos;auteur&apos;), &apos;&lt;br&gt;&apos;, &apos;, &apos;, [rfReplaceAll, rfIgnoreCase]), &apos;&lt;br&gt;&apos;, &apos;Auteur(s): &apos;, &apos;&apos;);
                  AjoutString1(commentaire, GetCaptureByName(&apos;editeur&apos;), &apos;&lt;br&gt;&apos;, &apos;Editeur: &apos;, &apos;&apos;);
                  AjoutString1(commentaire, GetCaptureByName(&apos;parution&apos;), &apos;&lt;br&gt;&apos;, &apos;Parution: &apos;, &apos;&apos;);

                  c.AjoutChoix(sSerie, titre_album, HTMLText(commentaire), lien);
                end;
              end;
          finally
            Free;
          end;
        oldSerie := sSerie;
      end;

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

procedure ParseAlbum(const lien: string);
begin
  if IsLienManga(lien) then
    ParseManga(lien)
  else
  if IsLienBD(lien) then
    ParseBD(lien)
  else
  if IsLienVO(lien) then
    ParseBD(lien)
  else
    ShowMessage(&apos;Type d&apos;&apos;album non reconnu&apos;);
end;

var
  id_album, entry: string;
  index: integer;
begin
  entry := AlbumToImport.DefaultSearch;
  index := 0;
  if not AskSearchEntry([&apos;Titre de l&apos;&apos;album ou de la s&#xE9;rie&apos;, &apos;Lien&apos;], entry, index) then Exit;

  id_album := &apos;&apos;;
  case index of
    0: id_album := RechercheParTitre(entry);
    1: id_album := entry
  end;

  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end.</Code>
</Script>
