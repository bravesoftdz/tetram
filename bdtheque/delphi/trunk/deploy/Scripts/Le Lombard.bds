<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Script>
  <Infos>
    <Auteur>Tetram Corp</Auteur>
    <Description/>
    <ScriptVersion>2.3</ScriptVersion>
    <BDVersion>2.2.3.29</BDVersion>
    <LastUpdate>Sun, 18 May 2014 16:15:53 +0200</LastUpdate>
    <Engine>PascalScript</Engine>
  </Infos>
  <Options/>
  <Code>program LeLombard;

uses ScriptFonctions, DefaultRegEx;

const
  urlSite = &apos;http://www.lelombard.com&apos;;
  urlSearchRoot = &apos;/catalogue/recherche.cfm&apos;;

  regExResultsGlobale = &apos;RESULTATS DE LA RECHERCHE(?s-:.*?)&lt;table.*?&gt;((?:[\r|\n|\t|\s]*&lt;tr&gt;(?s-:.*?)&lt;/tr&gt;)*)&lt;/table&gt;&apos;;
  regExResultsGlobaleLigne = &apos;&lt;tr&gt;[\r|\n|\t|\s]*&apos;
    + &apos;&lt;td.*?&gt;.*?&lt;/td&gt;[\r|\n|\t|\s]*&apos;
    + &apos;&lt;td.*?&gt;&lt;a.*?&gt;&lt;b&gt;(?&lt;titre_serie&gt;.*?)&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;[\r|\n|\t|\s]*&apos;
    + &apos;&lt;td.*?&gt;(?:(?&lt;tome&gt;\d*)\.)&lt;/td&gt;[\r|\n|\t|\s]*&apos;
    + &apos;&lt;td.*?&gt;[\r|\n|\t|\s]*&lt;a(?: href=&quot;(?&lt;id_album&gt;.*?)&quot;|.*?)*&gt;(?&lt;titre_album&gt;(?s-).*?)&lt;/a&gt;[\r|\n|\t|\s]*&apos;
    + &apos;&lt;/td&gt;[\r|\n|\t|\s]*&lt;td.*?&gt;.*?&lt;/td&gt;[\r|\n|\t|\s]*&apos;
    + &apos;&lt;td.*?&gt;(?&lt;auteurs&gt;.*?)&lt;/td&gt;[\r|\n|\t|\s]*&apos;
    + &apos;&lt;/tr&gt;&apos;;

  regExAlbumTitres = &apos;&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;.*?&gt;(?s-:.*?)&lt;a href=&apos;&apos;(?&lt;lien_serie&gt;.*?)&apos;&apos;&gt;(?&lt;titre_serie&gt;(?s-).*?)&lt;/a&gt;(?s-:.*?)&lt;/object&gt;(?s-:.*?)&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;.*?&gt;(?s-:.*?)txt=(?:(?&lt;tome&gt;\d*)\. )?(?&lt;titre_album&gt;.*?)&amp;(?s-:.*?)&lt;/object&gt;&apos;;
  regExAlbumParution = &apos;&lt;span id=&quot;intitule&quot;&gt;[\r|\n|\t|\s]*DATE DE PARUTION[\r|\n|\t|\s]*:&lt;/span&gt;[\r|\n|\t|\s]*(.*?)&lt;br&gt;&apos;;
  regExAlbumNbPages = &apos;&lt;span id=&quot;intitule&quot;&gt;[\r|\n|\t|\s]*NOMBRE DE PAGES[\r|\n|\t|\s]*:&lt;/span&gt;[\r|\n|\t|\s]*(?&lt;pages&gt;\d*)[\r|\n|\t|\s]*(?&lt;couleurs&gt;en couleurs|)[\r|\n|\t|\s]*&lt;br&gt;&apos;;
  regExAlbumPrix = &apos;&lt;span id=&quot;intitule&quot;&gt;[\r|\n|\t|\s]*PRIX[\r|\n|\t|\s]*:&lt;/span&gt;[\r|\n|\t|\s]*([\d|,|\.]*).*?&lt;br&gt;&apos;;
  regExAlbumISBN = &apos;&lt;span id=&quot;intitule&quot;&gt;[\r|\n|\t|\s]*ISBN[\r|\n|\t|\s]*:&lt;/span&gt;[\r|\n|\t|\s]*([\d|x|X|-]*)&lt;br&gt;&apos;;
  regExAlbumGenre = &apos;&lt;span id=&quot;intitule&quot;&gt;[\r|\n|\t|\s]*GENRE[\r|\n|\t|\s]*:&lt;/span&gt;[\r|\n|\t|\s]*(.*?)&lt;br&gt;&apos;;
  regExAlbumResume = &apos;&lt;BASE.*?&gt;((?s-).*?)&lt;BASE.*?&gt;&apos;;
  regExAlbumCouverture = &apos;&lt;div align=right id=&quot;myLayer&quot;.*?&gt;&lt;a(?: href=&quot;(?&lt;lien&gt;.*?)&quot;|.*?)*&gt;.*?&lt;img.*?&gt;&lt;/a&gt;&lt;/div&gt;&apos;;
  regExAlbumPlanches = &apos;EXTRAITS(?s-).*?&lt;table.*?&gt;((?s-).*?)&lt;/table&gt;&apos;;
  regExImage = &apos;.*?\?Name=(?&lt;image&gt;.*?)&amp;AlbumID=(?&lt;id_album&gt;.*?)&amp;&apos;;
  urlImage = &apos;/doc/Albums/%s/%s&apos;;

  regExAlbumDessinateurs = &apos;&lt;tr&gt;(?s-:.*?)DESSINATEUR(?s-:.*?)&lt;/tr&gt;((?:[\r|\n|\t|\s]*&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td id=&quot;textereduit&quot;&gt;&lt;a.*?&gt;.*?&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;)*)&apos;;
  regExAlbumScenaristes = &apos;&lt;tr&gt;(?s-:.*?)SC&#xC9;NARISTE(?s-:.*?)&lt;/tr&gt;((?:[\r|\n|\t|\s]*&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td id=&quot;textereduit&quot;&gt;&lt;a.*?&gt;.*?&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;)*)&apos;;

procedure ParseAlbum(const id_album: string);
var
  page, s, couverture: string;
  re: TBdtkRegEx;
  sl: TStringList;
begin
  page := GetPage(CombineURL(urlSite, id_album), True);

  re := TBdtkRegEx.Create;
  try
    AlbumToImport.Serie.Editeur.NomEditeur := PrepareTitre(&apos;Le Lombard&apos;);
    AlbumToImport.Serie.Editeur.SiteWeb := urlSite;
    AlbumToImport.Edition.Editeur.NomEditeur := AlbumToImport.Serie.Editeur.NomEditeur;
    AlbumToImport.Edition.Editeur.SiteWeb := AlbumToImport.Serie.Editeur.SiteWeb;

    if re.beginSearch(page, regExAlbumTitres) and re.Next then
    begin
      AlbumToImport.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_album&apos;));
      AlbumToImport.Serie.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_serie&apos;));
      AlbumToImport.Serie.SiteWeb := CombineURL(CombineURL(urlSite, id_album), re.GetCaptureByName(&apos;lien_serie&apos;));
      AlbumToImport.Tome := StrToIntDef(re.GetCaptureByName(&apos;tome&apos;), 0);
    end;

    sl := TStringList.Create;
    try
      sl.Split(ExtractRegEx(page, regExAlbumParution), &apos; &apos;);
      if sl.Count &gt; 0 then
        AlbumToImport.AnneeParution := StrToIntDef(sl[sl.Count - 1], 0);
      if sl.Count &gt; 1 then
        AlbumToImport.MoisParution := TraduitMois(sl[sl.Count - 2]);
    finally
      sl.Free;
    end;

    if re.beginSearch(page, regExAlbumNbPages) and re.Next then
    begin
      AlbumToImport.Edition.NombreDePages := StrToIntDef(re.GetCaptureByName(&apos;pages&apos;), 0);
      if re.GetCaptureByName(&apos;couleurs&apos;) &lt;&gt; &apos;&apos; then
        AlbumToImport.Edition.Couleur := True;
    end;

    AlbumToImport.Edition.ISBN := CleanISBN(ExtractRegEx(page, regExAlbumISBN));
    AlbumToImport.Edition.Prix := StrToFloatDef(StringReplace(ExtractRegEx(page, regExAlbumPrix), &apos;,&apos;, &apos;.&apos;, []), 0);

    AlbumToImport.Sujet := HTMLText(ExtractRegEx(page, regExAlbumResume));

    AlbumToImport.Serie.Genres.Add(ExtractRegEx(page, regExAlbumGenre));

    if re.BeginSearch(ExtractRegEx(page, regExAlbumScenaristes), regExURL) then
      while re.Next do
        AlbumToImport.Scenaristes.Add(MakeAuteurAlbum(re.GetCaptureByName(&apos;texte&apos;), maScenariste));
    if re.BeginSearch(ExtractRegEx(page, regExAlbumDessinateurs), regExURL) then
      while re.Next do
        AlbumToImport.Dessinateurs.Add(MakeAuteurAlbum(re.GetCaptureByName(&apos;texte&apos;), maDessinateur));

    s := ExtractRegEx(page, regExAlbumCouverture);
    if s &lt;&gt; &apos;&apos; then
    begin
      s := Format(urlImage, [ExtractRegExGroup(s, regExImage, &apos;id_album&apos;), ExtractRegExGroup(s, regExImage, &apos;image&apos;)]);
      AlbumToImport.Edition.AddImageFromURL(CombineURL(urlSite, s), ctiCouverture);
    end;
    couverture := s;

    if re.BeginSearch(ExtractRegEx(page, regExAlbumPlanches), regExURL) then
      while re.Next do
      begin
        s := re.GetCaptureByName(&apos;lien&apos;);
        s := Format(urlImage, [ExtractRegExGroup(s, regExImage, &apos;id_album&apos;), ExtractRegExGroup(s, regExImage, &apos;image&apos;)]);
        if s &lt;&gt; couverture then
          AlbumToImport.Edition.AddImageFromURL(CombineURL(urlSite, s), ctiPlanche);
      end;

    if AlbumToImport.Serie.SiteWeb &lt;&gt; &apos;&apos; then
    begin
      page := GetPage(AlbumToImport.Serie.SiteWeb, False);

      AlbumToImport.Serie.Sujet := HTMLText(ExtractRegEx(page, regExAlbumResume));

      if re.BeginSearch(ExtractRegEx(page, regExAlbumScenaristes), regExURL) then
        while re.Next do
          AlbumToImport.Serie.Scenaristes.Add(MakeAuteurSerie(re.GetCaptureByName(&apos;texte&apos;), maScenariste));
      if re.BeginSearch(ExtractRegEx(page, regExAlbumDessinateurs), regExURL) then
        while re.Next do
          AlbumToImport.Serie.Dessinateurs.Add(MakeAuteurSerie(re.GetCaptureByName(&apos;texte&apos;), maDessinateur));
    end;
  finally
    re.Free;
  end;

  AlbumToImport.Import;
end;

function RechercheParTitre(const Titre: string): string;
var
  page: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
  id, titre_album, auteurs, serie, commentaires: string;
  Pieces: array of RAttachement;
begin
  Result := &apos;&apos;;

  SetLength(Pieces, 1);
  Pieces[0].Nom := &apos;Form_Title&apos;;
  Pieces[0].Valeur := Titre;
  Pieces[0].isFichier := False;
  page := PostPage(CombineURL(urlSite, urlSearchRoot), Pieces, True);

  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;R&#xE9;sultats de recherche de &quot;&apos; + Titre + &apos;&quot;&apos;;
    if re.BeginSearch(ExtractRegEx(page, regExResultsGlobale), regExResultsGlobaleLigne) then
      while re.Next do begin
        titre_album := re.GetCaptureByName(&apos;titre_album&apos;);
        AjoutString1(titre_album, re.GetCaptureByName(&apos;tome&apos;), &apos; &apos;, &apos;T.&apos;, &apos;&apos;);
        id := re.GetCaptureByName(&apos;id_album&apos;);
        serie := re.GetCaptureByName(&apos;titre_serie&apos;);

        commentaires := &apos;&apos;;
        auteurs := &apos;&apos;;
        with TBdtkRegEx.Create do
          try
            if BeginSearch(re.GetCaptureByName(&apos;auteurs&apos;), regExURL) then
              while Next do
                AjoutString2(auteurs, GetCaptureByName(&apos;texte&apos;), &apos;, &apos;);
          finally
            Free;
          end;
        AjoutString1(commentaires, auteurs, &apos;&lt;br&gt;&apos;, &apos;Auteurs: &apos;, &apos;&apos;);

        c.AjoutChoix(serie, Trim(titre_album), HTMLText(commentaires), id);
      end;

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

var
  id_album, entry: string;
  index: integer;
begin
  entry := AlbumToImport.DefaultSearch;
  index := 0;
  if not AskSearchEntry([&apos;Titre de l&apos;&apos;album ou de la s&#xE9;rie&apos;, &apos;Lien&apos;], entry, index) then Exit;

  id_album := &apos;&apos;;
  case index of
    0: id_album := RechercheParTitre(entry);
    1: id_album := entry
  end;

  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end.</Code>
</Script>
